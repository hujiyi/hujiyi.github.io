{"meta":{"title":"Laohoo","subtitle":"有时间, 就多写点Bug。","description":"如果你交给某人一个程序，你将折磨他一整天；如果你教某人如何编写程序，你将折磨他一辈子。 —— David Leinweber.","author":"laohoodman","url":"https://hujiyi.github.io","root":"/"},"pages":[{"title":"categories","date":"2021-11-16T08:00:00.000Z","updated":"2022-10-11T01:40:13.313Z","comments":true,"path":"categories/index.html","permalink":"https://hujiyi.github.io/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2021-11-16T08:00:00.000Z","updated":"2022-10-11T01:40:13.313Z","comments":true,"path":"about/index.html","permalink":"https://hujiyi.github.io/about/index.html","excerpt":"","text":"这里什么都没有留下"},{"title":"contact","date":"2021-11-16T08:00:00.000Z","updated":"2022-10-11T01:40:13.313Z","comments":true,"path":"contact/index.html","permalink":"https://hujiyi.github.io/contact/index.html","excerpt":"","text":""},{"title":"link","date":"2021-11-16T08:00:00.000Z","updated":"2022-10-11T01:40:13.313Z","comments":true,"path":"link/index.html","permalink":"https://hujiyi.github.io/link/index.html","excerpt":"","text":""},{"title":"music","date":"2021-11-16T08:00:00.000Z","updated":"2022-10-11T01:40:13.313Z","comments":true,"path":"music/index.html","permalink":"https://hujiyi.github.io/music/index.html","excerpt":"","text":"这里什么都没有留下"},{"title":"tags","date":"2021-11-16T08:00:00.000Z","updated":"2022-10-11T01:40:13.313Z","comments":true,"path":"tags/index.html","permalink":"https://hujiyi.github.io/tags/index.html","excerpt":"","text":""},{"title":"movies","date":"2021-11-16T08:00:00.000Z","updated":"2022-10-11T01:40:13.313Z","comments":true,"path":"movies/index.html","permalink":"https://hujiyi.github.io/movies/index.html","excerpt":"","text":"这里什么都没有留下"},{"title":"friends","date":"2021-11-16T08:00:00.000Z","updated":"2022-10-11T01:40:13.313Z","comments":true,"path":"friends/index.html","permalink":"https://hujiyi.github.io/friends/index.html","excerpt":"","text":""}],"posts":[{"title":"Learn Vue3 目录","slug":"learn-vue3-000","date":"2024-11-16T12:35:53.000Z","updated":"2024-11-17T09:43:05.875Z","comments":true,"path":"2024/11/16/learn-vue3-000/","permalink":"https://hujiyi.github.io/2024/11/16/learn-vue3-000/","excerpt":"","text":"开发环境： Microsoft Windows 11 Professional [Version 10.0.26100], locale zh-CN Node.js: 20.18.0 Mozilla Firefox Extended Support Release 128.4.0(64-bit) Visual Studio Code, 64-bit edition, Version: 1.95.3 (system setup) Learn Vue 3 Table of Content 创建项目 创建项目 创建项目 创建项目 创建项目 创建项目 创建项目","categories":[{"name":"learn vue3","slug":"learn-vue3","permalink":"https://hujiyi.github.io/categories/learn-vue3/"}],"tags":[{"name":"vue3","slug":"vue3","permalink":"https://hujiyi.github.io/tags/vue3/"}]},{"title":"Flutter Tutorial Table Of Content","slug":"flutter-tutorial-toc","date":"2023-02-27T05:11:08.000Z","updated":"2023-03-27T09:24:49.883Z","comments":true,"path":"2023/02/27/flutter-tutorial-toc/","permalink":"https://hujiyi.github.io/2023/02/27/flutter-tutorial-toc/","excerpt":"","text":"目录 基础组件 Flutter 基础组件 - 图片和图标组件 布局组件 Flutter 布局组件 - 水平&#x2F;垂直组件(Row&#x2F;Column) [Flutter 布局组件 - 叠加布局组件(Stack&#x2F;IndexedStack)] [Flutter 布局组件 - 流式布局组件(Wrap)] [Flutter 布局组件 - 自定义布局组件(Flow)] 定位装饰权重组件 Flutter 定位装饰权重组件 - 定位装饰组件(Container) 滚动组件 [Flutter 滚动组件 - ListView] [Flutter 滚动组件 - GridView] [Flutter 滚动组件 - PageView] 数据组件 [Flutter 数据组件 - DataTable] 布局实例 Flutter 布局实例 - 静态布局构建实例 [Flutter 布局实例 - 无限滚动布局实例] 状态管理 Flutter Riverpod 使用示例 - 计数器 开始使用 Flutter Riverpod 进行状态管理(一) 开始使用 Flutter Riverpod 进行状态管理(二) 开始使用 Flutter Riverpod 进行状态管理(三)","categories":[{"name":"flutter","slug":"flutter","permalink":"https://hujiyi.github.io/categories/flutter/"}],"tags":[{"name":"flutter","slug":"flutter","permalink":"https://hujiyi.github.io/tags/flutter/"}]},{"title":"从 Linux From Scratch 构建自己的操作系统 - 目录","slug":"linux-from-scratch-toc","date":"2023-02-16T05:04:02.000Z","updated":"2023-02-27T05:12:10.610Z","comments":true,"path":"2023/02/16/linux-from-scratch-toc/","permalink":"https://hujiyi.github.io/2023/02/16/linux-from-scratch-toc/","excerpt":"","text":"hexo new ‘linux from scratch 001’ 目录 从 Linux From Scratch 构建自己的操作系统(一) - 准备工作 从 Linux From Scratch 构建自己的操作系统(二) - 创建新的分区 从 Linux From Scratch 构建自己的操作系统(三) - 下载软件包和补丁 从 Linux From Scratch 构建自己的操作系统(四) - 待续 从 Linux From Scratch 构建自己的操作系统(五) - 待续 从 Linux From Scratch 构建自己的操作系统(六) - 待续 从 Linux From Scratch 构建自己的操作系统(七) - 待续 从 Linux From Scratch 构建自己的操作系统(八) - 待续","categories":[{"name":"Linux","slug":"Linux","permalink":"https://hujiyi.github.io/categories/Linux/"}],"tags":[{"name":"LFS","slug":"LFS","permalink":"https://hujiyi.github.io/tags/LFS/"},{"name":"Linux","slug":"Linux","permalink":"https://hujiyi.github.io/tags/Linux/"}]},{"title":"在 Windows 安装解压版的 MySQL 8","slug":"installing-mysql-zip-archive-in-windows","date":"2023-01-05T05:05:51.000Z","updated":"2024-04-17T06:24:26.204Z","comments":true,"path":"2023/01/05/installing-mysql-zip-archive-in-windows/","permalink":"https://hujiyi.github.io/2023/01/05/installing-mysql-zip-archive-in-windows/","excerpt":"","text":"使用国内镜像下载 MySQL 8可以使用华为云镜像快速下载 MySQL 8 或是其他版本, 华为云镜像下载地址：https://repo.huaweicloud.com/mysql/Downloads/ 请选择需要的版本下载, 当前使用的是的 mysql-8.0.29-winx64.zip, 下载地址为: https://repo.huaweicloud.com/mysql/Downloads/MySQL-8.0/mysql-8.0.29-winx64.zip 下载数据库客户端 HeidiSQLHeidiSQL是一个免费开源的轻量级数据库客户端软件，支持访问 MySQL、MariaDB 和 SQL Server等多种数据库。允许浏览数据库，管理表，浏览和编辑记录，管理用户权限等等。从我自己使用的情况来看, 功能并不输给 Navicat, HeidiSQL是免费的, 并且自带中文界面。 下载地址：https://www.heidisql.com/download.php 建议先安装 HeidiSQL, 因为 MySQL 8 可能需要使用到 Visual C++ Redistributable for Visual Studio 2015 这样的组件, 安装HeidiSQL时会安装这个组件。 解压 MySQL解压下载好的 MySQL 文件，我这里直接解压至当前用户的AppData目录下，如下图所示： 配置系统环境变量为了让 Windows 系统可以识别我们这里后面会用到的 MySQL 命令，需要给当前系统环境变量 path 添加 MySQL命令 所在的路径： 我的电脑 -&gt; 右键 —&gt; 属性 —&gt; 高级系统设置 —&gt; 环境变量。在系统变量的 Path 中添加MySQL目录下的 bin 文件夹所在的路径, 如下所示： 安装MySQL数据库准备工作使用 管理员身份 运行、打开 命令提示符 窗口, 如下图所示： 必须使用 管理员身份 运行 命令提示符 或是 powershell 窗口 初始化MySQL数据库命令：mysqld --initialize-insecure 作用：初始化数据库，并设置默认 root 密码为空 重装系统后保留之前使用过的 MySQL , 则密码不是空密码, 而是之前在旧系统中设置过的密码。 执行初始化命令出错时, 可能是因为系统当前没有安装Visual C++ Redistributable for Visual Studio 2015, 可以下载安装后再次进行初始化, 下载地址: https://www.microsoft.com/zh-CN/download/details.aspx?id=48145 为Windows系统安装MySQL服务命令：mysqld install 作用：为Windows系统安装MySQL服务，默认服务名为：mysql 12C:\\Windows\\system32&gt;mysqld installService successfully installed. 启动MySQL服务命令：net start mysql作用：启动MySQL服务，注意此时的 mysql 表示服务名 123C:\\Windows\\system32&gt;net start mysqlMySQL 服务正在启动 .MySQL 服务已经启动成功。 特别提示：如果当前的 MySQL 不是第一次解压后安装的（例如重装系统后再次使用已有的 MySQL）, 就不需要再执行后续的步骤了, MySQL 保留着之前做过的配置(包括用户名、密码) 和 以前创建好的数据库 修改MySQL默认字符集在解压后的 MySQL 文件中创建名为 my.ini 的配置文件, 如下图所示: 编辑 my.ini 文件内容, 设置使用默认字符为utf8mb4, 如下所示： 12345678910111213# 对本地的mysql客户端的配置[client]default-character-set = utf8mb4# 对其他远程连接的mysql客户端的配置[mysql]default-character-set = utf8mb4# 本地mysql服务的配置[mysqld]character-set-client-handshake = FALSEcharacter-set-server = utf8mb4collation-server = utf8mb4_unicode_ci 连接到MySQL在命令提示符窗口输入命令, 连接到MySQL服务器：mysql -uroot -p 12345678910111213C:\\Windows\\system32&gt;mysql -uroot -pEnter password:Welcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 8Server version: 8.0.29 MySQL Community Server - GPLCopyright (c) 2000, 2022, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#x27;help;&#x27; or &#x27;\\h&#x27; for help. Type &#x27;\\c&#x27; to clear the current input statement. 查看当前使用的字符集在 MySQL 提示符输入命令查看当前使用的字符集：show variables like &#39;%character%&#39;; 1234567891011121314mysql&gt; show variables like &#x27;%character%&#x27;;+--------------------------+-------------------------------------------------------------------+| Variable_name | Value |+--------------------------+-------------------------------------------------------------------+| character_set_client | utf8mb4 || character_set_connection | utf8mb4 || character_set_database | utf8mb4 || character_set_filesystem | binary || character_set_results | utf8mb4 || character_set_server | utf8mb4 || character_set_system | utf8mb3 || character_sets_dir | C:\\Users\\laohoo\\AppData\\Local\\mysql-8.0.29-winx64\\share\\charsets\\ |+--------------------------+-------------------------------------------------------------------+8 rows in set, 1 warning (0.00 sec) 修改密码之前初始化 MySQL 服务器的时候, 使用的是空密码, 如果想修改密码, 可按以下步骤操作: 查看当前数据库： show databases; 12345678910mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema || sys |+--------------------+4 rows in set (0.00 sec) 指定当前数据库为 mysql： use mysql; 12mysql&gt; use mysql;Database changed 修改密码: ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;your password&#39;; 12mysql&gt; alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;123456&#x27;;Query OK, 0 rows affected (0.01 sec) 刷新MySQL的系统权限相关表： FLUSH PRIVILEGES; 12mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)","categories":[{"name":"MySQL","slug":"MySQL","permalink":"https://hujiyi.github.io/categories/MySQL/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://hujiyi.github.io/tags/MySQL/"}]},{"title":"使用 electron 和 vuetify 创建 Vue3 桌面应用程序","slug":"build-vue3-desktop-app-with-vite-electron-vuetify","date":"2022-11-21T01:23:54.000Z","updated":"2022-11-24T09:58:23.424Z","comments":true,"path":"2022/11/21/build-vue3-desktop-app-with-vite-electron-vuetify/","permalink":"https://hujiyi.github.io/2022/11/21/build-vue3-desktop-app-with-vite-electron-vuetify/","excerpt":"","text":"最近打算做一个桌面应用程序, 考虑了几种不同的方案: .NET : 这是以前最熟悉的, 不过.NET 的框架也有好几个版本, 因为使用的 Winddows 版本不同, 最终用户还是可能需要安装不用的 .NET Framework, 当然, .NET 现在已经忘得差不多了。 Flutter : Flutter 现在已经可以支持各种不同的操作系统桌面开发, 但是它的路由不怎么好用, 没有类似 Vue 的那个子路由, 想要更新界面中的局部内容, 操作比较麻烦, 输入数据的处理也不够方便。 Electron: 可以配合Vue 等前端框架开发应用, 方便灵活, 前两天发现自己最爱用的UI框架 Vuetify 已经发布了 3.0.1 的正式版, 正式支持 Vue3, 所以打算用这个来试一下。另外的一好处是, 要实现 Web 版本, 代码几乎不需要做什么修改。 使用 Vuetify 模板创建 Vue3项目Vuetify 带有一个创建项目的模板, 使用该模板创建好的项目已经完成了 Vuetify 及相关依赖的配置, 比手动方式更加方便。创建项目命令如下: 1yarn create vuetify 代码执行过程如下: 123456789101112131415161718192021222324252627282930313233PS D:\\sources\\electron_repos&gt; yarn create vuetifyyarn create v1.22.5[1/4] Resolving packages...[2/4] Fetching packages...[3/4] Linking dependencies...[4/4] Building fresh packages...success Installed &quot;create-vuetify@1.0.4&quot; with binaries: - create-vuetify[############] 12/12Vuetify.js - Material Component Framework for Vue√ Project name: ... vite-vuetify-electron-app√ Use TypeScript? ... No / Yes√ Would you like to install dependencies with yarn, npm, or pnpm? » yarn◌ Generating scaffold...◌ Installing dependencies with yarn...yarn install v1.22.5info No lockfile found.[1/4] Resolving packages...[2/4] Fetching packages...[3/4] Linking dependencies...[4/4] Building fresh packages...success Saved lockfile.Done in 3.35s.vite-vuetify-electron-app has been generated at D:\\sources\\electron_repos\\vite-vuetify-electron-appDiscord community: https://community.vuetifyjs.comGithub: https://github.com/vuetifyjs/vuetifySupport Vuetify: https://github.com/sponsors/johnleiderDone in 34.09s. 进入项目文件夹, 运行项目, 效果如以下所示: 12345678910PS D:\\sources\\electron_repos&gt; cd .\\vite-vuetify-electron-app\\PS D:\\sources\\electron_repos\\vite-vuetify-electron-app&gt; yarn devyarn run v1.22.5warning package.json: No license field$ vite VITE v3.2.4 ready in 382 ms ➜ Local: http://127.0.0.1:3000/ ➜ Network: use --host to expose 使用 yarn create vuetify 创建的项目不包含路由和状态管理模块, 需要自行添加。 配置 Electron安装 Electron首先安装electron至Vuetify项目, 命令如下: 1yarn add --dev electron 配置文件 在 vite.config.js 中添加 path 配置 12345import path from &#x27;path&#x27; // 新增引入模块export default defineConfig(&#123; base: path.resolve(__dirname, &#x27;./dist/&#x27;), // 新增 &#125;) 完整代码如下所示: 12345678910111213141516171819202122232425262728293031323334353637383940// Pluginsimport vue from &#x27;@vitejs/plugin-vue&#x27;import vuetify from &#x27;vite-plugin-vuetify&#x27;// Utilitiesimport &#123; defineConfig &#125; from &#x27;vite&#x27;import &#123; fileURLToPath, URL &#125; from &#x27;node:url&#x27;import path from &#x27;path&#x27; // 新增引入模块// https://vitejs.dev/config/export default defineConfig(&#123; base: path.resolve(__dirname, &#x27;./dist/&#x27;), // 新增 plugins: [ vue(), // https://github.com/vuetifyjs/vuetify-loader/tree/next/packages/vite-plugin vuetify(&#123; autoImport: true, &#125;), ], define: &#123; &#x27;process.env&#x27;: &#123;&#125; &#125;, resolve: &#123; alias: &#123; &#x27;@&#x27;: fileURLToPath(new URL(&#x27;./src&#x27;, import.meta.url)) &#125;, extensions: [ &#x27;.js&#x27;, &#x27;.json&#x27;, &#x27;.jsx&#x27;, &#x27;.mjs&#x27;, &#x27;.ts&#x27;, &#x27;.tsx&#x27;, &#x27;.vue&#x27;, ], &#125;, server: &#123; port: 3000, &#125;,&#125;) 在项目根目录创建名为 index.js 的新文件, 编辑内容如下: 1234567891011121314151617181920212223242526272829303132333435363738394041424344// index.js// 控制应用生命周期和创建原生浏览器窗口的模组const &#123; app, BrowserWindow &#125; = require(&#x27;electron&#x27;)const path = require(&#x27;path&#x27;)function createWindow() &#123; // 创建浏览器窗口 const mainWindow = new BrowserWindow(&#123; width: 800, height: 600, webPreferences: &#123; preload: path.join(__dirname, &#x27;preload.js&#x27;) &#125; &#125;) // 加载 index.html mainWindow.loadFile(&#x27;dist/index.html&#x27;) // 此处跟electron官网路径不同，需要注意 // 打开开发工具 // mainWindow.webContents.openDevTools()&#125;// 这段程序将会在 Electron 结束初始化// 和创建浏览器窗口的时候调用// 部分 API 在 ready 事件触发后才能使用。app.whenReady().then(() =&gt; &#123; createWindow() app.on(&#x27;activate&#x27;, function () &#123; // 通常在 macOS 上，当点击 dock 中的应用程序图标时，如果没有其他 // 打开的窗口，那么程序会重新创建一个窗口。 if (BrowserWindow.getAllWindows().length === 0) createWindow() &#125;)&#125;)// 除了 macOS 外，当所有窗口都被关闭的时候退出程序。 因此，通常对程序和它们在// 任务栏上的图标来说，应当保持活跃状态，直到用户使用 Cmd + Q 退出。app.on(&#x27;window-all-closed&#x27;, function () &#123; if (process.platform !== &#x27;darwin&#x27;) app.quit()&#125;)// 在这个文件中，你可以包含应用程序剩余的所有部分的代码，// 也可以拆分成几个文件，然后用 require 导入。 在项目根目录创建名为 preload.js 的新文件, 编辑内容如下: 1234567891011121314// preload.js// 所有Node.js API都可以在预加载过程中使用。// 它拥有与Chrome扩展一样的沙盒。window.addEventListener(&#x27;DOMContentLoaded&#x27;, () =&gt; &#123; const replaceText = (selector, text) =&gt; &#123; const element = document.getElementById(selector) if (element) element.innerText = text &#125; for (const dependency of [&#x27;chrome&#x27;, &#x27;node&#x27;, &#x27;electron&#x27;]) &#123; replaceText(`$&#123;dependency&#125;-version`, process.versions[dependency]) &#125;&#125;) 编辑 package.json 为了确保能够运行相关electron的命令，需要修改package.json文件。 12345678910111213141516171819202122232425// package.json&#123; &quot;name&quot;: &quot;vite-vuetify-electron-app&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;main&quot;: &quot;index.js&quot;, // 新增 &quot;scripts&quot;: &#123; &quot;dev&quot;: &quot;vite&quot;, &quot;build&quot;: &quot;vite build&quot;, &quot;preview&quot;: &quot;vite preview&quot;, &quot;electron:serve&quot;: &quot;electron .&quot; // 新增 &#125;, &quot;dependencies&quot;: &#123; &quot;@mdi/font&quot;: &quot;7.0.96&quot;, &quot;roboto-fontface&quot;: &quot;*&quot;, &quot;vue&quot;: &quot;^3.2.38&quot;, &quot;vuetify&quot;: &quot;^3.0.0&quot;, &quot;webfontloader&quot;: &quot;^1.0.0&quot; &#125;, &quot;devDependencies&quot;: &#123; &quot;@vitejs/plugin-vue&quot;: &quot;^3.0.3&quot;, &quot;electron&quot;: &quot;^21.3.0&quot;, &quot;vite&quot;: &quot;^3.1.9&quot;, &quot;vite-plugin-vuetify&quot;: &quot;^1.0.0-alpha.12&quot; &#125;&#125; package.json文件不能包含 注释, 上面代码的注释只是为了方便标识修改的内容, 在实际开发的时候要把注释删除, 否则项目运行会出现异常 运行项目运行 Electron 项目时, 要先执行 yarn build 构建项目, 生成 dist 文件夹, 才能执行 yarn electron:serve 运行项目 先构建项目1234567891011121314151617PS D:\\sources\\electron_repos\\vite-vuetify-electron-app&gt; yarn buildyarn run v1.22.5warning package.json: No license field$ vite build(!) &quot;base&quot; option should start with a slash.(!) &quot;base&quot; option should end with a slash.vite v3.2.4 building for production...✓ 154 modules transformed.dist/assets/materialdesignicons-webfont.861aea05.eot 1214.57 KiBdist/assets/materialdesignicons-webfont.e52d60f6.woff2 376.33 KiBdist/assets/materialdesignicons-webfont.48d3eec6.woff 548.61 KiBdist/assets/materialdesignicons-webfont.bd725a7a.ttf 1214.36 KiBdist/index.html 0.58 KiBdist/assets/webfontloader.b777d690.js 12.42 KiB / gzip: 4.98 KiBdist/assets/index.5048f0d0.js 113.46 KiB / gzip: 42.44 KiBdist/assets/index.3b4c9523.css 567.04 KiB / gzip: 81.33 KiBDone in 2.30s. 运行项目1234PS D:\\sources\\electron_repos\\vite-vuetify-electron-app&gt; yarn electron:serveyarn run v1.22.5warning package.json: No license field$ electron . 项目运行效果如下图所示: 动态模块热重载按上面步骤建好的项目存在一个问题, 运行中的项目不能实时响应编辑修改后的代码, 所以为了方便开发调试, 需要添加动态模块热重载功能。 编辑index.js将mainWindow.loadFile(&#39;dist/index.html&#39;)更新为mainWindow.loadURL(&quot;http://localhost:3000&quot;), 更新后的文件如下所示： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051// 控制应用生命周期和创建原生浏览器窗口的模组const &#123; app, BrowserWindow &#125; = require(&#x27;electron&#x27;)const path = require(&#x27;path&#x27;)const NODE_ENV = process.env.NODE_ENVfunction createWindow() &#123; // 创建浏览器窗口 const mainWindow = new BrowserWindow(&#123; width: 800, height: 600, webPreferences: &#123; preload: path.join(__dirname, &#x27;preload.js&#x27;) &#125; &#125;) // 加载 index.html // mainWindow.loadFile(&#x27;dist/index.html&#x27;) // 此处跟electron官网路径不同，需要注意 mainWindow.loadURL(&quot;http://localhost:3000&quot;) if (NODE_ENV === &quot;development&quot;) &#123; mainWindow.webContents.openDevTools() &#125; // 打开开发工具 // mainWindow.webContents.openDevTools()&#125;// 这段程序将会在 Electron 结束初始化// 和创建浏览器窗口的时候调用// 部分 API 在 ready 事件触发后才能使用。app.whenReady().then(() =&gt; &#123; createWindow() app.on(&#x27;activate&#x27;, function () &#123; // 通常在 macOS 上，当点击 dock 中的应用程序图标时，如果没有其他 // 打开的窗口，那么程序会重新创建一个窗口。 if (BrowserWindow.getAllWindows().length === 0) createWindow() &#125;)&#125;)// 除了 macOS 外，当所有窗口都被关闭的时候退出程序。 因此，通常对程序和它们在// 任务栏上的图标来说，应当保持活跃状态，直到用户使用 Cmd + Q 退出。app.on(&#x27;window-all-closed&#x27;, function () &#123; if (process.platform !== &#x27;darwin&#x27;) app.quit()&#125;)// 在这个文件中，你可以包含应用程序剩余的所有部分的代码，// 也可以拆分成几个文件，然后用 require 导入。 编辑vite.config.js修改文件vite.config.js的base，修改后的文件如下所示： 1234567891011121314151617181920212223242526272829303132333435363738394041// Pluginsimport vue from &#x27;@vitejs/plugin-vue&#x27;import vuetify from &#x27;vite-plugin-vuetify&#x27;// Utilitiesimport &#123; defineConfig &#125; from &#x27;vite&#x27;import &#123; fileURLToPath, URL &#125; from &#x27;node:url&#x27;import path from &#x27;path&#x27;// https://vitejs.dev/config/export default defineConfig(&#123; // base: path.resolve(__dirname, &#x27;./dist/&#x27;), // 新增 base: &quot;./&quot;, // 新增 plugins: [ vue(), // https://github.com/vuetifyjs/vuetify-loader/tree/next/packages/vite-plugin vuetify(&#123; autoImport: true, &#125;), ], define: &#123; &#x27;process.env&#x27;: &#123;&#125; &#125;, resolve: &#123; alias: &#123; &#x27;@&#x27;: fileURLToPath(new URL(&#x27;./src&#x27;, import.meta.url)) &#125;, extensions: [ &#x27;.js&#x27;, &#x27;.json&#x27;, &#x27;.jsx&#x27;, &#x27;.mjs&#x27;, &#x27;.ts&#x27;, &#x27;.tsx&#x27;, &#x27;.vue&#x27;, ], &#125;, server: &#123; port: 3000, &#125;,&#125;) 同时开启vite和electron服务为了使vite和electron正常运行，需要先运行vite, 使得其开发服务器的url可以正常访问，然后再开启electron去加载url。 此处需要安装两个库： concurrently：阻塞运行多个命令, -k参数用来清除其它已经存在或者挂掉的进程 wait-on：等待资源，此处用来等待url可访问 首先来安装。 1yarn add -D concurrently wait-on 接着更新文件package.json, scripts新增两条命令： 1234&quot;scripts&quot;: &#123; &quot;electron&quot;: &quot;wait-on tcp:3000 &amp;&amp; electron .&quot;, &quot;electron:serve&quot;: &quot;concurrently -k \\&quot;yarn dev\\&quot; \\&quot;yarn electron\\&quot;&quot;&#125;, 更新后完整内容如下： 12345678910111213141516171819202122232425&#123; &quot;name&quot;: &quot;vite-vuetify-electron-app&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: &#123; &quot;dev&quot;: &quot;vite&quot;, &quot;build&quot;: &quot;vite build&quot;, &quot;preview&quot;: &quot;vite preview&quot;, &quot;electron&quot;: &quot;wait-on tcp:3000 &amp;&amp; electron .&quot;, &quot;electron:serve&quot;: &quot;concurrently -k \\&quot;yarn dev\\&quot; \\&quot;yarn electron\\&quot;&quot; &#125;, &quot;dependencies&quot;: &#123; &quot;@mdi/font&quot;: &quot;7.0.96&quot;, &quot;roboto-fontface&quot;: &quot;*&quot;, &quot;vue&quot;: &quot;^3.2.38&quot;, &quot;vuetify&quot;: &quot;^3.0.0&quot;, &quot;webfontloader&quot;: &quot;^1.0.0&quot; &#125;, &quot;devDependencies&quot;: &#123; &quot;@vitejs/plugin-vue&quot;: &quot;^3.0.3&quot;, &quot;electron&quot;: &quot;^21.3.0&quot;, &quot;vite&quot;: &quot;^3.1.9&quot;, &quot;vite-plugin-vuetify&quot;: &quot;^1.0.0-alpha.12&quot; &#125;&#125; 运行现已添加两条命令： yarn electron为等待tcp协议3000端口可访问，然后执行electron yarn electron:serve为阻塞执行开发服务器运行和yarn electron命令 运行项目只要执行命令yarn electron:serve即可，当修改项目文件时，桌面应用也将自动更新。 运行项目执行过程如下: 12345678910111213PS D:\\sources\\electron_repos\\vite-vuetify-electron-app&gt; yarn electron:serveyarn run v1.22.5warning package.json: No license field$ concurrently -k &quot;yarn dev&quot; &quot;yarn electron&quot;warning package.json: No license fieldwarning package.json: No license field$ wait-on tcp:3000 &amp;&amp; electron .$ vite[0][0] VITE v3.2.4 ready in 451 ms[0][0] ➜ Local: http://127.0.0.1:3000/[0] ➜ Network: use --host to expose 打包之前为了方便开发过程中的调试设置的热重载, 在打包后还是加载http://localhost:3000是无法运行的,因此, 此处需要先用vite打包好，然后使用electron-builder加载vite打包后的文件进行打包。 为了代码能够根据不同环境在运行时加载http://localhost:3000, 在打包时加载文件, 此处需要使用环境变量来切换生产和开发环境。 环境变量此处使用环境变量NODE_ENV来切换生产和开发环境，生产环境为NODE_ENV=production, 开发环境为NODE_ENV=development,若有其它如release等环境可在此基础上拓展。 创建electron文件夹在项目根目录下创建文件夹electron, 将index.js和preload.js文件移动进来。其结构如下所示： 123456.├── README.md├── electron│ ├── index.js│ └── preload.js... 编辑electron/index.js该文件主要是需要根据环境变量切换electron加载的内容，修改内容如下： 12345mainWindow.loadURL( NODE_ENV === &#x27;development&#x27; ? &#x27;http://localhost:3000&#x27; :`file://$&#123;path.join(__dirname, &#x27;../dist/index.html&#x27;)&#125;`); 编辑后的完整代码如下: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455// 控制应用生命周期和创建原生浏览器窗口的模组const &#123; app, BrowserWindow &#125; = require(&#x27;electron&#x27;)const path = require(&#x27;path&#x27;)const NODE_ENV = process.env.NODE_ENVfunction createWindow () &#123; // 创建浏览器窗口 const mainWindow = new BrowserWindow(&#123; width: 800, height: 600, webPreferences: &#123; preload: path.join(__dirname, &#x27;preload.js&#x27;) &#125; &#125;) // 加载 index.html// mainWindow.loadFile(&#x27;dist/index.html&#x27;) // 此处跟electron官网路径不同，需要注意 // mainWindow.loadURL(&quot;http://localhost:3000&quot;) mainWindow.loadURL( NODE_ENV === &#x27;development&#x27; ? &#x27;http://localhost:3000&#x27; :`file://$&#123;path.join(__dirname, &#x27;../dist/index.html&#x27;)&#125;` ); if (NODE_ENV === &quot;development&quot;) &#123; mainWindow.webContents.openDevTools() &#125; // 打开开发工具 // mainWindow.webContents.openDevTools()&#125;// 这段程序将会在 Electron 结束初始化// 和创建浏览器窗口的时候调用// 部分 API 在 ready 事件触发后才能使用。app.whenReady().then(() =&gt; &#123; createWindow() app.on(&#x27;activate&#x27;, function () &#123; // 通常在 macOS 上，当点击 dock 中的应用程序图标时，如果没有其他 // 打开的窗口，那么程序会重新创建一个窗口。 if (BrowserWindow.getAllWindows().length === 0) createWindow() &#125;)&#125;)// 除了 macOS 外，当所有窗口都被关闭的时候退出程序。 因此，通常对程序和它们在// 任务栏上的图标来说，应当保持活跃状态，直到用户使用 Cmd + Q 退出。app.on(&#x27;window-all-closed&#x27;, function () &#123; if (process.platform !== &#x27;darwin&#x27;) app.quit()&#125;)// 在这个文件中，你可以包含应用程序剩余的所有部分的代码，// 也可以拆分成几个文件，然后用 require 导入。 编辑package.json首先修改main 属性，将main: index.js改为main: electron/index.js。 123456&#123; &quot;name&quot;: &quot;kuari&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;main&quot;: &quot;electron/index.js&quot;, ... &#125; 接着, 添加build属性： 1234567891011121314151617181920&quot;build&quot;: &#123; &quot;appId&quot;: &quot;com.your-website.your-app&quot;, &quot;productName&quot;: &quot;ElectronApp&quot;, &quot;copyright&quot;: &quot;Copyright © 2021 &lt;your-name&gt;&quot;, &quot;mac&quot;: &#123; &quot;category&quot;: &quot;public.app-category.utilities&quot; &#125;, &quot;nsis&quot;: &#123; &quot;oneClick&quot;: false, &quot;allowToChangeInstallationDirectory&quot;: true &#125;, &quot;files&quot;: [ &quot;dist/**/*&quot;, &quot;electron/**/*&quot; ], &quot;directories&quot;: &#123; &quot;buildResources&quot;: &quot;assets&quot;, &quot;output&quot;: &quot;dist_electron&quot; &#125;&#125; 更新scripts属性先安装两个库： cross-env: 该库让开发者只需要注重环境变量的设置，而无需担心平台设置 electron-builder: electron打包库 1yarn add -D cross-env electron-builder 更新后的scripts如下： 12345678&#123; &quot;dev&quot;: &quot;vite&quot;, &quot;build&quot;: &quot;vite build&quot;, &quot;serve&quot;: &quot;vite preview&quot;, &quot;electron&quot;: &quot;wait-on tcp:3000 &amp;&amp; cross-env NODE_ENV=development electron .&quot;, // 此处需要设置环境变量以保证开发时加载url &quot;electron:serve&quot;: &quot;concurrently -k \\&quot;yarn dev\\&quot; \\&quot;yarn electron\\&quot;&quot;, &quot;electron:build&quot;: &quot;vite build &amp;&amp; electron-builder&quot; // 新增打包命令&#125; 更新后完整的packages.json代码如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&#123; &quot;name&quot;: &quot;vuetify-electron-app&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;main&quot;: &quot;electron/index.js&quot;, &quot;scripts&quot;: &#123; &quot;dev&quot;: &quot;vite&quot;, &quot;build&quot;: &quot;vite build&quot;, &quot;preview&quot;: &quot;vite preview&quot;, &quot;electron&quot;: &quot;wait-on tcp:3000 &amp;&amp; cross-env NODE_ENV=development electron .&quot;, &quot;electron:serve&quot;: &quot;concurrently -k \\&quot;yarn dev\\&quot; \\&quot;yarn electron\\&quot;&quot;, &quot;electron:build&quot;: &quot;vite build &amp;&amp; electron-builder&quot; &#125;, &quot;dependencies&quot;: &#123; &quot;@mdi/font&quot;: &quot;7.0.96&quot;, &quot;leancloud-storage&quot;: &quot;^4.13.4&quot;, &quot;pinia&quot;: &quot;^2.0.24&quot;, &quot;roboto-fontface&quot;: &quot;*&quot;, &quot;vue&quot;: &quot;^3.2.38&quot;, &quot;vue-router&quot;: &quot;^4.1.6&quot;, &quot;vuetify&quot;: &quot;^3.0.1&quot;, &quot;webfontloader&quot;: &quot;^1.0.0&quot; &#125;, &quot;devDependencies&quot;: &#123; &quot;@vitejs/plugin-vue&quot;: &quot;^3.0.3&quot;, &quot;concurrently&quot;: &quot;^7.5.0&quot;, &quot;cross-env&quot;: &quot;^7.0.3&quot;, &quot;electron&quot;: &quot;^21.3.0&quot;, &quot;electron-builder&quot;: &quot;^23.6.0&quot;, &quot;vite&quot;: &quot;^3.1.9&quot;, &quot;vite-plugin-vuetify&quot;: &quot;^1.0.0-alpha.12&quot;, &quot;wait-on&quot;: &quot;^6.0.1&quot; &#125;, &quot;build&quot;: &#123; &quot;appId&quot;: &quot;hujiyi.github.io&quot;, &quot;productName&quot;: &quot;Teaching Plan&quot;, &quot;copyright&quot;: &quot;Copyright © 2022 laohoo&quot;, &quot;mac&quot;: &#123; &quot;category&quot;: &quot;public.app-category.utilities&quot; &#125;, &quot;nsis&quot;: &#123; &quot;oneClick&quot;: false, &quot;allowToChangeInstallationDirectory&quot;: true &#125;, &quot;files&quot;: [ &quot;dist/**/*&quot;, &quot;electron/**/*&quot; ], &quot;directories&quot;: &#123; &quot;buildResources&quot;: &quot;assets&quot;, &quot;output&quot;: &quot;dist_electron&quot; &#125; &#125;&#125; 打包直接执行打包命令即可开始打包。 12yarn electron:build 打包完成之后，会多出两个文件夹dist和dist_electron,其文件结构如下： 123456789101112131415.├── README.md├── dist│ ├── assets│ ├── favicon.ico│ └── index.html├── dist_electron│ ├── MyApp-0.0.0-mac.zip│ ├── MyApp-0.0.0-mac.zip.blockmap│ ├── MyApp-0.0.0.dmg│ ├── MyApp-0.0.0.dmg.blockmap│ ├── builder-debug.yml│ ├── builder-effective-config.yaml│ └── mac... 错误修改在第一次运行 Electron 项目的时候, 有可能会遇到类似包含有 Electron failed to install correctly, please delete node_modules/electron and try installing again； 信息的错误提示。 这个问题是因为在install的时候node_modules/electron/ 中文件的丢失造成程序无法执行。缺少了path.txt和dist文件夹。 可以通过 electron-fix 来修改解决 安装electron-fix, 执行命令: npm install electron-fix -g 进行修改, 执行命令: electron-fix start 执行 npm run fix 完成以上三个步骤之后, 再运行 Electron 项目就没有问题了。","categories":[{"name":"electron","slug":"electron","permalink":"https://hujiyi.github.io/categories/electron/"}],"tags":[{"name":"electron","slug":"electron","permalink":"https://hujiyi.github.io/tags/electron/"},{"name":"vite","slug":"vite","permalink":"https://hujiyi.github.io/tags/vite/"},{"name":"vuetify","slug":"vuetify","permalink":"https://hujiyi.github.io/tags/vuetify/"},{"name":"vue3","slug":"vue3","permalink":"https://hujiyi.github.io/tags/vue3/"}]},{"title":"TamperMonkey 常用的代码","slug":"code-snippets-of-tampermonkey","date":"2022-10-14T07:50:28.000Z","updated":"2023-12-25T09:12:03.925Z","comments":true,"path":"2022/10/14/code-snippets-of-tampermonkey/","permalink":"https://hujiyi.github.io/2022/10/14/code-snippets-of-tampermonkey/","excerpt":"","text":"偶尔会写一些 TamperMonkey 的脚本, 但每次间隔时间久了之后, 就经常忘记要怎么写了, 所以在这里记录一下一些常用的代码段, 有需要的时候可以直接拿来使用。 使用 insertAdjacentHTML 添加 HTML 代码1234567891011// 添加样式或其他HTML元素let style = `&lt;style&gt; .sidebar &#123; display: none !important; &#125; .content&#123; margin: 0 !important; &#125;&lt;/style&gt;`;document.head.insertAdjacentHTML(&#x27;beforeend&#x27;, style); insertAdjacentHTML() 方法将指定的文本解析为 Element 元素，并将结果节点插入到 DOM 树中的指定位置 &#39;beforebegin&#39;：元素自身的前面。 &#39;afterbegin&#39;：插入元素内部的第一个子节点之前。 &#39;beforeend&#39;：插入元素内部的最后一个子节点之后。 &#39;afterend&#39;：元素自身的后面。 添加外部样式文件12345678910111213/** * 添加其他网站上的外部样式文件 * @param &#123;*&#125; href 外部样式文件的url * @returns*/function addLinkCss(href) &#123; let link = document.createElement(&#x27;link&#x27;); link.type = &#x27;text/css&#x27;; link.rel = &#x27;stylesheet&#x27;; link.href = href; document.head.appendChild(link);&#125; 添加样式使用示例1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253// 自定义的样式(为防止样式冲突, 建议每个样式名称取专有的前缀, 例如此处的 acme-)let style = ` .acme-button&#123; position:fixed; bottom: 20px; right: 20px; color: red; padding: 15px; &#125; .acme-speed&#123; display: none; &#125; .acme-button:hover&#123; color: green; width: 300px; height: 200px; &#125; .acme-button:hover .acme-speed&#123; display:inline; &#125; .acme-shadow &#123; box-shadow: 0 2px 12px 2px rgba(0, 0, 0, 0.1); border-radius: 8px; border: 1px solid #ebeef5; background-color: #fff; color: #303133; transition: 0.3s; &#125;`;document.head.insertAdjacentHTML(&#x27;beforeend&#x27;, style);let htmL =`&lt;div class=&quot;acme-button acme-shadow&quot;&gt; &lt;span&gt;show&lt;/span&gt; &lt;select name=&quot;speedx&quot; class=&quot;acme-speed&quot;&gt; &lt;option value=&quot;16&quot;&gt;16.0x&lt;/option&gt; &lt;option value=&quot;12&quot;&gt;12.0x&lt;/option&gt; &lt;option value=&quot;8&quot;&gt;8.0x&lt;/option&gt; &lt;option value=&quot;6&quot;&gt;6.0x&lt;/option&gt; &lt;option value=&quot;4&quot;&gt;4.0x&lt;/option&gt; &lt;option value=&quot;2&quot;&gt;2.0x&lt;/option&gt; &lt;option value=&quot;1&quot;&gt;1.0x&lt;/option&gt; &lt;option value=&quot;0.5&quot;&gt;0.5x&lt;/option&gt; &lt;/select&gt; &lt;/div&gt;`; // 在 &lt;/body&gt; 标签前添加 html 代码document.body.insertAdjacentHTML(&#x27;beforeend&#x27;, html); 添加外部 JavaScript 文件12345678910111213141516/** * 添加自定义的样式 * @param &#123;*&#125; src 外部JavaScript 文件 url * @param &#123;*&#125; cb 在脚本加载并执行完成时触发的函数 * @param &#123;*&#125; onerror 处理发生在脚本加载期间的错误的函数 * @returns*/function addLinkScript(src, cb, onerror) &#123; let script = document.createElement(&quot;script&quot;); script.type = &quot;text/javascript&quot;; script.src = src; console.log(&quot;addScript&quot;, script) document.querySelector(&#x27;head&#x27;).appendChild(script); script.onload = typeof cb === &quot;function&quot; ? cb : function () &#123; &#125;; script.onerror = typeof onerror === &quot;function&quot; ? onerror : function () &#123; &#125;;&#125; 查找嵌套的 iframe 中的元素如果网页内包含的 iframe 元素时, 其内部元素不能被直接定位查找, 查找iframe 内部元素方法如下: 1234567document.querySelectorAll(&#x27;iframe&#x27;).forEach( item =&gt; console.log(item.contentWindow.document.body.querySelectorAll(&#x27;a&#x27;)));// 或者document.querySelector(&quot;iframe&quot;).contentWindow.document.querySelector(&quot;button&quot;) ; 等待指定的时间123456789101112/** * 等待指定的时间, 调用时在函数名前加上： await * @param &#123;*&#125; s 等待时间，单位：秒 * @returns*/async function waitTime(s) &#123; return new Promise((resolve, reject) =&gt; &#123; setTimeout(() =&gt; &#123; return resolve(); &#125;, s * 1000); &#125;);&#125; 延迟查找元素有一些网页元素不能被直接定位查找, 例如使用 JavaScript 框架渲染或是从服务器读取数据后渲染的网页(如Vue.js)、 部分添加了反爬虫措施的网页(故意等待几秒钟后才显示内容)等。这些网页的脚本可以在等到某个特定元素出现后再开始执行, 方法如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354/** * 延迟查找元素 * @param &#123;*&#125; selector 被查找元素的选择器 * @param &#123;*&#125; parent 父元素, 默认为 document * @param &#123;*&#125; timeout 最长查找时间, 单位 毫秒 */async function untilLoaded(selector, parent = document, timeout = 10 * 1000) &#123; return new Promise((resolve) =&gt; &#123; // 如果能找到元素, 直接返回 let result = parent.querySelector(selector); if (result) &#123; // 此处不能缺少 return, 不然后续代码会继续执行 return resolve(result); &#125; let timer; // 找不到元素, 使用 MutationObserver 监听元素变动时目标是否出现 const observer = new MutationObserver((mutations) =&gt; &#123; for (let mutation of mutations) &#123; //仅搜寻新增的dom元素 for (let addedNode of mutation.addedNodes) &#123; //判断单个元素是否为元素类型。 if (addedNode instanceof Element) &#123; //matches函数判断元素是否符合选择器 //如果为真则返回该元素，如果不为真则进行querySelector对其子树进行搜寻 //matches的意义在于检查自身 //因为queryselector检查的是子级，无法检测自身是否是匹配元素。 result = addedNode.matches(selector) ? addedNode : addedNode.querySelector(selector); //如果搜寻到就解除监听，删除超时的定时器并返回结果 if (result) &#123; observer.disconnect(); timer &amp;&amp; clearTimeout(timer); return resolve(result); &#125; &#125; &#125; &#125; &#125;); //监听子元素改变，并监听该元素下的所有Dom元素 observer.observe(parent, &#123; childList: true, subtree: true, &#125;); timer = setTimeout(() =&gt; &#123; observer.disconnect(); timer &amp;&amp; clearTimeout(timer); console.log(&#x27;查找元素超时, 找不到目标元素:&#x27;, selector); return resolve(null); &#125;, timeout); &#125;);&#125; 事件劫持12345678910111213141516171819202122232425const oldEventListener = EventTarget.prototype.addEventListener; EventTarget.prototype.addEventListener = function (...args) &#123; const events = [&#x27;visibilitychange&#x27;, &#x27;blur&#x27;, &#x27;copy&#x27;, &#x27;contextmenu&#x27;, &#x27;selectstart&#x27;]; console.log(&#x27;args:&#x27;, args); if(window.onblur!==null)&#123; window.onblur=null; &#125; if(window.oncopy!==null)&#123; window.oncopy=null; &#125; if(window.oncontextmenu!==null)&#123; window.oncontextmenu=null; &#125; if(window.onselectstart!==null)&#123; window.onselectstart=null; &#125; if (args.length !== 0 &amp;&amp; events.includes(args[0])) &#123; console.log(`劫持 $&#123;args[0]&#125; 事件成功! `) return; &#125; return oldEventListener.call(this, ...args) &#125;","categories":[{"name":"Tampermonkey脚本","slug":"Tampermonkey脚本","permalink":"https://hujiyi.github.io/categories/Tampermonkey%E8%84%9A%E6%9C%AC/"}],"tags":[{"name":"tampermonkey","slug":"tampermonkey","permalink":"https://hujiyi.github.io/tags/tampermonkey/"},{"name":"javaScript","slug":"javaScript","permalink":"https://hujiyi.github.io/tags/javaScript/"}]},{"title":"在 Linux Mint 21 安装 Flutter 开发环境","slug":"install-flutter-on-linux-mint-21","date":"2022-10-09T06:17:10.000Z","updated":"2023-03-02T08:40:04.196Z","comments":true,"path":"2022/10/09/install-flutter-on-linux-mint-21/","permalink":"https://hujiyi.github.io/2022/10/09/install-flutter-on-linux-mint-21/","excerpt":"","text":"开发环境： Dell Inspiron I5 7559 Intel Core i5 6th Gen 6300HQ (2.30GHz) NVIDIA GeForce GTX 960M Linux Mint 21 5.15.0-48-generic, locale en_US.UTF-8 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu122.04) Visual Studio Code 1.72.0 Flutter version 3.3.4 on channel stable Git 2.34.1 前段时间把用了六年的 Dell Inspiron I5 7559 处理了一下: 拆掉失效的电池; 把买电脑时自带的 128GB 固态硬盘装回去; 把500GB的机械硬盘拆下来, 放到硬盘底座上当个移动硬盘用; 然后给它安装了一个 Linux Mint 21。 本来想给 NVIDIA GeForce GTX 960M 显卡安装一个 NVIDIA 驱动的, 试着安装了几个版本不成功, 安装驱动后无法进入桌面, CRTL+ALT+F1 进入 tty 也不成功, 命令界面闪了一下就不见了。显卡驱动装不上, 那就只能拿它来弄其他的吧, 于是就尝试一下在 Linux 上安装 Flutter 的开发环境。 安装 Flutter SDK Flutter SDK (stable channel) 下载地址：https://docs.flutter.dev/development/tools/sdk/releases 在 $HOME 新建名为 AppData 的文件夹 下载最新版的 flutter_linux_3.3.4-stable.tar.xz 到 $HOME/AppData 文件夹 将flutter_linux_3.3.4-stable.tar.xz文件 解压到当前位置(Extact here), 解压后 Flutter SDK 的路径为 $HOME/AppData/flutter 添加 Flutter 相关的环境变量 执行命令:xed ~/.bashrc, 在.bashrc 文件的最末尾添加以下内容: 123export PATH=&quot;$PATH:$HOME/AppData/flutter/bin&quot;export PUB_HOSTED_URL=https://pub.flutter-io.cnexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn xed 是 Linux Mint 自带的文本编辑器, 使用其他版本的 Linux时用相应的命令替换 可以执行 source ~/.bashrc 命令让修改后的环境变量立即生效 Flutter 环境检查 执行 Flutter 环境检查命令: flutter doctor -v Linux 环境下 flutter doctor 命令需要依赖 Git, 在命令执行前要先确保电脑已经安装 Git 命令执行结果如下所示: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849laohoo@laohoo-Inspiron-7559:~/Desktop$ flutter doctor -vFlutter assets will be downloaded from https://storage.flutter-io.cn. Make sure you trust this source!Running &quot;flutter pub get&quot; in flutter_tools... 4.9s[✓] Flutter (Channel stable, 3.3.4, on Linux Mint 21 5.15.0-48-generic, locale en_US.UTF-8) • Flutter version 3.3.4 on channel stable at /home/laohoo/AppData/flutter • Upstream repository https://github.com/flutter/flutter.git • Framework revision eb6d86ee27 (3 days ago), 2022-10-04 22:31:45 -0700 • Engine revision c08d7d5efc • Dart version 2.18.2 • DevTools version 2.15.0 • Pub download mirror https://pub.flutter-io.cn • Flutter download mirror https://storage.flutter-io.cn[✗] Android toolchain - develop for Android devices ✗ Unable to locate Android SDK. Install Android Studio from: https://developer.android.com/studio/index.html On first launch it will assist you in installing the Android SDK components. (or visit https://flutter.dev/docs/get-started/install/linux#android-setup for detailed instructions). If the Android SDK has been installed to a custom location, please use `flutter config --android-sdk` to update to that location.[✗] Chrome - develop for the web (Cannot find Chrome executable at google-chrome) ! Cannot find Chrome. Try setting CHROME_EXECUTABLE to a Chrome executable.[✗] Linux toolchain - develop for Linux desktop • Ubuntu clang version 14.0.0-1ubuntu1 • cmake version 3.22.1 • ninja version 1.10.1 • pkg-config version 0.29.2 ✗ GTK 3.0 development libraries are required for Linux development. They are likely available from your distribution (e.g.: apt install libgtk-3-dev)[!] Android Studio (not installed) • Android Studio not found; download from https://developer.android.com/studio/index.html (or visit https://flutter.dev/docs/get-started/install/linux#android-setup for detailed instructions).[✓] VS Code (version 1.72.0) • VS Code at /usr/share/code • Flutter extension version 3.50.0[✓] Connected device (1 available) • Linux (desktop) • linux • linux-x64 • Linux Mint 21 5.15.0-48-generic[✓] HTTP Host Availability • All required HTTP hosts are available! Doctor found issues in 4 categories. 检查结果显示有4类问题: [✗] Android toolchain - develop for Android devices : 用于生成和运行 Android 应用程序的开发工具链, 目前还没有安装 Android SDK [✗] Chrome - develop for the web : 生成和运行 Web 项目时需要使用 Chrome 浏览器, Linux Mint 自带的 Firefox 不认 [✗] Linux toolchain - develop for Linux desktop: 用于生成和运行 Linux桌面应用程序的开发工具链 [!] Android Studio (not installed): 没有安装 Android Studio, 这个不打算安装了 并不是所有的工具链都要安装, 只安装需要的目标平台的工具链就要以了。 安装 Linux 工具链(Linux toolchain - develop for Linux desktop)Linux 工具链的安装比较简单,直接执行以下命令即可: sudo apt-get install clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev 命令执行过程(部分), 如下所示: 123456789laohoo@laohoo-Inspiron-7559:~/Desktop$ sudo apt-get install clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-devReading package lists... DoneBuilding dependency tree... DoneReading state information... Doneliblzma-dev is already the newest version (5.2.5-2ubuntu1).pkg-config is already the newest version (0.29.2-1ubuntu3).clang is already the newest version (1:14.0-55~exp2).ninja-build is already the newest version (1.10.1-1).cmake is already the newest version (3.22.1-1ubuntu1.22.04.1). Flutter 官方网站安装指导中缺少了 libstdc++-12-dev, 在部分系统上调试项目时, 会出现 可能出现的错误在部分Linux系统上调试Flutter项目时, 可能会出现以下的错误: 123456789101112131415161718192021222324252627Launching lib/main.dart on Linux in debug mode...CMake Error at /usr/share/cmake-3.22/Modules/CMakeTestCXXCompiler.cmake:62 (message): The C++ compiler &quot;/usr/bin/clang++&quot; is not able to compile a simple test program. It fails with the following output: Change Dir: /home/bul/Desktop/app_test/build/linux/x64/debug/CMakeFiles/CMakeTmp Run Build Command(s):/usr/bin/ninja cmTC_6702a &amp;&amp; [1/2] Building CXX object CMakeFiles/cmTC_6702a.dir/testCXXCompiler.cxx.o [2/2] Linking CXX executable cmTC_6702a FAILED: cmTC_6702a : &amp;&amp; /usr/bin/clang++ CMakeFiles/cmTC_6702a.dir/testCXXCompiler.cxx.o -o cmTC_6702a &amp;&amp; : /usr/bin/ld: cannot find -lstdc++: No such file or directory clang: error: linker command failed with exit code 1 (use -v to see invocation) ninja: build stopped: subcommand failed. CMake will not be able to correctly generate this project.Call Stack (most recent call first): CMakeLists.txt:3 (project)Building Linux application... Exception: Unable to generate build files 错误的原因是官方的文档少安装了一个依赖: libstdc++-12-dev, 安装上去即可(上面的Linux工具链安装命令中已包含)。 1sudo apt install lib32stdc++-12-dev 安装 Android toolchainAndroid toolchain 需要的组件包括两大块: Android SDK, Android 模拟器 使用Command-line Tools安装 Android SDK Android SDK Command-line Tools(latest) 下载地址：https://developer.android.google.cn/studio?hl=zh-cn#command-tools 下载、解压缩 Android SDK Command-line Tools(latest) 在 $HOME/AppData/ 文件夹中新建名为android_sdk 的文件夹, 下载最新的 Linux 版本的 Android SDK Command-line Tools(latest)文件 commandlinetools-linux-8512546_latest.zip (如有更新的版本, 请自行替换), 解压缩到以下位置: $HOME/AppData/android_sdk/cmdline-tools/latest , latest 文件夹内包含 bin、lib 文件夹。 修改用户环境变量 执行命令: xed ~/.bashrc, 添加 ANDROID_HOME 环境变量 和 Android SDK Command-line Tools(latest)路径, 如下所示: 123456export PATH=&quot;$PATH:$HOME/AppData/flutter/bin&quot;export PUB_HOSTED_URL=https://pub.flutter-io.cnexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cnexport PATH=&quot;$PATH:$HOME/AppData/android_sdk/cmdline-tools/latest/bin&quot;export ANDROID_HOME=$HOME/AppData/android_sdk 安装 Android SDK 软件包(组件) 配置好 Android SDK Command-line Tools(latest) 路径后, 可以用sdkmanager 命令来安装 Android SDK 软件包, 安装命令格式: sdkmanager &lt;packages&gt; Flutter SDK最少需要三个组件: platform-tools, build-tools, platforms, 其中 build-tools和platforms 的版本会跟随 Flutter SDK 版本而不同。 如果不能确定当前 Flutter SDK 需要的版本号, 可以任意安装某个版本, 当第一次运行程序时, 会自动检查并安装合适的版本。 Flutter SDK 3.3.4 需要的版本为: &quot;build-tools;30.0.3&quot;、 &quot;platforms;android-31&quot; 安装命令: 1sdkmanager &quot;platform-tools&quot; &quot;build-tools;30.0.3&quot; &quot;platforms;android-31&quot; 显示已安装和可用的Android SDK 组件: sdkmanager --list 12345678laohoo@laohoo-Inspiron-7559:~/Desktop$ sdkmanager --listInstalled packages:=====================] 100% Computing updates... Path | Version | Description | Location ------- | ------- | ------- | ------- build-tools;30.0.3 | 30.0.3 | Android SDK Build-Tools 30.0.3 | build-tools/30.0.3 platform-tools | 33.0.3 | Android SDK Platform-Tools | platform-tools platforms;android-31 | 1 | Android SDK Platform 31 | platforms/android-31 执行 Flutter 环境检查, 结果如下所示: 1234567891011121314151617181920212223242526272829303132333435363738394041424344laohoo@laohoo-Inspiron-7559:~/Desktop$ flutter doctor -vFlutter assets will be downloaded from https://storage.flutter-io.cn. Make sure you trust this source![✓] Flutter (Channel stable, 3.3.4, on Linux Mint 21 5.15.0-48-generic, locale en_US.UTF-8) • Flutter version 3.3.4 on channel stable at /home/laohoo/AppData/flutter • Upstream repository https://github.com/flutter/flutter.git • Framework revision eb6d86ee27 (3 days ago), 2022-10-04 22:31:45 -0700 • Engine revision c08d7d5efc • Dart version 2.18.2 • DevTools version 2.15.0 • Pub download mirror https://pub.flutter-io.cn • Flutter download mirror https://storage.flutter-io.cn[!] Android toolchain - develop for Android devices (Android SDK version 31.0.0) • Android SDK at /home/laohoo/AppData/android_sdk • Platform android-33, build-tools 31.0.0 • ANDROID_HOME = /home/laohoo/AppData/android_sdk • Java binary at: /usr/bin/java • Java version OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu122.04) ! Some Android licenses not accepted. To resolve this, run: flutter doctor --android-licenses[✗] Chrome - develop for the web (Cannot find Chrome executable at google-chrome) ! Cannot find Chrome. Try setting CHROME_EXECUTABLE to a Chrome executable.[✓] Linux toolchain - develop for Linux desktop • Ubuntu clang version 14.0.0-1ubuntu1 • cmake version 3.22.1 • ninja version 1.10.1 • pkg-config version 0.29.2[!] Android Studio (not installed) • Android Studio not found; download from https://developer.android.com/studio/index.html (or visit https://flutter.dev/docs/get-started/install/linux#android-setup for detailed instructions).[✓] VS Code (version 1.72.0) • VS Code at /usr/share/code • Flutter extension version 3.50.0[✓] Connected device (1 available) • Linux (desktop) • linux • linux-x64 • Linux Mint 21 5.15.0-48-generic[✓] HTTP Host Availability • All required HTTP hosts are available! Doctor found issues in 3 categories. Android 工具链变成感叹号, 表示还没有完全解决问题 1234567[!] Android toolchain - develop for Android devices (Android SDK version 31.0.0) • Android SDK at /home/laohoo/AppData/android_sdk • Platform android-33, build-tools 31.0.0 • ANDROID_HOME = /home/laohoo/AppData/android_sdk • Java binary at: /usr/bin/java • Java version OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu122.04) ! Some Android licenses not accepted. To resolve this, run: flutter doctor --android-licenses ! Some Android licenses not accepted. To resolve this, run: flutter doctor --android-licenses: 还没有接受 Andorid 的协议, 执行命令: flutter doctor --android-licenses 接受 Android licenses, 执行命令 flutter doctor --android-licenses, 全部问题回答 yes, 如下所示(内容太长, 只显示一小部分): 1234laohoo@laohoo-Inspiron-7559:~/Desktop$ flutter doctor --android-licensesFlutter assets will be downloaded from https://storage.flutter-io.cn. Make sure you trust this source!5 of 6 SDK package licenses not accepted. 100% Computing updates... Review licenses that have not been accepted (y/N)? y 接受协议后再次执行 Flutter 环境检查, 结果如下所示: 1234567891011121314151617181920212223242526272829303132333435363738394041424344laohoo@laohoo-Inspiron-7559:~/Desktop$ flutter doctor -vFlutter assets will be downloaded from https://storage.flutter-io.cn. Make sure you trust this source![✓] Flutter (Channel stable, 3.3.4, on Linux Mint 21 5.15.0-48-generic, locale en_US.UTF-8) • Flutter version 3.3.4 on channel stable at /home/laohoo/AppData/flutter • Upstream repository https://github.com/flutter/flutter.git • Framework revision eb6d86ee27 (3 days ago), 2022-10-04 22:31:45 -0700 • Engine revision c08d7d5efc • Dart version 2.18.2 • DevTools version 2.15.0 • Pub download mirror https://pub.flutter-io.cn • Flutter download mirror https://storage.flutter-io.cn[✓] Android toolchain - develop for Android devices (Android SDK version 31.0.0) • Android SDK at /home/laohoo/AppData/android_sdk • Platform android-33, build-tools 31.0.0 • ANDROID_HOME = /home/laohoo/AppData/android_sdk • Java binary at: /usr/bin/java • Java version OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu122.04) • All Android licenses accepted.[✗] Chrome - develop for the web (Cannot find Chrome executable at google-chrome) ! Cannot find Chrome. Try setting CHROME_EXECUTABLE to a Chrome executable.[✓] Linux toolchain - develop for Linux desktop • Ubuntu clang version 14.0.0-1ubuntu1 • cmake version 3.22.1 • ninja version 1.10.1 • pkg-config version 0.29.2[!] Android Studio (not installed) • Android Studio not found; download from https://developer.android.com/studio/index.html (or visit https://flutter.dev/docs/get-started/install/linux#android-setup for detailed instructions).[✓] VS Code (version 1.72.0) • VS Code at /usr/share/code • Flutter extension version 3.50.0[✓] Connected device (1 available) • Linux (desktop) • linux • linux-x64 • Linux Mint 21 5.15.0-48-generic[✓] HTTP Host Availability • All required HTTP hosts are available! Doctor found issues in 2 categories. 安装模拟器使用命令 sdkmanager emulator 安装模拟器, 命令执行过程如下: 12laohoo@laohoo-Inspiron-7559:~/Desktop$ sdkmanager emulator[=======================================] 100% Unzipping... emulator/bin64/tune2 安装模拟器镜像前, 可以通过 sdkmanager --list 查看当前可用的模拟器镜像, 选择合适的镜像安装。 sdkmanager安装模拟器镜像过程如下所示: 12laohoo@laohoo-Inspiron-7559:~/Desktop$ sdkmanager &quot;system-images;android-31;default;x86_64&quot;[=======================================] 100% Unzipping... x86_64/data/misc/mod 配置模拟器硬件加速Linux 使用 KVM 来支持模拟器的硬件加速, 在安装使用 KVM 之前先要检查电脑是否支持虚拟化功能 安装 cpu-checker 软件包: sudo apt install cpu-checker, 命令执行过程如下: 1234567891011121314151617181920212223242526laohoo@laohoo-Inspiron-7559:~/Desktop$ sudo apt install cpu-checker[sudo] password for laohoo: Reading package lists... DoneBuilding dependency tree... DoneReading state information... DoneThe following additional packages will be installed: msr-toolsThe following NEW packages will be installed: cpu-checker msr-tools0 upgraded, 2 newly installed, 0 to remove and 0 not upgraded.Need to get 17.1 kB of archives.After this operation, 67.6 kB of additional disk space will be used.Do you want to continue? [Y/n] yGet:1 http://mirrors.aliyun.com/ubuntu jammy/main amd64 msr-tools amd64 1.3-4 [10.3 kB]Get:2 http://mirrors.aliyun.com/ubuntu jammy/main amd64 cpu-checker amd64 0.7-1.3build1 [6,800 B]Fetched 17.1 kB in 0s (187 kB/s) Selecting previously unselected package msr-tools.(Reading database ... 295693 files and directories currently installed.)Preparing to unpack .../msr-tools_1.3-4_amd64.deb ...Unpacking msr-tools (1.3-4) ...Selecting previously unselected package cpu-checker.Preparing to unpack .../cpu-checker_0.7-1.3build1_amd64.deb ...Unpacking cpu-checker (0.7-1.3build1) ...Setting up msr-tools (1.3-4) ...Setting up cpu-checker (0.7-1.3build1) ...Processing triggers for man-db (2.10.2-1) ... 检查是否支持虚拟化: egrep -c &#39;(vmx|svm)&#39; /proc/cpuinfo, 命令执行过程如下: 12laohoo@laohoo-Inspiron-7559:~/Desktop$ egrep -c &#x27;(vmx|svm)&#x27; /proc/cpuinfo8 输出值 1 或更大值表示支持虚拟化。输出值 0 表示您的 CPU 不支持硬件虚拟化。 确定电脑是否能够运行硬件加速的 KVM 虚拟机: kvm-ok, 命令执行过程如下: 123laohoo@laohoo-Inspiron-7559:~/Desktop$ kvm-okINFO: /dev/kvm existsKVM acceleration can be used 上述结果表示当前电脑能够运行硬件加速的 KVM 虚拟机 在 Linux 上安装 KVM 1sudo apt-get install qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils 创建Android模拟器通过命令 avdmanager 来创建Android模拟器, 命令格式: avdmanager create avd -n 模拟器名 -k &quot;模拟器镜像名&quot; 模拟器名 用于运行模拟器时调用 模拟器镜像名 为之前已经安装的镜像 命令执行过程如下: 123laohoo@laohoo-Inspiron-7559:~/Desktop$ avdmanager create avd -n huawei -k &quot;system-images;android-31;default;x86_64&quot;Auto-selecting single ABI x86_64========] 100% Fetch remote repository... Do you wish to create a custom hardware profile? [no] 此处为方便回答 no, yes 的选项太多了, 回答了70几项还没有结束, 最关键是还看不懂. huawei 是模拟器的名字 &quot;system-images;android-31;default;x86_64&quot; 是模拟器镜像名 启动模拟器查看当前已经建好的模拟器: avdmanager list avd, 命令执行结果如下: 1234567aohoo@laohoo-Inspiron-7559:~/Desktop$ avdmanager list avdAvailable Android Virtual Devices: Name: huawei Path: /home/laohoo/.android/avd/huawei.avd Target: Default Android System Image Based on: Android 12.0 (S) Tag/ABI: default/x86_64 Sdcard: 512 MB 启动模拟器的命令位于 Android SDK 的 emulator 文件夹下, 需要先添加该文件夹的路径到环境变量中。 修改环境变量: xed ~/.bashrc ~/.bashrc 文件末尾修改后的内容如下: 123456export PATH=&quot;$PATH:$HOME/AppData/flutter/bin&quot;export PATH=&quot;$PATH:$HOME/AppData/android_sdk/cmdline-tools/latest/bin&quot;export PATH=&quot;$PATH:$HOME/AppData/android_sdk/emulator&quot;export PUB_HOSTED_URL=https://pub.flutter-io.cnexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cnexport ANDROID_HOME=$HOME/AppData/android_sdk 启动模拟器的命令: emulator -avd 模拟器名, 命令执行过程如下: 1234567891011121314151617181920212223laohoo@laohoo-Inspiron-7559:~/Desktop$ emulator -avd huaweiINFO | Android emulator version 31.3.11.0 (build_id 9058569) (CL:N/A)emulator: INFO: Found systemPath /home/laohoo/AppData/android_sdk/system-images/android-31/default/x86_64/INFO | Duplicate loglines will be removed, if you wish to see each indiviudal line launch with the -log-nofilter flag.WARNING | unexpected system image feature string, emulator might not function correctly, please try updating the emulator.WARNING | cannot add library /home/laohoo/AppData/android_sdk/emulator/qemu/linux-x86_64/lib64/vulkan/libvulkan.so: failedINFO | added library /home/laohoo/AppData/android_sdk/emulator/lib64/vulkan/libvulkan.soMESA-INTEL: warning: Performance support disabled, consider sysctl dev.i915.perf_stream_paranoid=0INFO | configAndStartRenderer: setting vsync to 60 hzINFO | Sending adb public key [QAAAACPLTUN1QxgyNvTke2ABrlB0HlUVCDlT/YFb/fooM9bItTYvgmZ9+lCSgqgYyQxmkF+TOiBom0UMQ8iidd9qr0yLKd+12SVI5GxZLch4gE7KY+Dm/7MRLso5k6XsMWu4wusaWXIsShzHkMh86Tx16H1OB+GqPaJA5EIjcVHiovK2mRHBz8swQ5+2xJ5fqN4oOEzCRq71se4U5ykFBLmGRSY+BGwGgfqtRAWBZFhZCzL7Jy8ten9Q1cIkOyzLOvOFAZFqdEdMmtTPjBeug1VtTUcL16wGm+PH0MsO0rOH7M7Y7WxjsETt5qXw7BnY80eAyBNCURzxXMoAtX0YBxk9NL3dAuyZmYRz+btLQ7tpYOqpO535s31I+YvQLiXW0bS23lHCBl5CTyV7COZ90BZ2tQp2N37/65nE+jplU7U4NDvA45/+uHCCeFiMR6jegepNi3YUrl9pb6ti/O2+mD3s/YP9pQ/7TokunOG9h5IXVjtdela4jKyLJer3o70PDMNFZtiebQ/8QGT/m5NGp/1wrHMyeGDCYLc5qaEexjD9QzZQyM9xOfiMK/78RBqo7FX0ihL5uMfKAQ2FFD2IQsd8FsYgIS7kzSVZuS0l/8HyBYrsgCt0mBq2A54PvPTCK/UcMdrzj2SpM5yifdEJ/PAGWtD6kwEWa9o9siYu8dBb7Zibw4mnBAEAAQA= laohoo@unknown]INFO | injectedQemuChannel!INFO | Informing listeners of injection.INFO | Rootcanal has been activated.WARNING | *** No gRPC protection active, consider launching with the -grpc-use-jwt flag.***INFO | Started GRPC server at 127.0.0.1:8554, security: Local, auth: noneINFO | Advertising in: /run/user/1000/avd/running/pid_17579.iniINFO | setDisplayConfigs w 320 h 640 dpiX 160 dpiY 160INFO | Wait for emulator (pid 17579) 20 seconds to shutdown gracefully before kill;you can set environment variable ANDROID_EMULATOR_WAIT_TIME_BEFORE_KILL(in seconds) to change the default value (20 seconds)INFO | Info: Sandboxing disabled by user. ((null):0, (null))INFO | Closing down rootcanal. 创建 Flutter 项目创建Flutter项目的命令格式: flutter create &lt;项目名称&gt; 项目名称 由多个单词组成时, 单词之间用下划线_分隔, 不能使用短横线 - 创建项目的命令执行过程如下: 1234567891011121314laohoo@laohoo-Inspiron-7559:~/Sources/flutter_repos$ flutter create my_store_appFlutter assets will be downloaded from https://storage.flutter-io.cn. Make sure you trust this source!Creating project my_store_app...Running &quot;flutter pub get&quot; in my_store_app... 1,992msWrote 127 files.All done!In order to run your application, type: $ cd my_store_app $ flutter runYour application code is in my_store_app/lib/main.dart. 运行项目进入新创建的项目文件夹, 运行程序: 12cd my_store_appflutter run 命令执行过程如下所示: 1234567891011121314151617181920212223242526laohoo@laohoo-Inspiron-7559:~/Sources/flutter_repos/my_store_app$ flutter runFlutter assets will be downloaded from https://storage.flutter-io.cn. Make sure you trust this source!Using hardware rendering with device Android SDK built for x86 64. If you notice graphics artifacts, consider enabling software renderingwith &quot;--enable-software-rendering&quot;.Launching lib/main.dart on Android SDK built for x86 64 in debug mode...Checking the license for package Android SDK Tools in /home/laohoo/AppData/android_sdk/licensesLicense for package Android SDK Tools accepted.Preparing &quot;Install Android SDK Tools (revision: 26.1.1)&quot;.&quot;Install Android SDK Tools (revision: 26.1.1)&quot; ready.Installing Android SDK Tools in /home/laohoo/AppData/android_sdk/tools&quot;Install Android SDK Tools (revision: 26.1.1)&quot; complete.&quot;Install Android SDK Tools (revision: 26.1.1)&quot; finished.Checking the license for package Android SDK Build-Tools 30.0.3 in /home/laohoo/AppData/android_sdk/licensesLicense for package Android SDK Build-Tools 30.0.3 accepted.Preparing &quot;Install Android SDK Build-Tools 30.0.3 (revision: 30.0.3)&quot;.&quot;Install Android SDK Build-Tools 30.0.3 (revision: 30.0.3)&quot; ready.Installing Android SDK Build-Tools 30.0.3 in /home/laohoo/AppData/android_sdk/build-tools/30.0.3&quot;Install Android SDK Build-Tools 30.0.3 (revision: 30.0.3)&quot; complete.&quot;Install Android SDK Build-Tools 30.0.3 (revision: 30.0.3)&quot; finished.Checking the license for package Android SDK Platform 31 in /home/laohoo/AppData/android_sdk/licensesLicense for package Android SDK Platform 31 accepted.Preparing &quot;Install Android SDK Platform 31 (revision: 1)&quot;.&quot;Install Android SDK Platform 31 (revision: 1)&quot; ready.Installing Android SDK Platform 31 in /home/laohoo/AppData/android_sdk/platforms/android-31&quot;Install Android SDK Platform 31 (revision: 1)&quot; complete.&quot;Install Android SDK Platform 31 (revision: 1)&quot; finished. 此处安装的 Android SDK 组件版本不正确, 在第一次运行程序的时候, 会自动下载正确的版本 设置 Gradle 国内镜像Gradle 导致的运行问题flutter 默认使用 Gradle 管理项目, 第一次运行时, 除了检查 Android SDK 组件并下载正确的版本外, 还会安装和 Flutter SDK 匹配的 Gradle, Flutter SDK 3.3.4 使用的是 gradle-7.4。 Gradle 添加成功后才会下载当前项目所需要的其他包和组件, 由于 Gradle 默认使用的源是国外的服务器, 所以网络状况不好时通常出现类似以下的错误信息: 1234567891011121314151617181920212223laohoo@laohoo-Inspiron-7559:~/Sources/flutter_repos/my_store_app$ flutter runFlutter assets will be downloaded from https://storage.flutter-io.cn. Make sure you trust this source!Using hardware rendering with device Android SDK built for x86 64. If you notice graphics artifacts, consider enabling software renderingwith &quot;--enable-software-rendering&quot;.Launching lib/main.dart on Android SDK built for x86 64 in debug mode...FAILURE: Build failed with an exception.* What went wrong:Execution failed for task &#x27;:app:compileDebugKotlin&#x27;.&gt; Could not resolve all dependencies for configuration &#x27;:app:kotlinCompilerClasspath&#x27;. &gt; Could not load module metadata from /home/laohoo/.gradle/caches/modules-2/metadata-2.97/descriptors/org.jetbrains.kotlin/kotlin-script-runtime/1.6.10/a8be1fe3b3911d3d3425fe720cf42835/descriptor.bin* Try:&gt; Run with --stacktrace option to get the stack trace.&gt; Run with --info or --debug option to get more log output.&gt; Run with --scan to get full insights.* Get more help at https://help.gradle.orgBUILD FAILED in 1sRunning Gradle task &#x27;assembleDebug&#x27;... 2,548msException: Gradle task assembleDebug failed with exit code 1 解决办法在 $HOME/.gradle 文件夹下新建名为 init.gradle 的文件, 文件内容编辑如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566allprojects&#123; repositories &#123; def ALIYUN_REPOSITORY_URL = &#x27;https://maven.aliyun.com/repository/public/&#x27; def ALIYUN_JCENTER_URL = &#x27;https://maven.aliyun.com/repository/jcenter/&#x27; def ALIYUN_GOOGLE_URL = &#x27;https://maven.aliyun.com/repository/google/&#x27; def ALIYUN_GRADLE_PLUGIN_URL = &#x27;https://maven.aliyun.com/repository/gradle-plugin/&#x27; all &#123; ArtifactRepository repo -&gt; if(repo instanceof MavenArtifactRepository)&#123; def url = repo.url.toString() if (url.startsWith(&#x27;https://repo1.maven.org/maven2/&#x27;)) &#123; project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_REPOSITORY_URL.&quot; remove repo &#125; if (url.startsWith(&#x27;https://jcenter.bintray.com/&#x27;)) &#123; project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_JCENTER_URL.&quot; remove repo &#125; if (url.startsWith(&#x27;https://dl.google.com/dl/android/maven2/&#x27;)) &#123; project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_GOOGLE_URL.&quot; remove repo &#125; if (url.startsWith(&#x27;https://plugins.gradle.org/m2/&#x27;)) &#123; project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_GRADLE_PLUGIN_URL.&quot; remove repo &#125; &#125; &#125; maven &#123; url ALIYUN_REPOSITORY_URL &#125; maven &#123; url ALIYUN_JCENTER_URL &#125; maven &#123; url ALIYUN_GOOGLE_URL &#125; maven &#123; url ALIYUN_GRADLE_PLUGIN_URL &#125; &#125; buildscript&#123; repositories &#123; def ALIYUN_REPOSITORY_URL = &#x27;https://maven.aliyun.com/repository/public/&#x27; def ALIYUN_JCENTER_URL = &#x27;https://maven.aliyun.com/repository/jcenter/&#x27; def ALIYUN_GOOGLE_URL = &#x27;https://maven.aliyun.com/repository/google/&#x27; def ALIYUN_GRADLE_PLUGIN_URL = &#x27;https://maven.aliyun.com/repository/gradle-plugin/&#x27; all &#123; ArtifactRepository repo -&gt; if(repo instanceof MavenArtifactRepository)&#123; def url = repo.url.toString() if (url.startsWith(&#x27;https://repo1.maven.org/maven2/&#x27;)) &#123; project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_REPOSITORY_URL.&quot; remove repo &#125; if (url.startsWith(&#x27;https://jcenter.bintray.com/&#x27;)) &#123; project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_JCENTER_URL.&quot; remove repo &#125; if (url.startsWith(&#x27;https://dl.google.com/dl/android/maven2/&#x27;)) &#123; project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_GOOGLE_URL.&quot; remove repo &#125; if (url.startsWith(&#x27;https://plugins.gradle.org/m2/&#x27;)) &#123; project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_GRADLE_PLUGIN_URL.&quot; remove repo &#125; &#125; &#125; maven &#123; url ALIYUN_REPOSITORY_URL &#125; maven &#123; url ALIYUN_JCENTER_URL &#125; maven &#123; url ALIYUN_GOOGLE_URL &#125; maven &#123; url ALIYUN_GRADLE_PLUGIN_URL &#125; &#125; &#125;&#125; 在第一次运行 Flutter 项目, 下载了 Gradle 之后, 就会创建 $HOME/.gradle 文件夹, 该文件夹是隐藏文件夹。 再次运行项目, 命令执行过程如下: 123456789101112131415161718192021laohoo@laohoo-Inspiron-7559:~/Sources/flutter_repos/my_store_app$ flutter runFlutter assets will be downloaded from https://storage.flutter-io.cn. Make sure you trust this source!Using hardware rendering with device Android SDK built for x86 64. If you notice graphics artifacts, consider enabling software rendering with &quot;--enable-software-rendering&quot;.Launching lib/main.dart on Android SDK built for x86 64 in debug mode...Running Gradle task &#x27;assembleDebug&#x27;... 93.9s✓ Built build/app/outputs/flutter-apk/app-debug.apk.Installing build/app/outputs/flutter-apk/app.apk... 1,034msSyncing files to device Android SDK built for x86 64... 211msFlutter run key commands.r Hot reload. 🔥🔥🔥R Hot restart.h List all available interactive commands.d Detach (terminate &quot;flutter run&quot; but leave application running).c Clear the screenq Quit (terminate the application on the device).💪 Running with sound null safety 💪An Observatory debugger and profiler on Android SDK built for x86 64 is available at: http://127.0.0.1:42339/XnPsnajGgW8=/The Flutter DevTools debugger and profiler on Android SDK built for x86 64 is available at: http://127.0.0.1:9101?uri=http://127.0.0.1:42339/XnPsnajGgW8=/ &#x3D;&#x3D;&#x3D; END &#x3D;&#x3D;&#x3D;","categories":[{"name":"flutter","slug":"flutter","permalink":"https://hujiyi.github.io/categories/flutter/"}],"tags":[{"name":"flutter","slug":"flutter","permalink":"https://hujiyi.github.io/tags/flutter/"},{"name":"command-line tools","slug":"command-line-tools","permalink":"https://hujiyi.github.io/tags/command-line-tools/"}]},{"title":"在 Windows 中同时安装多个 JDK","slug":"windows-install-java-jdk","date":"2022-09-25T08:28:18.000Z","updated":"2023-12-26T12:16:23.922Z","comments":true,"path":"2022/09/25/windows-install-java-jdk/","permalink":"https://hujiyi.github.io/2022/09/25/windows-install-java-jdk/","excerpt":"","text":"最近进行开发的时候, 遇到了一些不同 JDK 版本的需求: Spring Boot 2 的开发框架 eladmin-plus 只能使用 JDK 8; 新版本的 Flutter SDK 配置 Android Toolchain 时最低要求 JDK 11; 而最新版的 Spring Boot 最低的 JDK 版本是 JDK 17。 想在同一台电脑完成上面的开发, 比较好的作法当然是在一台电脑上安装多个版本的 JDK, 根据需要随时进行切换。 安装版和解压版 JDK安装版的 JDK 会添加一些环境变量到电脑中, 如果这些环境变量不进行处理, 会对切换后的其他版本JDK 造成影响, 所以在 Windows 中同地安装多个版本的 JDK时, 建议使用解压版。 现在 Oracle 已经不提供解压版的JDK了, 所以要自己进行制作。 制作解压版的 Oracle JDK 下载安装各版本JDK(例如 JDK 8, JDK11, JDK17等) 的安装程序 运行安装程序, 参考下图的步骤, 复制 JDK 到另一个位置 复制出来的就是我们需要的解压版JDK, 复制成功后, 取消当前JDK的继续安装。 重复以上步骤获取其他版本的 JDK文件 可以把其他电脑已经安装好的JDK文件夹复制出来使用即可 Open JDK - 另一种选择Open JDK 大部分都是解压版, 如果可以接受 Open JDK 的话, 则直接下载回来解压就可以使用了。 比如Microsoft 维护的 OpenJDK:https://learn.microsoft.com/zh-cn/java/openjdk/download 如果电脑有安装 Android Studio, 会自带有一个 OpenJDK, 也可以把这个 JDK 复制出来使用。 我在当前电脑准备了四个解压版本的JDK, 将其放在 d:\\AppData 文件夹下, 解压版的软件在重装操作系统后也可以直接使用, 所以放在D盘的文件夹比较好, 如下图: jdk1.8.0_333: 使用安装程序按照上面制作方法复制出来的 Oracle JDK 8, 将复制出来的文件夹改名; openjdk1.8.0_242: 旧版Android Studio 3.5 自带的OpenJDK, 将其安装文件夹的 jre 文件夹复制出来并改名; openjdk11.0.12: Android Studio 2020.3.1 自带的OpenJDK, 将其安装文件夹的 jre 文件夹复制出来并改名; openjdk17.0.2 : 直接从 Microsoft 下载并解压并改名的 OpenJDK 之所以有这么多个, 只是为了把获取解压版 JDK 的方法都试一次 系统环境变量设置编辑系统环境变量 path, 添加以下两个值: %JAVA_HOME%\\bin %JAVA_HOME%\\jre\\bin 如下图所示: 使用或切换不同版本的 JDK以上已经准备好的四个JDK 的路径分别为: D:\\AppData\\jdk1.8.0_333 D:\\AppData\\openjdk1.8.0_242 D:\\AppData\\openjdk11.0.12 D:\\AppData\\openjdk17.0.2 只需要将相应的路径添加到系统环境变量 JAVA_HOME 中即可使用该版本的 JDK。 为更方便进行切换, 可以使用命令的方式来添加或修改环境变量的值, 命令格式: setx &quot;环境变量名&quot; &quot;环境变量值&quot; 使用管理员权限打开 CMD窗口 或 PowerShell窗口，执行以下命令: 1setx &quot;JAVA_HOME&quot; &quot;D:\\AppData\\openjdk17.0.2&quot; /m 命令行后的参数 /m 表示添加为 系统 环境变量, 没有该参数量为用户环境变量 只需要将 D:\\AppData\\openjdk17.0.2 替换为其他路径并重复执行以上命令即可实现 JDK 版本的切换 切换版本后, 要在新打开的命令窗口中才能查看到切换后 java 版本 命令执行结果如下所示: 123PS C:\\Users\\hujy&gt; setx &quot;JAVA_HOME&quot; &quot;D:\\AppData\\openjdk17.0.2&quot; /m成功: 指定的值已得到保存。 已经添加成功的 JAVA_HOME 环境变量 查看 Java 版本信息 1234PS C:\\Users\\hujy&gt; java -versionopenjdk version &quot;17.0.2&quot; 2022-01-18OpenJDK Runtime Environment (build 17.0.2+8-86)OpenJDK 64-Bit Server VM (build 17.0.2+8-86, mixed mode, sharing)","categories":[{"name":"Java","slug":"Java","permalink":"https://hujiyi.github.io/categories/Java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://hujiyi.github.io/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://hujiyi.github.io/tags/jdk/"}]},{"title":"在 Visual Studio Code 中批量删除注释和空行","slug":"remove-the-comments-in-the-visual-studio-code","date":"2022-09-23T03:52:04.000Z","updated":"2022-10-11T01:40:13.267Z","comments":true,"path":"2022/09/23/remove-the-comments-in-the-visual-studio-code/","permalink":"https://hujiyi.github.io/2022/09/23/remove-the-comments-in-the-visual-studio-code/","excerpt":"","text":"使用 Visual Studio Code 中的替换功能和正则表达式 匹配可以快速删除大量注释或 空行。 在替换对话框中使用正则表达式模式具体的操作步骤如下: 在 Visual Studio Code 打开要批量删除注释的文件, 按 Ctrl + H 打开替换框。 按 Alt+R 选择 Use Regular Expression(Alt+R)即正则表达式模式, 或是点击如图按钮切換到正则表达式模式。 查找内容输入正则表达式, 替换内容为空, 选择全部替换。 常用的正则表达式 单行注释 1//[\\s\\S]*?\\n 块注释(多行注释) 1/\\*(.|\\r\\n|\\n)*?\\*/ 所有注释 1\\/\\*[\\s\\S]*\\*\\/|\\/\\/.* html 注释 1&lt;!--(.*?)--&gt; html 注释(有换行) 1&lt;!--([\\s\\S|\\r]*?)--&gt; 空行 1^\\s*(?=\\r?$)\\n","categories":[{"name":"Visual Studio Code","slug":"Visual-Studio-Code","permalink":"https://hujiyi.github.io/categories/Visual-Studio-Code/"}],"tags":[{"name":"注释","slug":"注释","permalink":"https://hujiyi.github.io/tags/%E6%B3%A8%E9%87%8A/"},{"name":"空格","slug":"空格","permalink":"https://hujiyi.github.io/tags/%E7%A9%BA%E6%A0%BC/"}]},{"title":"在 Hexo 中隐藏文章","slug":"hexo-hide-posts","date":"2022-08-31T01:14:56.000Z","updated":"2022-10-11T01:40:13.254Z","comments":true,"path":"2022/08/31/hexo-hide-posts/","permalink":"https://hujiyi.github.io/2022/08/31/hexo-hide-posts/","excerpt":"","text":"隐藏博客中某些特定的文章应该算是一个比较常见的需求，毕竟谁都有些不希望让别人看到的东西。当然啦，你可能会说，「不想被看到就不要放到博客上来嘛」。话是没错，不过有时候人就是这么别扭，想让某些文章被看到，却又不想被所有人看到，又或者是某些文章只想和自己熟悉的人一起分享。 Hexo 插件 hexo-hide-posts 可以实现这个需求（网上也有一些关于 Hexo 隐藏文章的教程，不过一般都要求修改主题文件，还是这个插件更通用一些）。它的功能如下： 在博客的所有文章列表中隐藏指定的文章（包括首页、存档页、分类标签、Feed 等） 被隐藏的文章依然可以通过文章链接直接访问（比如 https://hexo.example/{slug}/） 除非知道链接，任何人都无法找到这些被隐藏的文章。 安装 hexo-hide-posts12345678910111213141516171819202122$ yarn add hexo-hide-postsyarn add v1.22.5warning package-lock.json found. Your project contains lock files generated by tools other than Yarn. It is advised notto mix package managers in order to avoid resolution inconsistencies caused by unsynchronized lock files. To clear thiswarning, remove package-lock.json.[1/4] Resolving packages...[2/4] Fetching packages...info fsevents@2.3.2: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@2.3.2&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...[4/4] Building fresh packages...success Saved lockfile.success Saved 3 new dependencies.info Direct dependencies├─ hexo-generator-index-pin-top@0.2.2└─ hexo-hide-posts@0.2.0info All dependencies├─ hexo-generator-index-pin-top@0.2.2├─ hexo-hide-posts@0.2.0└─ object-assign@4.1.1Done in 19.27s. 配置 在站点目录下的_config.yml中如下配置: 12345678910# hexo-hide-postshide_posts: enable: true # Change the filter name to fit your need filter: hidden # Generators which you want to expose all posts (include hidden ones) to. # Common generators: index, tag, category, archive, sitemap, feed, etc. public_generators: [] # Add &quot;noindex&quot; meta tag to prevent hidden posts from being indexed by search engines noindex: true 使用文章隐藏功能安装插件后，在想要隐藏的文章的 front-matter（就是 Markdown 顶上的那个参数块）里添加一行 hidden: true 即可。 例如编辑文章: source/_posts/lorem-ipsum.md 12345678---title: &#x27;Lorem Ipsum&#x27;date: &#x27;2019/8/10 11:45:14&#x27;hidden: true---Lorem ipsum dolor sit amet, consectetur adipiscing elit. 这篇文章不会在任何地方显示，但仍然可以通过类似 https://hexo.test/lorem-ipsum/ 的网址访问它。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hujiyi.github.io/categories/Hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://hujiyi.github.io/tags/hexo/"},{"name":"butterfly","slug":"butterfly","permalink":"https://hujiyi.github.io/tags/butterfly/"},{"name":"github pages","slug":"github-pages","permalink":"https://hujiyi.github.io/tags/github-pages/"}]},{"title":"在 Hexo 博客的 Butterfly 主题中添加文章置顶功能","slug":"hexo-generator-index-pin-top","date":"2022-08-19T01:44:39.000Z","updated":"2022-10-11T01:40:13.254Z","comments":true,"path":"2022/08/19/hexo-generator-index-pin-top/","permalink":"https://hujiyi.github.io/2022/08/19/hexo-generator-index-pin-top/","excerpt":"","text":"卸载 hexo-generator-index执行命令: npm uninstall hexo-generator-index 1234567891011121314151617181920212223PS D:\\sources\\hexo-repos\\hujiyi.github.io&gt; npm uninstall hexo-generator-indexnpm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecatednpm WARN deprecated source-map-resolve@0.5.3: See https://github.com/lydell/source-map-resolve#deprecatednpm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecatednpm WARN deprecated source-map-url@0.4.1: See https://github.com/lydell/source-map-url#deprecatednpm WARN rm not removing D:\\sources\\hexo-repos\\hujiyi.github.io\\node_modules\\.bin\\stylus.cmd as it wasn&#x27;t installed by D:\\sources\\hexo-repos\\hujiyi.github.io\\node_modules\\stylusnpm WARN rm not removing D:\\sources\\hexo-repos\\hujiyi.github.io\\node_modules\\.bin\\stylus as it wasn&#x27;t installed by D:\\sources\\hexo-repos\\hujiyi.github.io\\node_modules\\stylusnpm WARN rm not removing D:\\sources\\hexo-repos\\hujiyi.github.io\\node_modules\\.bin\\js-yaml.cmd as it wasn&#x27;t installed by D:\\sources\\hexo-repos\\hujiyi.github.io\\node_modules\\js-yamlnpm WARN rm not removing D:\\sources\\hexo-repos\\hujiyi.github.io\\node_modules\\.bin\\js-yaml as it wasn&#x27;t installed by D:\\sources\\hexo-repos\\hujiyi.github.io\\node_modules\\js-yaml&gt; ejs@2.7.4 postinstall D:\\sources\\hexo-repos\\hujiyi.github.io\\node_modules\\ejs&gt; node ./postinstall.jsThank you for installing EJS: built with the Jake JavaScript build tool (https://jakejs.com/)npm notice created a lockfile as package-lock.json. You should commit this file.npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.2 (node_modules\\chokidar\\node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)added 29 packages from 12 contributors, removed 24 packages and updated 254 packages in 90.165s24 packages are looking for funding run `npm fund` for details 安装 hexo-generator-index-pin-top执行命令: npm i hexo-generator-index-pin-top --save 123456789PS D:\\sources\\hexo-repos\\hujiyi.github.io&gt; npm i hexo-generator-index-pin-top --savenpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.2 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)+ hexo-generator-index-pin-top@0.2.2added 2 packages from 2 contributors and removed 1 package in 2.781s24 packages are looking for funding run `npm fund` for details 文件置顶在需要置顶的文章的 Front-matter 中加上 top: true/数字 即可, 数字越大，文章越靠前。 123456789101112---title: 在 Windows 10 配置 Flutter 开发环境date: 2021-12-04 19:33:44top: 10categories:- fluttertags:- flutter- android studiotop_img:cover: https://hujiyi.github.io/2021/02/02/flutter-introduction-part-I/flutter_eman_blog.png--- 参考资料：https://blog.csdn.net/weixin_43372529/article/details/114176470 &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hujiyi.github.io/categories/Hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://hujiyi.github.io/tags/hexo/"},{"name":"butterfly","slug":"butterfly","permalink":"https://hujiyi.github.io/tags/butterfly/"},{"name":"github pages","slug":"github-pages","permalink":"https://hujiyi.github.io/tags/github-pages/"}]},{"title":"Django 框架开发实战 - 复习","slug":"create-an-app-in-django-review","date":"2022-08-10T08:05:58.000Z","updated":"2022-10-11T01:40:12.919Z","comments":true,"path":"2022/08/10/create-an-app-in-django-review/","permalink":"https://hujiyi.github.io/2022/08/10/create-an-app-in-django-review/","excerpt":"","text":"开发环境： Microsoft Windows 10 Enterprise LTSC [Version 10.0.19044.1586], locale zh-CN Python 3.8.10 PyCharm 2021.2 (Professional Edition) Visual Studio Code, 64-bit edition (version 1.67.2) 在 PyCharm 中创建 Django 项目在 PyCharm 菜单中选择 File -&gt; New Project, 在弹出的 新项目 对话框中选择 项目类型、保存位置 等信息。 修改项目的 语言 和 时区 配置打开文件 myproject/settings.py, 找到 LANGUAGE_CODE、TIME_ZONE 和 USE_TZ 并进行修改, 如下图所示： 12345678LANGUAGE_CODE = &#x27;zh-Hans&#x27; # 语言代码TIME_ZONE = &#x27;Asia/shanghai&#x27; # 时区USE_I18N = TrueUSE_TZ = False # 是否采用UTC时间 在项目内创建应用在项目文件夹中按住键盘的 Shift, 点鼠标 右键, 选择 在此处打开PowerShell窗口 或 在此处打开命令窗口 (Windows 7) 激活虚拟环境, 命令： venv\\Scripts\\activate 12PS D:\\PycharmProjects\\myproject&gt; .\\venv\\Scripts\\activate(venv) PS D:\\PycharmProjects\\myproject&gt; 创建应用的命令： python manage.py startapp &lt;应用名称&gt; 例如： 12(venv) PS D:\\PycharmProjects\\myproject&gt; python manage.py startapp department(venv) PS D:\\PycharmProjects\\myproject&gt; 添加新创建的应用到项目中打开 djangoProject/settings.py 文件, 在 INSTALLED_APPS 中添加应用名称, 如下所示: 12345678910INSTALLED_APPS = [ &#x27;django.contrib.admin&#x27;, &#x27;django.contrib.auth&#x27;, &#x27;django.contrib.contenttypes&#x27;, &#x27;django.contrib.sessions&#x27;, &#x27;django.contrib.messages&#x27;, &#x27;django.contrib.staticfiles&#x27;, &#x27;department&#x27;, # 通过 应用名 安装应用, 适用于大多数情况 ] 定义模型类数据库的每个表定义一个模型类, id 字段会自动生成, 其他字段根据数据表的进行定义, 类似以下代码: 12345678910111213141516171819202122232425262728293031from django.db import modelsclass Department(models.Model): &quot;&quot;&quot; 组织架构:用于保存有关联业务的其他公司 或 单位内部的部门信息 &quot;&quot;&quot; # 组织架构选项 type_choices = ((&#x27;firm&#x27;, &#x27;公司&#x27;), (&#x27;department&#x27;, &#x27;部门&#x27;)) # max_length: 最大长度; verbose_name: 字段备注名 title = models.CharField(max_length=60, verbose_name=&quot;名称&quot;) type = models.CharField(max_length=20, choices=type_choices, default=&#x27;department&#x27;, verbose_name=&#x27;类型&#x27;) # null=True: 空值时存为null; blank=True: 允许为空; description = models.CharField(max_length=200, null=True, blank=True, verbose_name=&#x27;描述&#x27;) # ForeignKey: 关联关系; on_delete=models.CASCADE: 级联操作,外键表随主键表更新 parent = models.ForeignKey(&#x27;self&#x27;, null=True, blank=True, verbose_name=&#x27;上级部门&#x27;, on_delete=models.CASCADE) class Meta: verbose_name = &#x27;组织构架&#x27; # 对象的可读名称, 单数 verbose_name_plural = verbose_name # 对象的可读名称, 复数 def __str__(self): &quot;&quot;&quot; 返回对象的描述信息 &quot;&quot;&quot; return self.title 定义表单类表单表用于添加或编辑数据, 在应用中添加名为 forms.py 的表单类文件, 在已经定义好模型类的基础上, 最简单的表单类定义类似以下代码: 12345678from django import formsfrom .models import Department # 导入模型类class DepartmentEditForm(forms.ModelForm): class Meta: model = Department # 表单来自于指定的模型类 Department fields = &#x27;__all__&#x27; # 表单类包含指定模型类的中的所有字段 添加被视图调用的模板文件模板文件夹 templates 中放置用于显示的网页文件, 不包含样式的最简单版本请参考最后一次上课的例子 添加视图函数（或视图类）打开相应的应用文件夹中的 views.py 文件, 添加用于查、改、增、删除的函数, 具体内容可参考:https://hujiyi.github.io/2022/07/04/create-an-app-in-django-004/ 定义路由定义应用的子路由在应用文件夹中添加名为 urls.py的路由文件, 类似以下内容: 1234567891011from django.urls import pathfrom . import viewsurlpatterns = [ path(&#x27;&#x27;, views.index, name=&#x27;index&#x27;), path(&#x27;create/&#x27;, views.create, name=&#x27;create&#x27;), path(&#x27;&lt;int:id&gt;/&#x27;, views.detail, name=&#x27;detail&#x27;), path(&#x27;update/&lt;int:id&gt;/&#x27;, views.update, name=&#x27;update&#x27;), path(&#x27;delete/&lt;int:did&gt;/&#x27;, views.delete, name=&#x27;delete&#x27;)] 添加子路由到项目路由中打开 djangoProject/urls.py 文件, 编辑内容类似以下代码: 12345678from django.contrib import adminfrom django.urls import path, includeurlpatterns = [ path(&#x27;admin/&#x27;, admin.site.urls), path(&#x27;&#x27;, include(&#x27;department.urls&#x27;)), # 包含新增应用的子路由] 参考资料: Django v4.0 中文文档 Django入门与实践教程 Bootstrap5 中文手册 &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"django","slug":"django","permalink":"https://hujiyi.github.io/categories/django/"}],"tags":[{"name":"django","slug":"django","permalink":"https://hujiyi.github.io/tags/django/"},{"name":"python","slug":"python","permalink":"https://hujiyi.github.io/tags/python/"}]},{"title":"Django 框架开发实战 006 - 设备管理应用","slug":"create-an-app-in-django-006","date":"2022-08-05T14:12:05.000Z","updated":"2022-10-11T01:40:12.919Z","comments":true,"path":"2022/08/05/create-an-app-in-django-006/","permalink":"https://hujiyi.github.io/2022/08/05/create-an-app-in-django-006/","excerpt":"","text":"开发环境： Microsoft Windows 10 Enterprise LTSC [Version 10.0.19044.1586], locale zh-CN Python 3.8.10 PyCharm 2021.2 (Professional Edition) Visual Studio Code, 64-bit edition (version 1.67.2) 添加新应用 激活虚拟环境 在项目文件夹中 manage.py 文件所在的位置打开 PowerShell窗口 或其他命令行终端, 使用命令激活虚拟环境 1.\\venv\\Scripts\\activate 输入命令, 创建名为 equipment 的应用: 1python .\\manage.py startapp equipment 修改项目配置文件打开项目的 settings.py 文件, 添加当前应用到 INSTALLED_APPS 列表中 12345678910111213INSTALLED_APPS = [ &#x27;django.contrib.admin&#x27;, &#x27;django.contrib.auth&#x27;, &#x27;django.contrib.contenttypes&#x27;, &#x27;django.contrib.sessions&#x27;, &#x27;django.contrib.messages&#x27;, &#x27;django.contrib.staticfiles&#x27;, &#x27;department&#x27;, # 安装自己添加的新应用 &#x27;users&#x27;, # 安装新添加的应用 &#x27;equipment&#x27;, # 安装新添加的应用] 定义模型类打开 equipment/models.py文件, 编辑其内容如下： 12345678910111213141516171819from django.db import modelsclass Equipment(models.Model): serial_number = models.CharField(max_length=30, default=&quot;&quot;, verbose_name=&quot;设备编号&quot;) name = models.CharField(max_length=30, verbose_name=&quot;设备名称&quot;, help_text=&quot;设备名称&quot;) equipment_model = models.CharField(max_length=50, default=&quot;&quot;, verbose_name=&quot;设备型号&quot;) desc = models.TextField(blank=True, null=True, verbose_name=&quot;备注&quot;) purchase_date = models.DateField(blank=True, null=True, verbose_name=&quot;购买日期&quot;) owner = models.CharField(max_length=20, blank=True, null=True, verbose_name=&quot;使用人&quot;) class Meta: verbose_name = &quot;设备管理&quot; verbose_name_plural = verbose_name def __str__(self): return self.serial_number 迁移模型12345678910(venv) PS D:\\PycharmProjects\\djangoProject&gt; python manage.py makemigrationsMigrations for &#x27;equipment&#x27;: equipment\\migrations\\0001_initial.py - Create model EquipmentType - Create model Equipment(venv) PS D:\\PycharmProjects\\djangoProject&gt; python manage.py migrateOperations to perform: Apply all migrations: admin, auth, contenttypes, department, equipment, sessions, usersRunning migrations: Applying equipment.0001_initial... OK 创建用于添加修改数据的表单类 在 equipment 文件夹添加名为 forms.py 的文件 打开 equipment/forms.py 文件, 编辑其内容如下： 123456789101112131415161718192021222324from django import formsfrom .models import Equipmentclass EquipmentCreateForm(forms.ModelForm): class Meta: model = Equipment # 指定表单来自的模型 fields = &#x27;__all__&#x27; # 包含模型类的中所有字段 # 定义错误信息 error_messages = &#123; &quot;serial_number&quot;: &#123;&quot;required&quot;: &quot;设备编号不能为空&quot;&#125;, &quot;equipment_model&quot;: &#123;&quot;required&quot;: &quot;请输入设备型号&quot;&#125;, &#125; # 设置各个表单控件显示的外观 和 样式 widgets = &#123; &#x27;serial_number&#x27;: forms.TextInput(attrs=&#123;&#x27;class&#x27;: &#x27;form-control&#x27;&#125;), &#x27;name&#x27;: forms.TextInput(attrs=&#123;&#x27;class&#x27;: &#x27;form-control&#x27;&#125;), &#x27;equipment_model&#x27;: forms.TextInput(attrs=&#123;&#x27;class&#x27;: &#x27;form-control&#x27;&#125;), &#x27;desc&#x27;: forms.Textarea(attrs=&#123;&#x27;class&#x27;: &#x27;form-control&#x27;, &#x27;rows&#x27;: 3&#125;), &#x27;owner&#x27;: forms.TextInput(attrs=&#123;&#x27;class&#x27;: &#x27;form-control&#x27;&#125;), &#x27;purchase_date&#x27;: forms.TextInput(attrs=&#123;&#x27;class&#x27;: &#x27;form-control&#x27;&#125;), &#125; 添加模板文件 在项目的 templates 文件夹添加名为 equipment 的新文件夹 在 templates/equipment 文件夹添加以下几个HTML文件待用：index.html, edit.html, delete.html, detail.html 添加视图类打开 equipment/views.py 文件, 编辑其内容如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104from django.shortcuts import render, get_object_or_404from django.http import HttpResponseRedirectfrom django.views.generic.base import Viewfrom django.contrib.auth.mixins import LoginRequiredMixinfrom .forms import EquipmentCreateFormfrom .models import Equipmentclass EquipmentListView(View): def get(self, request): equipments = Equipment.objects.all() return render(request, &#x27;equipment/index.html&#x27;, locals())class EquipmentCreateView(LoginRequiredMixin, View): login_url = &#x27;/login/&#x27; # 未登录用户自动跳转的目标url def get(self, request): form = EquipmentCreateForm() return render(request, &#x27;equipment/edit.html&#x27;, locals()) def post(self, request): form = EquipmentCreateForm(request.POST) if form.is_valid(): cd = form.cleaned_data Equipment.objects.create( serial_number=cd[&#x27;serial_number&#x27;], name=cd[&#x27;name&#x27;], equipment_model=cd[&#x27;equipment_model&#x27;], desc=cd[&#x27;desc&#x27;], owner=cd[&#x27;owner&#x27;], purchase_date=cd[&#x27;purchase_date&#x27;], ) return HttpResponseRedirect(&#x27;/equipment/&#x27;) else: error_msg = &#x27;新增设备出现异常&#x27; return HttpResponseRedirect(&#x27;/equipment/&#x27;)class EquipmentUpdateView(LoginRequiredMixin, View): login_url = &#x27;/login/&#x27; # 未登录用户自动跳转的目标url def get(self, request, *args, **kwargs): id = self.kwargs[&#x27;id&#x27;] # 接收名为 id 的参数（与urls.py一致） data = get_object_or_404(Equipment, pk=id) form = EquipmentCreateForm(initial=&#123; &#x27;serial_number&#x27;: data.serial_number, &#x27;name&#x27;: data.name, &#x27;equipment_model&#x27;: data.equipment_model, &#x27;desc&#x27;: data.desc, &#x27;owner&#x27;: data.owner, &#x27;purchase_date&#x27;: data.purchase_date, &#125;) return render(request, &#x27;equipment/edit.html&#x27;, locals()) def post(self, request, *args, **kwargs): id = self.kwargs[&#x27;id&#x27;] # 接收名为 id 的参数（与urls.py一致） data = get_object_or_404(Equipment, pk=id) form = EquipmentCreateForm(request.POST) if form.is_valid(): cd = form.cleaned_data data.serial_number = cd[&#x27;serial_number&#x27;] data.name = cd[&#x27;name&#x27;] data.equipment_model = cd[&#x27;equipment_model&#x27;] data.desc = cd[&#x27;desc&#x27;] data.owner = cd[&#x27;owner&#x27;] data.purchase_date = cd[&#x27;purchase_date&#x27;] data.save() return HttpResponseRedirect(&#x27;/equipment/&#x27;) else: form = EquipmentCreateForm(initial=&#123; &#x27;serial_number&#x27;: data.serial_number, &#x27;name&#x27;: data.name, &#x27;equipment_model&#x27;: data.equipment_model, &#x27;desc&#x27;: data.desc, &#x27;owner&#x27;: data.owner, &#x27;purchase_date&#x27;: data.purchase_date, &#125;) return render(request, &#x27;equipment/edit.html&#x27;, locals())class EquipmentDeleteView(LoginRequiredMixin, View): login_url = &#x27;/login/&#x27; # 未登录用户自动跳转的目标url def get(self, request, *args, **kwargs): id = self.kwargs[&#x27;id&#x27;] # 接收名为 id 的参数（与urls.py一致） equipment = get_object_or_404(Equipment, pk=id) return render(request, &#x27;equipment/delete.html&#x27;, locals()) def post(self, request, *args, **kwargs): id = self.kwargs[&#x27;id&#x27;] # 接收名为 id 的参数（与urls.py一致） equipment = get_object_or_404(Equipment, pk=id) equipment.delete() return HttpResponseRedirect(&#x27;/equipment/&#x27;)class EquipmentDetailView(View): def get(self, request, *args, **kwargs): id = self.kwargs[&#x27;id&#x27;] # 接收名为 id 的参数（与urls.py一致） equipment = get_object_or_404(Equipment, pk=id) return render(request, &#x27;equipment/detail.html&#x27;, locals()) 包含分页功能的设备列表视图类如果需要使用分页功能，可以 EquipmentListView 替换为以下代码: 123456789101112131415161718192021222324class EquipmentListView(View): def get(self, request, *args, **kwargs): params = self.request.GET.dict() try: page = params[&#x27;page&#x27;] except: page = 1 try: limit = params[&#x27;limit&#x27;] except: limit = 10 equipment_list = Equipment.objects.all() paginator = Paginator(equipment_list, limit) # 对数据进行分页 try: current_page = paginator.page(page) # 获取 指定页的数据 equipments = current_page.object_list # 将当前页数据转为列表 except PageNotAnInteger: current_page = paginator.page(1) # 页码不是数字时，返回第一页 equipments = current_page.object_list except EmptyPage: current_page = paginator.page(paginator.num_pages) equipments = current_page.object_list return render(request, &#x27;equipment/index.html&#x27;, locals()) 路由配置添加应用内的子路由 在 equipment 文件夹添加名为 urls.py 的文件 打开 equipment/urls.py 文件, 编辑其内容如下： 1234567891011121314151617from django.urls import pathfrom . import viewsurlpatterns = [ # 第一个参数是路径， 第二个参数是匹配的视图函数，第三个参数(可选) 命名路由 # 实际路径等于当前 path 和项目urls 中对应 path的拼接 # 完整路径：department/ # 项目中所有 路由项的 path 中的name 值 不能相同 path(&#x27;&#x27;, views.EquipmentListView.as_view(), name=&#x27;equip_index&#x27;), # 完整路径为：department/create/ path(&#x27;create/&#x27;, views.EquipmentCreateView.as_view(), name=&#x27;equip_create&#x27;), path(&#x27;&lt;int:id&gt;/&#x27;, views.EquipmentDetailView.as_view(), name=&#x27;equip_detail&#x27;), path(&#x27;update/&lt;int:id&gt;/&#x27;, views.EquipmentUpdateView.as_view(), name=&#x27;equip_update&#x27;), path(&#x27;delete/&lt;int:id&gt;/&#x27;, views.EquipmentDeleteView.as_view(), name=&#x27;equip_delete&#x27;),] 添加应用子路由到项目路由中打开项目的路由文件 djangoProject/urls.py, 编辑其内容如下： 1234567891011121314151617from django.contrib import adminfrom django.urls import path, includeimport department.viewsfrom users.views import LoginView, LogoutView, SignupView # 导入视图urlpatterns = [ path(&#x27;admin/&#x27;, admin.site.urls), path(&#x27;department/&#x27;, include(&#x27;department.urls&#x27;)), path(&#x27;equipment/&#x27;, include(&#x27;equipment.urls&#x27;)), # 添加设备管理的子路由 path(&#x27;&#x27;, department.views.home), # 用户注册、登录相关的路由 path(&#x27;login/&#x27;, LoginView.as_view(), name=&#x27;login&#x27;), path(&#x27;logout/&#x27;, LogoutView.as_view(), name=&#x27;logout&#x27;), path(&#x27;signup/&#x27;, SignupView.as_view(), name=&#x27;signup&#x27;),] 修改网站的导航栏打开 templates/nav.html 文件，添加到 equipment 应用的导航菜单, 编辑文件内容如下: 123456789101112131415161718192021222324252627282930313233343536&lt;!-- 导航菜单栏 --&gt;&lt;nav class=&quot;navbar navbar-expand-sm bg-light mb-4&quot;&gt; &lt;div class=&quot;container d-flex w-100&quot;&gt; &lt;h2&gt;我的网站&lt;/h2&gt; &lt;div class=&quot;flex-grow-1&quot;&gt;&lt;/div&gt; &lt;ul class=&quot;navbar-nav&quot;&gt; &lt;li class=&quot;nav-item&quot;&gt; &lt;a class=&quot;nav-link&quot; href=&quot;/&quot;&gt;首页&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;nav-item&quot;&gt; &lt;a class=&quot;nav-link&quot; href=&quot;/department/&quot;&gt;组织构架管理&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;nav-item&quot;&gt; &lt;a class=&quot;nav-link&quot; href=&quot;/equipment/&quot;&gt;设备管理&lt;/a&gt; &lt;/li&gt; &#123;% if request.user.is_authenticated %&#125; &lt;li class=&quot;nav-item&quot;&gt; &lt;div class=&quot;nav-link&quot; href=&quot;#&quot;&gt; 当前用户: &#123;&#123; request.user.username &#125;&#125; &lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;nav-item&quot;&gt; &lt;a class=&quot;nav-link&quot; href=&quot;/logout/&quot;&gt;注销 &lt;/a&gt; &lt;/li&gt; &#123;% else %&#125; &lt;li class=&quot;nav-item&quot;&gt; &lt;a class=&quot;nav-link&quot; href=&quot;/login/&quot;&gt;登录&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;nav-item&quot;&gt; &lt;a class=&quot;nav-link&quot; href=&quot;/signup/&quot;&gt;注册&lt;/a&gt; &lt;/li&gt; &#123;% endif %&#125; &lt;/ul&gt; &lt;/div&gt;&lt;/nav&gt; 修改模板文件编辑设备列表显示页打开 templates/equipment/index.html 文件，编辑其内容如下: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980&#123;# 继承指定的模板文件 layout.html #&#125;&#123;% extends &quot;layout.html&quot; %&#125;&#123;% block title %&#125; 设备管理 &#123;% endblock %&#125;&#123;# 内容为替换到 母版页 中对应的位置 #&#125;&#123;% block content %&#125; &#123;% include &quot;nav.html&quot; %&#125; &#123;# container:让内部元素左右留出一定的空间，居中， #&#125; &#123;# flex-grow-1：让元素占用弹性布局内所有的剩余空间 #&#125; &lt;div class=&quot;container flex-grow-1&quot;&gt; &#123;# my-3:m 表示 margin 外边距, y 表示 y轴、垂直方向的两个边； 数据3表示间距的大小 #&#125; &lt;div class=&quot;d-flex my-3&quot;&gt; &lt;h3 class=&quot;flex-grow-1&quot;&gt;设备信息&lt;/h3&gt; &lt;a class=&quot;btn btn-outline-success&quot; href=&quot;&#123;% url &#x27;equip_create&#x27; %&#125;&quot;&gt;新增&lt;/a&gt; &lt;/div&gt; &lt;table class=&quot;table table-striped table-hover&quot;&gt; &lt;tr&gt; &lt;th&gt;设备编号&lt;/th&gt; &lt;th&gt;设备名称&lt;/th&gt; &lt;th&gt;设备型号&lt;/th&gt; &lt;th&gt;购买日期&lt;/th&gt; &lt;th&gt;使用人&lt;/th&gt; &lt;th&gt;操作&lt;/th&gt; &lt;/tr&gt; &#123;% for item in equipments %&#125; &lt;tr class=&quot;align-middle&quot;&gt; &lt;td&gt;&#123;&#123; item.serial_number &#125;&#125;&lt;/td&gt; &lt;td&gt; &lt;a class=&quot;text-decoration-none&quot; href=&quot;&#123;% url &#x27;equip_detail&#x27; item.id %&#125;&quot;&gt; &#123;&#123; item.name &#125;&#125; &lt;/a&gt; &lt;/td&gt; &lt;td&gt; &#123;&#123; item.equipment_model &#125;&#125; &lt;/td&gt; &lt;td&gt;&#123;&#123; item.purchase_date &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; item.owner &#125;&#125;&lt;/td&gt; &lt;td style=&quot;width: 140px;&quot;&gt; &lt;a class=&quot;btn btn-outline-primary&quot; href=&quot;&#123;% url &#x27;equip_update&#x27; item.id %&#125;&quot;&gt;修改&lt;/a&gt; &lt;a class=&quot;btn btn-outline-danger&quot; href=&quot;&#123;% url &#x27;equip_delete&#x27; item.id %&#125;&quot;&gt;删除&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125; &lt;/table&gt; &lt;ul class=&quot;pagination&quot;&gt; &#123;# current_page 为视图中使用的变量名 #&#125; &#123;% if current_page.has_previous %&#125; &lt;li class=&quot;page-item&quot;&gt; &lt;a class=&quot;page-link&quot; href=&quot;/equipment/?page=&#123;&#123; current_page.previous_page_number &#125;&#125;&quot;&gt;前一页&lt;/a&gt; &lt;/li&gt; &#123;% else %&#125; &lt;li class=&quot;page-item disabled&quot;&gt; &lt;a class=&quot;page-link&quot; href=&quot;#&quot;&gt;前一页&lt;/a&gt; &lt;/li&gt; &#123;% endif %&#125; &#123;% for item in paginator.page_range %&#125; &lt;li class=&quot;page-item&quot;&gt; &lt;a class=&quot;page-link&quot; href=&quot;/equipment/?page=&#123;&#123; item &#125;&#125;&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/a&gt;&lt;/li&gt; &#123;% endfor %&#125; &#123;% if current_page.has_next %&#125; &lt;li class=&quot;page-item&quot;&gt; &lt;a class=&quot;page-link&quot; href=&quot;/equipment/?page=&#123;&#123; current_page.next_page_number &#125;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt; &#123;% else %&#125; &lt;li class=&quot;page-item disabled&quot;&gt; &lt;a class=&quot;page-link&quot; href=&quot;#&quot;&gt;下一页&lt;/a&gt; &lt;/li&gt; &#123;% endif %&#125; &lt;/ul&gt; &lt;/div&gt; &#123;% include &quot;footer.html&quot; %&#125;&#123;% endblock %&#125; 编辑新建和修改设备页打开 templates/equipment/edit.html 文件，编辑其内容如下: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667&#123;# 继承指定的模板文件 layout.html #&#125;&#123;% extends &quot;layout.html&quot; %&#125;&#123;% block title %&#125; 设备管理 &#123;% endblock %&#125;&#123;# 内容为替换到 母版页 中对应的位置 #&#125;&#123;% block content %&#125; &#123;% include &quot;nav.html&quot; %&#125; &#123;# container:让内部元素左右留出一定的空间，居中， #&#125; &#123;# flex-grow-1：让元素占用弹性布局内所有的剩余空间 #&#125; &lt;div class=&quot;container flex-grow-1 d-flex flex-column&quot;&gt; &#123;# my-3:m 表示 margin 外边距, y 表示 y轴、垂直方向的两个边； 数据3表示间距的大小 #&#125; &lt;div class=&quot;d-flex my-3&quot;&gt; &lt;h3 class=&quot;flex-grow-1&quot;&gt; &#123;% if form.name.value %&#125; 修改设备信息 &#123;% else %&#125; 添加新设备 &#123;% endif %&#125; &lt;/h3&gt; &lt;/div&gt; &lt;form method=&quot;post&quot;&gt; &#123;% csrf_token %&#125; &lt;div class=&quot;row mb-3&quot;&gt; &lt;div class=&quot;col-lg-6&quot;&gt; &lt;label class=&quot;form-label&quot;&gt;设备编号&lt;/label&gt; &#123;&#123; form.serial_number &#125;&#125; &lt;/div&gt; &lt;div class=&quot;col-lg-6&quot;&gt; &lt;label class=&quot;form-label&quot;&gt;设备名称&lt;/label&gt; &#123;&#123; form.name &#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;row mb-3&quot;&gt; &lt;div class=&quot;col-12&quot;&gt; &lt;label class=&quot;form-label&quot;&gt;设备型号&lt;/label&gt; &#123;&#123; form.equipment_model &#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;row mb-3&quot;&gt; &lt;div class=&quot;col-lg-6&quot;&gt; &lt;label class=&quot;form-label&quot;&gt;购买日期&lt;/label&gt; &#123;&#123; form.purchase_date &#125;&#125; &lt;/div&gt; &lt;div class=&quot;col-lg-6&quot;&gt; &lt;label class=&quot;form-label&quot;&gt;使用人&lt;/label&gt; &#123;&#123; form.owner &#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;row mb-3&quot;&gt; &lt;div class=&quot;col-12&quot;&gt; &lt;label class=&quot;form-label&quot;&gt;备注&lt;/label&gt; &#123;&#123; form.desc &#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;mb-3&quot;&gt; &lt;a class=&quot;btn btn-outline-primary&quot; href=&quot;/equipment/&quot;&gt;返回&lt;/a&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-success&quot;&gt;提交&lt;/button&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &#123;% include &quot;footer.html&quot; %&#125;&#123;% endblock %&#125; 编辑确认设备删除页打开 templates/equipment/delete.html 文件，编辑其内容如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263&#123;# 继承指定的模板文件 layout.html #&#125;&#123;% extends &quot;layout.html&quot; %&#125;&#123;% block title %&#125; 设备管理 &#123;% endblock %&#125;&#123;# 内容为替换到 母版页 中对应的位置 #&#125;&#123;% block content %&#125; &#123;% include &quot;nav.html&quot; %&#125; &#123;# container:让内部元素左右留出一定的空间，居中， #&#125; &#123;# flex-grow-1：让元素占用弹性布局内所有的剩余空间 #&#125; &lt;div class=&quot;container flex-grow-1 d-flex flex-column&quot;&gt; &#123;# my-3:m 表示 margin 外边距, y 表示 y轴、垂直方向的两个边； 数据3表示间距的大小 #&#125; &lt;div class=&quot;d-flex my-3&quot;&gt; &lt;h3 class=&quot;flex-grow-1&quot;&gt; 删除当前设备 &lt;/h3&gt; &lt;/div&gt; &lt;form method=&quot;post&quot;&gt; &#123;% csrf_token %&#125; &lt;div class=&quot;row mb-3&quot;&gt; &lt;div class=&quot;col-lg-6&quot;&gt; &lt;label class=&quot;form-label&quot;&gt;设备编号:&lt;/label&gt; &#123;&#123; equipment.serial_number &#125;&#125; &lt;/div&gt; &lt;div class=&quot;col-lg-6&quot;&gt; &lt;label class=&quot;form-label&quot;&gt;设备名称:&lt;/label&gt; &#123;&#123; equipment.name &#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;row mb-3&quot;&gt; &lt;div class=&quot;col-12&quot;&gt; &lt;label class=&quot;form-label&quot;&gt;设备型号:&lt;/label&gt; &#123;&#123; equipment.equipment_model &#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;row mb-3&quot;&gt; &lt;div class=&quot;col-lg-6&quot;&gt; &lt;label class=&quot;form-label&quot;&gt;购买日期:&lt;/label&gt; &#123;&#123; equipment.purchase_date &#125;&#125; &lt;/div&gt; &lt;div class=&quot;col-lg-6&quot;&gt; &lt;label class=&quot;form-label&quot;&gt;使用人:&lt;/label&gt; &#123;&#123; equipment.owner &#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;row mb-3&quot;&gt; &lt;div class=&quot;col-12&quot;&gt; &lt;label class=&quot;form-label&quot;&gt;备注:&lt;/label&gt; &#123;&#123; equipment.desc &#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;mb-3&quot;&gt; &lt;a class=&quot;btn btn-outline-primary&quot; href=&quot;/equipment/&quot;&gt;返回&lt;/a&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-danger&quot;&gt;确认删除设备&lt;/button&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &#123;% include &quot;footer.html&quot; %&#125;&#123;% endblock %&#125; 编辑设备详细页打开 templates/equipment/detail.html 文件，编辑其内容如下: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&#123;# 继承指定的模板文件 layout.html #&#125;&#123;% extends &quot;layout.html&quot; %&#125;&#123;% block title %&#125; 设备管理 &#123;% endblock %&#125;&#123;# 内容为替换到 母版页 中对应的位置 #&#125;&#123;% block content %&#125; &#123;% include &quot;nav.html&quot; %&#125; &#123;# container:让内部元素左右留出一定的空间，居中， #&#125; &#123;# flex-grow-1：让元素占用弹性布局内所有的剩余空间 #&#125; &lt;div class=&quot;container flex-grow-1 d-flex flex-column&quot;&gt; &#123;# my-3:m 表示 margin 外边距, y 表示 y轴、垂直方向的两个边； 数据3表示间距的大小 #&#125; &lt;div class=&quot;d-flex my-3&quot;&gt; &lt;h3 class=&quot;flex-grow-1&quot;&gt; 设备详细信息 &lt;/h3&gt; &lt;/div&gt; &lt;div&gt; &lt;div class=&quot;row mb-3&quot;&gt; &lt;div class=&quot;col-lg-6&quot;&gt; &lt;label class=&quot;form-label&quot;&gt;设备编号&lt;/label&gt; &#123;&#123; equipment.serial_number &#125;&#125; &lt;/div&gt; &lt;div class=&quot;col-lg-6&quot;&gt; &lt;label class=&quot;form-label&quot;&gt;设备名称&lt;/label&gt; &#123;&#123; equipment.name &#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;row mb-3&quot;&gt; &lt;div class=&quot;col-12&quot;&gt; &lt;label class=&quot;form-label&quot;&gt;设备型号&lt;/label&gt; &#123;&#123; equipment.equipment_model &#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;row mb-3&quot;&gt; &lt;div class=&quot;col-lg-6&quot;&gt; &lt;label class=&quot;form-label&quot;&gt;购买日期&lt;/label&gt; &#123;&#123; equipment.purchase_date &#125;&#125; &lt;/div&gt; &lt;div class=&quot;col-lg-6&quot;&gt; &lt;label class=&quot;form-label&quot;&gt;使用人&lt;/label&gt; &#123;&#123; equipment.owner &#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;row mb-3&quot;&gt; &lt;div class=&quot;col-12&quot;&gt; &lt;label class=&quot;form-label&quot;&gt;备注&lt;/label&gt; &#123;&#123; equipment.desc &#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;mb-3&quot;&gt; &lt;a class=&quot;btn btn-outline-primary&quot; href=&quot;/equipment/&quot;&gt;返回&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &#123;% include &quot;footer.html&quot; %&#125;&#123;% endblock %&#125; 参考资料: Django v4.0 中文文档 Django入门与实践教程 Bootstrap5 中文手册 &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"django","slug":"django","permalink":"https://hujiyi.github.io/categories/django/"}],"tags":[{"name":"django","slug":"django","permalink":"https://hujiyi.github.io/tags/django/"},{"name":"python","slug":"python","permalink":"https://hujiyi.github.io/tags/python/"}]},{"title":"Django 框架开发实战 005 - 用户登录验证","slug":"create-an-app-in-django-005","date":"2022-07-05T06:06:16.000Z","updated":"2022-10-11T01:40:12.919Z","comments":true,"path":"2022/07/05/create-an-app-in-django-005/","permalink":"https://hujiyi.github.io/2022/07/05/create-an-app-in-django-005/","excerpt":"","text":"开发环境： Microsoft Windows 10 Enterprise LTSC [Version 10.0.19044.1586], locale zh-CN Python 3.8.10 PyCharm 2021.2 (Professional Edition) Visual Studio Code, 64-bit edition (version 1.67.2) 修改网站的导航栏打开 templates/nav.html 文件, 编辑其内容如下: 1234567891011121314151617181920212223242526272829303132&lt;!-- 导航菜单栏 --&gt;&lt;nav class=&quot;navbar navbar-expand-sm bg-light mb-4&quot;&gt; &lt;div class=&quot;container d-flex w-100&quot;&gt; &lt;h2&gt;我的网站&lt;/h2&gt; &lt;div class=&quot;flex-grow-1&quot;&gt;&lt;/div&gt; &lt;ul class=&quot;navbar-nav&quot;&gt; &lt;li class=&quot;nav-item&quot;&gt; &lt;a class=&quot;nav-link&quot; href=&quot;/&quot;&gt;首页&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;nav-item&quot;&gt; &lt;a class=&quot;nav-link&quot; href=&quot;/department/&quot;&gt;组织构架管理&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;nav-item&quot;&gt; &lt;div class=&quot;nav-link&quot; href=&quot;#&quot;&gt; &#123;% if request.user.is_authenticated %&#125; 当前用户: &#123;&#123; request.user.username &#125;&#125; &#123;% endif %&#125; &lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;nav-item&quot;&gt; &lt;a class=&quot;nav-link&quot; href=&quot;/logout/&quot;&gt;注销 &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;nav-item&quot;&gt; &lt;a class=&quot;nav-link&quot; href=&quot;/login/&quot;&gt;登录&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;nav-item&quot;&gt; &lt;a class=&quot;nav-link&quot; href=&quot;/signup/&quot;&gt;注册&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/nav&gt; 扩展用户模型Djano 已经内置有用户管理的模型, 但是其原有字段可能不适合于当前的应用, 所以对用户模型进行扩展。 添加应用 users打开 PowerShell窗口, 激活虚拟环境, 创建名为 uers 的应用 12venv\\Scripts\\activatepython manage.py startapp users 打开 users/models.py 文件, 添加 以下代码: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647from django.db import modelsfrom django.contrib.auth.models import AbstractUserfrom department.models import Departmentclass UserProfile(AbstractUser): &quot;&quot;&quot; 用户: makemigration提示错误：sers.UserProfile.user_permissions: (fields.E304)， 需要在settings中指定自定义认证模型：AUTH_USER_MODEL = &#x27;users.UserProfile&#x27; &quot;&quot;&quot; name = models.CharField( max_length=20, default=&#x27;&#x27;, verbose_name=&#x27;姓名&#x27;) gender = models.CharField( max_length=10, choices=((&#x27;male&#x27;, &#x27;男&#x27;), (&#x27;female&#x27;, &#x27;女&#x27;)), default=&#x27;male&#x27;, verbose_name=&#x27;性别&#x27;) mobile = models.CharField( max_length=11, default=&#x27;&#x27;, verbose_name=&#x27;电话&#x27;) department = models.ForeignKey( Department, blank=True, null=True, verbose_name=&#x27;所属部门&#x27;, on_delete=models.CASCADE) position = models.CharField( max_length=50, blank=True, null=True, verbose_name=&#x27;职位&#x27;) enrollment_date = models.DateField( blank=True, null=True, verbose_name=&#x27;入职日期&#x27;) class Meta: verbose_name = &#x27;用户信息&#x27; verbose_name_plural = verbose_name ordering = [&#x27;id&#x27;] def __str__(self): return self.name AbstractUser: Django 内置的一个完整用户模型，包含字段，作为一个抽象类，以便您可以继承它并添加您自己的配置文件字段和方法。 AbstractBaseUser: 仅包含身份验证功能，但不包含实际字段：当您继承子类时，您必须提供它们 修改项目settings.py打开 myproject/settings.py, 添加自定义的用户模型 12345678910111213INSTALLED_APPS = [ &#x27;django.contrib.admin&#x27;, &#x27;django.contrib.auth&#x27;, &#x27;django.contrib.contenttypes&#x27;, &#x27;django.contrib.sessions&#x27;, &#x27;django.contrib.messages&#x27;, &#x27;django.contrib.staticfiles&#x27;, &#x27;department&#x27;, &#x27;users&#x27;, # 安装新添加的应用]AUTH_USER_MODEL = &#x27;users.UserProfile&#x27; # 指定自定义认证模型 如下图所示 迁移模型在 manage.py 所在文件夹打开 PowerShell窗口, 激活虚拟环境, 执行以下两个命令: 123python manage.py makemigrationspython manage.py migrate 迁移的时候有可能会出现类似 ValueError: Related model &#39;departments.structure&#39; cannot be resolved 的错误。 解决办法：1. 删除 各个应用 的 migrations 文件夹除 __init__.py以外的文件, 重新执行以上两个迁移的命令; 如果还不行，则删除数据库, 然后重建同名数据库, 重新执行以上两个迁移的命令; 重建数据后, 要重新创建超级用户(如果有需要) 及添加数据 删除 迁移相应的文件 删除数据库文件 命令执行过程如下: 12345678910111213141516171819202122232425(venv) PS D:\\PycharmProjects\\djangoProject&gt; python manage.py makemigrationsNo changes detected(venv) PS D:\\PycharmProjects\\djangoProject&gt; python manage.py migrateOperations to perform: Apply all migrations: admin, auth, contenttypes, department, sessionsRunning migrations: Applying contenttypes.0001_initial... OK Applying admin.0001_initial... OK Applying admin.0002_logentry_remove_auto_add... OK Applying admin.0003_logentry_add_action_flag_choices... OK Applying contenttypes.0002_remove_content_type_name... OK Applying auth.0001_initial... OK Applying auth.0002_alter_permission_name_max_length... OK Applying auth.0003_alter_user_email_max_length... OK Applying auth.0004_alter_user_username_opts... OK Applying auth.0005_alter_user_last_login_null... OK Applying auth.0006_require_contenttypes_0002... OK Applying auth.0007_alter_validators_add_error_messages... OK Applying auth.0008_alter_user_username_max_length... OK Applying auth.0009_alter_user_last_name_max_length... OK Applying auth.0010_alter_group_name_max_length... OK Applying auth.0011_update_proxy_permissions... OK Applying auth.0012_alter_user_first_name_max_length... OK Applying department.0001_initial... OK Applying sessions.0001_initial... OK 基于类的视图添加用户相关的视图文件 在 templates 文件夹中新建名为 users(与新添加的应用同名) 的文件夹 在 templates/users 文件夹新建用于 用户注册 和 用户登录 的网页文件：signup.html 和 login.html 待用 添加用户 注册、登录 的表单类在 users 文件夹新建名为 forms.py 的 Python file, 编辑其内容如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465from django import formsfrom django.core import validatorsfrom django.contrib.auth import get_user_modelfrom .models import UserProfile# get_user_model()实际获取的是settings.AUTH_USER_MODEL指定的User modelUser = get_user_model()class LoginForm(forms.Form): username = forms.CharField( required=True, widget=forms.TextInput(attrs=&#123;&#x27;class&#x27;: &#x27;form-control&#x27;&#125;), error_messages=&#123;&quot;required&quot;: &quot;请填写用户名&quot;&#125;) password = forms.CharField( required=True, widget=forms.PasswordInput(attrs=&#123;&#x27;class&#x27;: &#x27;form-control&#x27;&#125;), error_messages=&#123;&quot;required&quot;: u&quot;请填写密码&quot;&#125;)class UserUpdateForm(forms.ModelForm): class Meta: model = User fields = [&#x27;name&#x27;, &#x27;gender&#x27;, &#x27;username&#x27;, &#x27;mobile&#x27;, &#x27;email&#x27;, &#x27;enrollment_date&#x27;, &#x27;department&#x27;, &#x27;position&#x27;, &#x27;is_active&#x27;]class UserCreateForm(forms.ModelForm): &quot;&quot;&quot; 创建用户表单，进行字段验证 &quot;&quot;&quot; username = forms.CharField( required=True, min_length=3, widget=forms.TextInput(attrs=&#123;&#x27;class&#x27;: &#x27;form-control&#x27;&#125;), error_messages=&#123;&quot;required&quot;: &quot;请填写用户名&quot;, &quot;min_length&quot;: &quot;密码长度最少6位数&quot;, &#125;) email = forms.CharField( required=True, validators=[validators.EmailValidator()], widget=forms.TextInput(attrs=&#123;&#x27;class&#x27;: &#x27;form-control&#x27;&#125;), error_messages=&#123;&quot;required&quot;: &quot;请填写邮箱&quot;, &#125;) password = forms.CharField( required=True, min_length=6, max_length=20, widget=forms.PasswordInput(attrs=&#123;&#x27;class&#x27;: &#x27;form-control&#x27;&#125;), error_messages=&#123;&quot;required&quot;: u&quot;密码不能为空&quot;, &quot;min_length&quot;: &quot;密码长度最少6位数&quot;, &#125;) # confirm_password = forms.CharField( # required=True, # min_length=6, # max_length=20, # widget=forms.PasswordInput(attrs=&#123;&#x27;class&#x27;: &#x27;form-control&#x27;&#125;), # error_messages=&#123;&quot;required&quot;: u&quot;确认密码不能为空&quot;, # &quot;min_length&quot;: &quot;密码长度最少6位数&quot;, &#125;) class Meta: model = User fields = [&#x27;password&#x27;, &#x27;username&#x27;, ] 编辑视图打开 users/views.py 文件, 编辑其内容如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677from django.shortcuts import renderfrom django.http import HttpResponseRedirectfrom django.views.generic.base import Viewfrom django.contrib.auth import authenticate, login, logoutfrom .forms import LoginForm, UserCreateFormfrom .models import UserProfile# 基于类的视图class SignupView(View): &quot;&quot;&quot; 注册新用户 &quot;&quot;&quot; def get(self, request): # 处理 get 请求的函数 signup_form = UserCreateForm() return render(request, &#x27;users/signup.html&#x27;, locals()) def post(self, request): # 处理 post 请求的函数 signup_form = UserCreateForm(request.POST) if signup_form.is_valid(): cd = signup_form.cleaned_data # 创建用户 new_user = UserProfile.objects.create_user(cd[&#x27;username&#x27;], cd[&#x27;email&#x27;], cd[&#x27;password&#x27;]) # 设置 name 和 username 相同 new_user.name = new_user.username new_user.save() login(request, new_user) # 注册成功后直接登录该用户(可选) return HttpResponseRedirect(&#x27;/&#x27;) else: error_msg = &#x27;注册失败&#x27; return render(request, &#x27;users/signup.html&#x27;, locals())class LoginView(View): &quot;&quot;&quot; 用户登录 &quot;&quot;&quot; def get(self, request): # 处理 GET 请求的函数 login_form = LoginForm() return render(request, &#x27;users/login.html&#x27;, locals()) def post(self, request): # 处理 POST 请求的函数 # 用于登录成功后返回进入登录界面的前一页 redirect_to = request.GET.get(&#x27;next&#x27;, &#x27;/&#x27;) login_form = LoginForm(request.POST) if login_form.is_valid(): cd = login_form.cleaned_data _username = cd[&#x27;username&#x27;] _password = cd[&#x27;password&#x27;] # 验证用户登录 user = authenticate(username=_username, password=_password) if user is not None: if user.is_active: login(request, user) return HttpResponseRedirect(redirect_to) else: error_msg = &#x27;用户未激活&#x27; return render(request, &#x27;users/login.html&#x27;, locals()) else: error_msg = &quot;用户名或密码错误！&quot; return render(request, &#x27;users/login.html&#x27;, locals()) else: error_msg = &quot;用户名和密码不能够为空！&quot; return render(request, &#x27;users/login.html&#x27;, locals())class LogoutView(View): &quot;&quot;&quot; 退出登录 &quot;&quot;&quot; def get(self, request): logout(request) return HttpResponseRedirect(&#x27;/&#x27;) 添加路由用户 注册、登录、注销这几个操作不想添加有前缀的url, 所以直接将相关的路由添加到项目的 urls.py 文件中。打开 djangoProject/urls.py 文件, 编辑其内容如下: 123456789101112131415from django.contrib import adminfrom django.urls import path, includeimport department.viewsfrom users.views import LoginView, LogoutView, SignupView # 导入视图urlpatterns = [ path(&#x27;admin/&#x27;, admin.site.urls), path(&#x27;department/&#x27;, include(&#x27;department.urls&#x27;)), path(&#x27;&#x27;, department.views.home), # 用户注册、登录相关的路由 path(&#x27;login/&#x27;, LoginView.as_view(), name=&#x27;login&#x27;), path(&#x27;logout/&#x27;, LogoutView.as_view(), name=&#x27;logout&#x27;), path(&#x27;signup/&#x27;, SignupView.as_view(), name=&#x27;signup&#x27;),] 注册和登录的模板编辑用于用户注册和登录的网页文件 注册用户的模板打开 templates/users/signup.html 文件, 编辑其内容如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&#123;% extends &quot;layout.html&quot; %&#125;&#123;% block title %&#125;用户注册&#123;% endblock %&#125;&#123;% block content %&#125; &lt;div class=&quot;d-flex justify-content-center align-items-center vh-100 bg-secondary&quot;&gt; &lt;div class=&quot;card&quot;&gt; &lt;h3 class=&quot;text-center p-3&quot;&gt;注册新用户&lt;/h3&gt; &lt;form method=&quot;POST&quot; class=&quot;bg-white login_form&quot;&gt; &#123;% csrf_token %&#125; &lt;div class=&quot;text-danger text-center&quot;&gt; &#123;&#123; error_msg &#125;&#125;&lt;/div&gt; &lt;div class=&quot;row align-items-center g-3 m-3&quot;&gt; &lt;div class=&quot;col-3 d-flex justify-content-end&quot;&gt; &lt;label for=&quot;username&quot; class=&quot;col-form-label&quot;&gt;用户名&lt;/label&gt; &lt;/div&gt; &lt;div class=&quot;col-9&quot;&gt; &#123;&#123; signup_form.username &#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;row align-items-center g-3 m-3&quot;&gt; &lt;div class=&quot;col-3 d-flex justify-content-end&quot;&gt; &lt;label for=&quot;email&quot; class=&quot;col-form-label&quot;&gt;电子邮箱&lt;/label&gt; &lt;/div&gt; &lt;div class=&quot;col-9&quot;&gt; &#123;&#123; signup_form.email &#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;row align-items-center g-3 m-3&quot;&gt; &lt;div class=&quot;col-3 d-flex justify-content-end&quot;&gt; &lt;label for=&quot;password&quot; class=&quot;col-form-label&quot;&gt;密码&lt;/label&gt; &lt;/div&gt; &lt;div class=&quot;col-9&quot;&gt; &#123;&#123; signup_form.password &#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;row align-items-center g-3 m-3&quot;&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary block&quot;&gt;注册新用户&lt;/button&gt; &lt;/div&gt; &lt;div class=&quot;text-end g-3 m-3&quot;&gt; &lt;a class=&quot;text-decoration-none mx-3 text-success&quot; href=&quot;/&quot;&gt;返回首页&lt;/a&gt; &lt;a class=&quot;text-decoration-none&quot; href=&quot;/login/&quot;&gt;使用已有账号登录&lt;/a&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt;&#123;% endblock %&#125;&#123;% block style %&#125; &lt;style&gt; .login_form &#123; width: 480px; &#125; &lt;/style&gt;&#123;% endblock %&#125; 注册新用户的界面 用户登录的模板打开 templates/users/login.html, 编辑其内容如下: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&#123;% extends &quot;layout.html&quot; %&#125;&#123;% block title %&#125;用户登录&#123;% endblock %&#125;&#123;% block content %&#125; &lt;div class=&quot;d-flex justify-content-center align-items-center h-100 bg-secondary&quot;&gt; &lt;div class=&quot;card&quot;&gt; &lt;h3 class=&quot;text-center p-3&quot;&gt;用户登录&lt;/h3&gt; &lt;form method=&quot;POST&quot; class=&quot;bg-white login_form&quot;&gt; &#123;% csrf_token %&#125; &lt;div class=&quot;text-danger text-center&quot;&gt; &#123;&#123; error_msg &#125;&#125;&lt;/div&gt; &lt;div class=&quot;row align-items-center g-3 m-3&quot;&gt; &lt;div class=&quot;col-3 d-flex justify-content-end&quot;&gt; &lt;label for=&quot;username&quot; class=&quot;col-form-label&quot;&gt;用户名&lt;/label&gt; &lt;/div&gt; &lt;div class=&quot;col-9&quot;&gt; &#123;&#123; login_form.username &#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;row align-items-center g-3 m-3&quot;&gt; &lt;div class=&quot;col-3 d-flex justify-content-end&quot;&gt; &lt;label for=&quot;password&quot; class=&quot;col-form-label&quot;&gt;密码&lt;/label&gt; &lt;/div&gt; &lt;div class=&quot;col-9&quot;&gt; &#123;&#123; login_form.password &#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;row align-items-center g-3 m-3&quot;&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary block&quot;&gt;登录&lt;/button&gt; &lt;/div&gt; &lt;div class=&quot;text-end g-3 m-3&quot;&gt; &lt;a class=&quot;text-decoration-none mx-3 text-success&quot; href=&quot;/&quot;&gt;返回首页&lt;/a&gt; &lt;a class=&quot;text-decoration-none&quot; href=&quot;/signup/&quot;&gt;没有账号&lt;/a&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt;&#123;% endblock %&#125;&#123;% block style %&#125; &lt;style&gt; .login_form &#123; width: 480px; &#125; &lt;/style&gt;&#123;% endblock %&#125; 用户登录的界面 启用登陆验证Django 在做后台系统过程中，我们通常都会为 视图函数 添加 @login_required 装饰器，这个装饰器的主要作用就是在用户访问这个方法时，检查用户是否已经成功登陆，如果没有则重定向到登陆页面。 打开 department/views.py 文件, 编辑部分内容如下: 1234567891011121314151617181920# 省略原有的部分代码from django.contrib.auth.decorators import login_required # 导入登录验证@login_required(login_url=&#x27;/login/&#x27;)def create(request): &quot;&quot;&quot; 省略部分代码 &quot;&quot;&quot;@login_required(login_url=&#x27;/login/&#x27;)def update(request, dep_id): &quot;&quot;&quot; 省略部分代码 &quot;&quot;&quot;@login_required(login_url=&#x27;/login/&#x27;)def delete(request, dep_id): &quot;&quot;&quot; 省略部分代码 &quot;&quot;&quot; 在函数上方添加的 @ 开头的对象为装饰器，作用是给函数增加额外的功能 @login_required(login_url&#x3D;’&#x2F;login&#x2F;‘): 必须登录后才能访问的装饰器 login_url&#x3D;’&#x2F;login&#x2F;‘: 当未登录用户访问该函数时自动跳转到的登录url 参考资料: Django v4.0 中文文档 Django入门与实践教程 Bootstrap5 中文手册 &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"django","slug":"django","permalink":"https://hujiyi.github.io/categories/django/"}],"tags":[{"name":"django","slug":"django","permalink":"https://hujiyi.github.io/tags/django/"},{"name":"python","slug":"python","permalink":"https://hujiyi.github.io/tags/python/"}]},{"title":"Django 框架开发实战 004 - 实现组织构架的管理功能","slug":"create-an-app-in-django-004","date":"2022-07-04T02:25:49.000Z","updated":"2022-10-11T01:40:12.904Z","comments":true,"path":"2022/07/04/create-an-app-in-django-004/","permalink":"https://hujiyi.github.io/2022/07/04/create-an-app-in-django-004/","excerpt":"","text":"开发环境： Microsoft Windows 10 Enterprise LTSC [Version 10.0.19044.1586], locale zh-CN Python 3.8.10 PyCharm 2021.2 (Professional Edition) Visual Studio Code, 64-bit edition (version 1.67.2) 自己实现表单添加组织构架在项目 templates/department/ 文件夹添加用于以下几个新的HTML文件待用: edit.html, detail.html, delete.html, 打开 department/views.py 文件, 在文件中添加用于 新增、修改、删除、查看详细内容的函数, 代码如下所示: 12345678910111213141516171819202122232425from django.shortcuts import render, redirect, get_object_or_404from django.core.paginator import Paginator, EmptyPage, PageNotAnIntegerfrom .models import Department # 添加模型类的导入def index(request): departments = Department.objects.all() # 调用并传递数据到指定的模板文件 return render(request, &#x27;department/index.html&#x27;, &#123;&#x27;departments&#x27;: departments&#125;)def create(request): return render(request, &#x27;department/edit.html&#x27;)def update(request, dep_id): return render(request, &#x27;department/edit.html&#x27;)def delete(request, dep_id): return render(request, &#x27;department/delete.html&#x27;)def detail(request, dep_id): return render(request, &#x27;department/detail.html&#x27;) 添加路由时, 找不到目标函数会报错, 所以这里先添加几个没有具体功能的函数 添加新功能的路由打开 department/urls.py 文件, 编辑内容如下: 1234567891011from django.urls import pathfrom . import viewsurlpatterns = [ path(&#x27;&#x27;, views.index, name=&#x27;index&#x27;), path(&#x27;create/&#x27;, views.create, name=&#x27;create&#x27;), path(&#x27;&lt;int:dep_id&gt;/&#x27;, views.detail, name=&#x27;detail&#x27;), path(&#x27;update/&lt;int:dep_id&gt;/&#x27;, views.update, name=&#x27;update&#x27;), path(&#x27;delete/&lt;int:dep_id&gt;/&#x27;, views.delete, name=&#x27;delete&#x27;)] &lt;int:dep_id&gt;: 表示该路由接收一个名为 dep_id 的 int 类型的参数 跳转到新页面打开 templates/department/index.html 文件, 编辑部分代码实现到 新增、修改等功能的跳转, 代码如以下所示: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&#123;% extends &quot;layout.html&quot; %&#125;&#123;% block title %&#125;部门管理&#123;% endblock %&#125;&#123;% block content %&#125; &#123;% include &quot;nav.html&quot; %&#125; &lt;div class=&quot;container flex-grow-1&quot;&gt; &lt;div class=&quot;my-2 d-flex&quot;&gt; &lt;h3 class=&quot;flex-grow-1&quot;&gt;组织构架&lt;/h3&gt; &lt;a class=&quot;btn btn-outline-success&quot; href=&quot;&#123;% url &#x27;create&#x27; %&#125;&quot;&gt;新增&lt;/a&gt; &lt;/div&gt; &lt;table class=&quot;table table-striped table-hover&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;ID&lt;/th&gt; &lt;th&gt;名称&lt;/th&gt; &lt;th&gt;类别&lt;/th&gt; &lt;th&gt;所属&lt;/th&gt; &lt;th&gt;操作&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &#123;% for item in departments %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; item.id &#125;&#125;&lt;/td&gt; &lt;td&gt; &lt;a class=&quot;text-decoration-none&quot; href=&quot;&#123;% url &#x27;detail&#x27; item.id %&#125;&quot;&gt; &#123;&#123; item.title &#125;&#125;&lt;/a&gt; &lt;/td&gt; &lt;td&gt; &#123;% if item.type == &#x27;department&#x27; %&#125; 部门 &#123;% else %&#125; 公司 &#123;% endif %&#125; &lt;/td&gt; &lt;td&gt;&#123;&#123; item.parent.title &#125;&#125;&lt;/td&gt; &lt;td width=&quot;120px&quot;&gt; &lt;a class=&quot;btn btn-sm btn-outline-primary&quot; href=&quot;&#123;% url &#x27;update&#x27; item.id %&#125;&quot;&gt;编辑&lt;/a&gt; &lt;a class=&quot;btn btn-sm btn-outline-danger&quot; href=&quot;&#123;% url &#x27;delete&#x27; item.id %&#125;&quot;&gt;删除&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &#123;% include &quot;footer.html&quot; %&#125;&#123;% endblock %&#125; 修改说明: 在表格右上解添加了一个按钮外观的 新增 超链接; 表格行右边的两个按钮也修改为 超链接 &#123;% url 'create' %&#125;: 此处的 create 表示在 路由表中 urlpatterns 的 name 的值 &#123;% url 'update' item.id %&#125;: item.id 为传递到路由的参数 实现新增函数打开 department/views.py 文件, 编辑 create 函数的代码如下所示: 12345678910111213141516171819202122232425262728def create(request): if request.method == &#x27;POST&#x27;: _title = request.POST[&#x27;title&#x27;] # 接收表单数据 _type = request.POST[&#x27;type&#x27;] _description = request.POST[&#x27;description&#x27;] _parentId = request.POST[&#x27;parent&#x27;] # 查找是否已经存在同名部门 dep = Department.objects.filter(title=_title) if dep: pass else: # &#x27;------&#x27; 与表单中对应下拉框的第一个值要相同 if _parentId == &#x27;------&#x27;: _parent = None else: # 根据id 找出对应的部门 _parent = Department.objects.filter(pk=_parentId).first() # 添加 新 记录 Department.objects.create( title=_title, type=_type, description=_description, parent=_parent) return redirect(index) # 重定向 else: departments = Department.objects.all() # 查询已有的全部部门 # 显示新增页面(新增和修改使用同一个页面) return render(request, &#x27;department/edit.html&#x27;, &#123;&#x27;departments&#x27;: departments&#125;) 实现新增界面打开 templates/department/edit.html 文件, 编辑代码如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&#123;% extends &quot;layout.html&quot; %&#125;&#123;% block title %&#125;组织构架&#123;% endblock %&#125;&#123;% block content %&#125; &#123;% include &quot;nav.html&quot; %&#125; &lt;div class=&quot;container flex-grow-1&quot;&gt; &lt;h3&gt;新增组织构架&lt;/h3&gt; &lt;form class=&quot;row justify-content-md-center&quot; method=&quot;POST&quot;&gt; &#123;% csrf_token %&#125; &lt;div class=&quot;mb-3 col-md-8&quot;&gt; &lt;label for=&quot;parent&quot; class=&quot;form-label&quot;&gt;上级部门&lt;/label&gt; &lt;select class=&quot;form-select&quot; name=&quot;parent&quot;&gt; &lt;option&gt;------&lt;/option&gt; &#123;% for item in departments %&#125; &lt;option value=&quot;&#123;&#123; item.id &#125;&#125;&quot; &#123;% if item.title == department.parent.title %&#125; selected &#123;% endif %&#125; &gt;&#123;&#123; item.title &#125;&#125;&lt;/option&gt; &#123;% endfor %&#125; &lt;/select&gt; &lt;/div&gt; &lt;div class=&quot;mb-3 col-md-8&quot;&gt; &lt;label for=&quot;title&quot; class=&quot;form-label&quot;&gt;名称&lt;/label&gt; &lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;title&quot; placeholder=&quot;输入名称&quot; value=&quot;&#123;&#123; department.title &#125;&#125;&quot;&gt; &lt;/div&gt; &lt;div class=&quot;mb-3 col-md-8&quot;&gt; &lt;label for=&quot;type&quot; class=&quot;form-label&quot;&gt;类型&lt;/label&gt; &lt;select class=&quot;form-select&quot; name=&quot;type&quot;&gt; &lt;option value=&quot;department&quot; &#123;% if department.type == &#x27;deprtment&#x27; %&#125;selected&#123;% endif %&#125; &gt;部门 &lt;/option&gt; &lt;option value=&quot;firm&quot; &#123;% if department.type == &#x27;firm&#x27; %&#125;selected&#123;% endif %&#125; &gt;公司 &lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;div class=&quot;mb-3 col-md-8&quot;&gt; &lt;label for=&quot;description&quot; class=&quot;form-label&quot;&gt;描述&lt;/label&gt; &lt;textarea rows=&quot;3&quot; class=&quot;form-control&quot; name=&quot;description&quot; placeholder=&quot;说明&quot;&gt;&#123;&#123; department.description &#125;&#125;&lt;/textarea&gt; &lt;/div&gt; &lt;div class=&quot;mb-3 col-md-8 d-flex flex-row-reverse&quot;&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-sm btn-outline-success&quot;&gt;保存&lt;/button&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &#123;% include &quot;footer.html&quot; %&#125;&#123;% endblock %&#125; 表单中 name 属性的值要与接收数据的函数 request.POST[&#39;title&#39;] 中的名字(例如这里的 title)相同 运行、预览启动项目, 点击跳转到 新增 页面, 输入新部门数据 点 保存 按钮后, 添加数据成功, 重定向到部门列表 使用表单类自定义的表单没有数据验证功能, 在实现开发时可以使用 Django Forms API 来增强表单的功能 Django 使用两种类型的 form：forms.Form 和 forms.ModelForm。Form 类是通用的表单实现。我们可以使用它来处理与应用程序 model 没有直接关联的数据。ModelForm 是 Form 的子类，它与 model 类相关联。 添加表单类在 users 文件夹新建名为 forms.py 的文件, 编辑其内容如下: 123456789101112131415161718192021222324252627282930313233from django import formsfrom .models import Departmentclass DepartmentUpdateForm(forms.ModelForm): parent = forms.ModelChoiceField( label=&#x27;上级部门&#x27;, required=False, queryset=Department.objects.all(), widget=forms.Select(attrs=&#123;&#x27;class&#x27;: &#x27;form-select&#x27;&#125;) ) title = forms.CharField( label=&#x27;名称&#x27;, required=True, max_length=60, widget=forms.TextInput(attrs=&#123;&#x27;class&#x27;: &#x27;form-control&#x27;&#125;) ) type = forms.ChoiceField( label=&#x27;类型&#x27;, choices=((&#x27;department&#x27;, &#x27;部门&#x27;), (&#x27;firm&#x27;, &#x27;公司&#x27;)), widget=forms.Select(attrs=&#123;&#x27;class&#x27;: &#x27;form-select&#x27;&#125;), ) description = forms.CharField( label=&#x27;描述&#x27;, required=False, max_length=200, widget=forms.Textarea(attrs=&#123;&#x27;class&#x27;: &#x27;form-control&#x27;, &#x27;rows&#x27;: 3&#125;), ) class Meta: model = Department fields = [&#x27;parent&#x27;, &#x27;title&#x27;, &#x27;type&#x27;, &#x27;description&#x27;] forms.ModelChoiceField: 用于对 models里 Forekey(外键字段) 进行渲染的下拉框 forms.CharField: 渲染为输入框, 属性 widget=forms.TextInput表示单行文本框; widget=forms.Textarea() 表示多行文本框 forms.ChoiceField: 可以渲染为 单选框(widget&#x3D;forms.RadioSelect()), 或 下拉框(widget&#x3D;forms.Select()) required=False: 是否为必填项 attrs=&#123;&#39;class&#39;: &#39;form-control&#39;, &#39;rows&#39;: 3&#125;: 用于给渲染出来的表单控件添加属性, &#39;class&#39;: &#39;form-control&#39; 为添加CSS, &#39;rows&#39;: 3为指定文本框的行数 修改新增部门的视图函数打开 department/views.py文件, 修改 create 函数如以下代码: 12345678910111213141516171819def create(request): if request.method == &#x27;POST&#x27;: form = DepartmentUpdateForm(request.POST) if form.is_valid(): # form.cleaned_data 为表单接收到的数据 cd = form.cleaned_data Department.objects.create( title=cd[&#x27;title&#x27;], type=cd[&#x27;type&#x27;], description=cd[&#x27;description&#x27;], parent=cd[&#x27;parent&#x27;]) return redirect(index) # 重定向 else: error_msg = &#x27;新增部门出现异常&#x27; return render(request, &#x27;department/edit.html&#x27;, locals()) else: form = DepartmentUpdateForm() # departments = Department.objects.all() # 查询已有的全部部门 return render(request, &#x27;department/edit.html&#x27;, locals()) 修改新增界面打开 templates/department/edit.html 文件, 修改内容如下: 12345678910111213141516171819202122232425262728293031323334353637383940&#123;% extends &quot;layout.html&quot; %&#125;&#123;% block title %&#125;组织构架&#123;% endblock %&#125;&#123;% block content %&#125; &#123;% include &quot;nav.html&quot; %&#125; &lt;div class=&quot;container flex-grow-1&quot;&gt; &lt;h3&gt; &#123;% if form.title.value %&#125; 修改组织构架 &#123;% else %&#125; 新增组织构架 &#123;% endif %&#125; &lt;/h3&gt; &lt;form class=&quot;row justify-content-md-center&quot; method=&quot;POST&quot;&gt; &#123;% csrf_token %&#125; &lt;div class=&quot;text-danger text-center&quot;&gt; &#123;&#123; error_msg &#125;&#125;&lt;/div&gt; &lt;div class=&quot;mb-3 col-md-8&quot;&gt; &lt;label for=&quot;parent&quot; class=&quot;form-label&quot;&gt;上级部门&lt;/label&gt; &#123;&#123; form.parent &#125;&#125; &lt;/div&gt; &lt;div class=&quot;mb-3 col-md-8&quot;&gt; &lt;label for=&quot;title&quot; class=&quot;form-label&quot;&gt;名称&lt;/label&gt; &#123;&#123; form.title &#125;&#125; &lt;/div&gt; &lt;div class=&quot;mb-3 col-md-8&quot;&gt; &lt;label for=&quot;type&quot; class=&quot;form-label&quot;&gt;类型&lt;/label&gt; &#123;&#123; form.type &#125;&#125; &lt;/div&gt; &lt;div class=&quot;mb-3 col-md-8&quot;&gt; &lt;label for=&quot;description&quot; class=&quot;form-label&quot;&gt;描述&lt;/label&gt; &#123;&#123; form.description &#125;&#125; &lt;/div&gt; &lt;div class=&quot;mb-3 col-md-8 d-flex flex-row-reverse&quot;&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-sm btn-outline-success&quot;&gt;保存&lt;/button&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &#123;% include &quot;footer.html&quot; %&#125;&#123;% endblock %&#125; 运行、预览再次点击跳转到 新增 页面, 输入新部门数据 点 保存 按钮后, 添加数据成功, 重定向到部门列表 实现修改功能打开 department/views.py文件, 修改 update 函数如以下代码: 12345678910111213141516171819202122def update(request, dep_id): if request.method == &#x27;POST&#x27;: # 查找对应id的数据 department = get_object_or_404(Department, pk=dep_id) form = DepartmentUpdateForm(request.POST) if form.is_valid(): cd = form.cleaned_data department.title = cd[&#x27;title&#x27;] department.type = cd[&#x27;type&#x27;] department.description = cd[&#x27;description&#x27;] department.parent = cd[&#x27;parent&#x27;] department.save() return redirect(index) # 重定向 else: data = get_object_or_404(Department, pk=dep_id) form = DepartmentUpdateForm(initial=&#123; &#x27;title&#x27;: data.title, &#x27;type&#x27;: data.type, &#x27;description&#x27;: data.description, &#x27;parent&#x27;: data.parent &#125;) return render(request, &#x27;department/edit.html&#x27;, locals()) 新增 和 修改 使用同一个模板文件, 模板中的 &lt;form&gt;&lt;/form&gt; 标签不设置 action 属性, 当点击提交按钮时, 数据会回传到 启动该模板 的函数. 删除组织构架打开 department/views.py文件, 修改 delete 函数如以下代码: 12345678def delete(request, dep_id): if request.method == &#x27;GET&#x27;: data = get_object_or_404(Department, pk=dep_id) return render(request, &#x27;department/delete.html&#x27;, &#123;&#x27;department&#x27;: data&#125;) else: data = get_object_or_404(Department, pk=dep_id) data.delete() return redirect(index) 打开 templates/department/delete.html 文件, 编辑内容如下: 123456789101112131415161718192021222324252627282930313233343536373839&#123;% extends &quot;layout.html&quot; %&#125;&#123;% block title %&#125;组织构架&#123;% endblock %&#125;&#123;% block content %&#125; &#123;% include &quot;nav.html&quot; %&#125; &lt;div class=&quot;container flex-grow-1&quot;&gt; &lt;h3&gt;删除记录&lt;/h3&gt; &lt;form class=&quot;row justify-content-md-center&quot; method=&quot;POST&quot;&gt; &#123;% csrf_token %&#125; &lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;&#123;&#123; department.id &#125;&#125;&quot;&gt; &lt;div class=&quot;mb-3 col-md-8&quot;&gt; &lt;label for=&quot;parent&quot; class=&quot;form-label&quot;&gt;上级部门:&lt;/label&gt; &#123;&#123; department.parent &#125;&#125; &lt;/div&gt; &lt;div class=&quot;mb-3 col-md-8&quot;&gt; &lt;label for=&quot;title&quot; class=&quot;form-label&quot;&gt;名称:&lt;/label&gt; &#123;&#123; department.title &#125;&#125; &lt;/div&gt; &lt;div class=&quot;mb-3 col-md-8&quot;&gt; &lt;label for=&quot;type&quot; class=&quot;form-label&quot;&gt;类型:&lt;/label&gt; &#123;% if item.type == &#x27;department&#x27; %&#125; 部门 &#123;% else %&#125; 公司 &#123;% endif %&#125; &lt;/div&gt; &lt;div class=&quot;mb-3 col-md-8&quot;&gt; &lt;label for=&quot;description&quot; class=&quot;form-label&quot;&gt;描述:&lt;/label&gt; &#123;&#123; department.description &#125;&#125; &lt;/div&gt; &lt;div class=&quot;mb-3 col-md-8 d-flex flex-row-reverse&quot;&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-sm btn-outline-danger&quot;&gt;删除&lt;/button&gt; &lt;a class=&quot;btn btn-sm btn-outline-success mx-2&quot; href=&quot;&#123;% url &#x27;index&#x27; %&#125;&quot;&gt;放弃&lt;/a&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &#123;% include &quot;footer.html&quot; %&#125;&#123;% endblock %&#125; 进入删除页面 查看详细内容打开 department/views.py文件, 修改 detail 函数如以下代码: 123def detail(request, dep_id): data = get_object_or_404(Department, pk=dep_id) return render(request, &#x27;department/detail.html&#x27;, &#123;&#x27;department&#x27;: data&#125;) 打开 templates/department/detail.html 文件, 编辑内容如下: 1234567891011121314151617181920212223242526272829303132333435&#123;% extends &quot;layout.html&quot; %&#125;&#123;% block title %&#125;组织构架&#123;% endblock %&#125;&#123;% block content %&#125; &#123;% include &quot;nav.html&quot; %&#125; &lt;div class=&quot;container flex-grow-1&quot;&gt; &lt;h3&gt;详细信息&lt;/h3&gt; &lt;div class=&quot;row justify-content-md-center&quot;&gt; &lt;div class=&quot;mb-3 col-md-8&quot;&gt; &lt;label for=&quot;parent&quot; class=&quot;form-label&quot;&gt;上级部门:&lt;/label&gt; &#123;&#123; department.parent &#125;&#125; &lt;/div&gt; &lt;div class=&quot;mb-3 col-md-8&quot;&gt; &lt;label for=&quot;title&quot; class=&quot;form-label&quot;&gt;名称:&lt;/label&gt; &#123;&#123; department.title &#125;&#125; &lt;/div&gt; &lt;div class=&quot;mb-3 col-md-8&quot;&gt; &lt;label for=&quot;type&quot; class=&quot;form-label&quot;&gt;类型:&lt;/label&gt; &#123;% if item.type == &#x27;department&#x27; %&#125; 部门 &#123;% else %&#125; 公司 &#123;% endif %&#125; &lt;/div&gt; &lt;div class=&quot;mb-3 col-md-8&quot;&gt; &lt;label for=&quot;description&quot; class=&quot;form-label&quot;&gt;描述:&lt;/label&gt; &#123;&#123; department.description &#125;&#125; &lt;/div&gt; &lt;div class=&quot;mb-3 col-md-8 d-flex flex-row-reverse&quot;&gt; &lt;a class=&quot;btn btn-sm btn-outline-primary mx-2&quot; href=&quot;&#123;% url &#x27;update&#x27; department.id %&#125;&quot;&gt;修改&lt;/a&gt; &lt;a class=&quot;btn btn-sm btn-outline-success mx-2&quot; href=&quot;&#123;% url &#x27;index&#x27; %&#125;&quot;&gt;返回&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &#123;% include &quot;footer.html&quot; %&#125;&#123;% endblock %&#125; 在组织架构列表点击 名称 进入详细内容页 分页功能打开 department/views.py文件, 编辑 index 函数的代码如下: 1234567891011121314151617181920212223def index(request): &quot;&quot;&quot; 分页查询时URL格式：/department/?page=1&amp;limit=10 &quot;&quot;&quot; page = request.GET.get(&#x27;page&#x27;) # 当前页码, 缺少时为第1页 limit = request.GET.get(&#x27;limit&#x27;) # 每页大小 if not limit: limit = 2 # 设置没有 limit 参数时每页的大小, 2 是为了方便测试 department_list = Department.objects.all() paginator = Paginator(department_list, limit) try: current_page = paginator.page(page) departments = current_page.object_list except PageNotAnInteger: current_page = paginator.page(1) departments = current_page.object_list except EmptyPage: current_page = paginator.page(paginator.num_pages) departments = current_page.object_list # 调用并传递数据到指定的模板文件 # return render(request, &#x27;department/index.html&#x27;, &#123;&#x27;departments&#x27;: departments&#125;) return render(request, &#x27;department/index.html&#x27;, locals()) locals(): 返回一个包含 当前作用域 里面的所有变量和它们的值的字典 打开 templates/department/index.html 文件, 在 &lt;/table&gt; 标签后加入 Bootstrap5 分页组件, 代码如下: 123456789101112131415161718192021222324252627&lt;ul class=&quot;pagination&quot;&gt; &#123;# current_page 为视图中使用的变量名 #&#125; &#123;% if current_page.has_previous %&#125; &lt;li class=&quot;page-item&quot;&gt; &lt;a class=&quot;page-link&quot; href=&quot;/department/?page=&#123;&#123; current_page.previous_page_number &#125;&#125;&quot;&gt;前一页&lt;/a&gt; &lt;/li&gt; &#123;% else %&#125; &lt;li class=&quot;page-item disabled&quot;&gt; &lt;a class=&quot;page-link&quot; href=&quot;#&quot;&gt;前一页&lt;/a&gt; &lt;/li&gt; &#123;% endif %&#125; &#123;% for item in paginator.page_range %&#125; &lt;li class=&quot;page-item&quot;&gt; &lt;a class=&quot;page-link&quot; href=&quot;/department/?page=&#123;&#123; item &#125;&#125;&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/a&gt;&lt;/li&gt; &#123;% endfor %&#125; &#123;% if current_page.has_next %&#125; &lt;li class=&quot;page-item&quot;&gt; &lt;a class=&quot;page-link&quot; href=&quot;/department/?page=&#123;&#123; current_page.next_page_number &#125;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt; &#123;% else %&#125; &lt;li class=&quot;page-item disabled&quot;&gt; &lt;a class=&quot;page-link&quot; href=&quot;#&quot;&gt;下一页&lt;/a&gt; &lt;/li&gt; &#123;% endif %&#125;&lt;/ul&gt; 分页效果预览 完整代码参考视图文件代码department/views.py文件的完整代码如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129from django.shortcuts import render, redirect, get_object_or_404from django.core.paginator import Paginator, EmptyPage, PageNotAnIntegerfrom django.http import HttpResponse, HttpResponseRedirectfrom .models import Department # 添加模型类的导入from .forms import DepartmentUpdateFormfrom django.contrib.auth.decorators import login_requireddef home(request): return HttpResponseRedirect(&#x27;/department/&#x27;)def index(request): &quot;&quot;&quot; 分页查询时URL格式：/department/?page=1&amp;limit=10 &quot;&quot;&quot; page = request.GET.get(&#x27;page&#x27;) # 当前页码, 缺少时为第1页 limit = request.GET.get(&#x27;limit&#x27;) # 每页大小 if not limit: limit = 10 # 设置没有 limit 参数时每页的大小, 2 是为了方便测试 department_list = Department.objects.all() paginator = Paginator(department_list, limit) try: current_page = paginator.page(page) departments = current_page.object_list except PageNotAnInteger: current_page = paginator.page(1) departments = current_page.object_list except EmptyPage: current_page = paginator.page(paginator.num_pages) departments = current_page.object_list # 调用并传递数据到指定的模板文件 # return render(request, &#x27;department/index.html&#x27;, &#123;&#x27;departments&#x27;: departments&#125;) return render(request, &#x27;department/index.html&#x27;, locals())# def create(request):# if request.method == &#x27;POST&#x27;:# _title = request.POST[&#x27;title&#x27;] # 接收表单数据# _type = request.POST[&#x27;type&#x27;]# _description = request.POST[&#x27;description&#x27;]# _parentId = request.POST[&#x27;parent&#x27;]# # 查找是否已经存在同名部门# dep = Department.objects.filter(title=_title)# if dep:# pass# else:# # &#x27;------&#x27; 与表单中对应下拉框的第一个值要相同# if _parentId == &#x27;------&#x27;:# _parent = None# else:# # 根据id 找出对应的部门# _parent = Department.objects.filter(pk=_parentId).first()# # 添加 新 记录# Department.objects.create(# title=_title,# type=_type,# description=_description,# parent=_parent)# return redirect(index) # 重定向# else:# departments = Department.objects.all() # 查询已有的全部部门# # 显示新增页面(新增和修改使用同一个页面)# return render(request, &#x27;department/edit.html&#x27;, &#123;&#x27;departments&#x27;: departments&#125;)@login_required(login_url=&#x27;/login/&#x27;)def create(request): if request.method == &#x27;POST&#x27;: form = DepartmentUpdateForm(request.POST) if form.is_valid(): # form.cleaned_data 为表单接收到的数据 cd = form.cleaned_data Department.objects.create( title=cd[&#x27;title&#x27;], type=cd[&#x27;type&#x27;], description=cd[&#x27;description&#x27;], parent=cd[&#x27;parent&#x27;]) return redirect(index) # 重定向 else: error_msg = &#x27;新增部门出现异常&#x27; return render(request, &#x27;department/edit.html&#x27;, locals()) else: form = DepartmentUpdateForm() # departments = Department.objects.all() # 查询已有的全部部门 return render(request, &#x27;department/edit.html&#x27;, locals())@login_required(login_url=&#x27;/login/&#x27;)def update(request, dep_id): if request.method == &#x27;POST&#x27;: # 查找对应id的数据 department = get_object_or_404(Department, pk=dep_id) form = DepartmentUpdateForm(request.POST) if form.is_valid(): cd = form.cleaned_data department.title = cd[&#x27;title&#x27;] department.type = cd[&#x27;type&#x27;] department.description = cd[&#x27;description&#x27;] department.parent = cd[&#x27;parent&#x27;] department.save() return redirect(index) # 重定向 else: data = get_object_or_404(Department, pk=dep_id) form = DepartmentUpdateForm(initial=&#123; &#x27;title&#x27;: data.title, &#x27;type&#x27;: data.type, &#x27;description&#x27;: data.description, &#x27;parent&#x27;: data.parent &#125;) return render(request, &#x27;department/edit.html&#x27;, locals())@login_required(login_url=&#x27;/login/&#x27;)def delete(request, dep_id): if request.method == &#x27;GET&#x27;: data = get_object_or_404(Department, pk=dep_id) return render(request, &#x27;department/delete.html&#x27;, &#123;&#x27;department&#x27;: data&#125;) else: data = get_object_or_404(Department, pk=dep_id) data.delete() return redirect(index)def detail(request, dep_id): data = get_object_or_404(Department, pk=dep_id) return render(request, &#x27;department/detail.html&#x27;, &#123;&#x27;department&#x27;: data&#125;) 模板文件代码templates/department/index.html 文件的完整代码如下: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485&#123;% extends &quot;layout.html&quot; %&#125;&#123;% block title %&#125;组织构架&#123;% endblock %&#125;&#123;% block content %&#125; &#123;% include &quot;nav.html&quot; %&#125; &lt;div class=&quot;container flex-grow-1&quot;&gt; &lt;div class=&quot;my-2 d-flex&quot;&gt; &lt;h3 class=&quot;flex-grow-1&quot;&gt;组织构架&lt;/h3&gt; &lt;a class=&quot;btn btn-outline-success&quot; href=&quot;&#123;% url &#x27;create&#x27; %&#125;&quot;&gt;新增&lt;/a&gt; &lt;/div&gt; &lt;table class=&quot;table table-striped table-hover&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;ID&lt;/th&gt; &lt;th&gt;名称&lt;/th&gt; &lt;th&gt;类别&lt;/th&gt; &lt;th&gt;所属&lt;/th&gt; &lt;th&gt;操作&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &#123;% for item in departments %&#125; &lt;tr&gt; &lt;td class=&quot;align-middle&quot;&gt;&#123;&#123; item.id &#125;&#125;&lt;/td&gt; &lt;td class=&quot;align-middle&quot;&gt; &lt;a class=&quot;text-decoration-none&quot; href=&quot;&#123;% url &#x27;detail&#x27; item.id %&#125;&quot;&gt; &#123;&#123; item.title &#125;&#125;&lt;/a&gt; &lt;/td&gt; &lt;td class=&quot;align-middle&quot;&gt; &#123;# get_type_display: 显示 type 字段的 choices 的名字 #&#125; &#123;&#123; item.get_type_display &#125;&#125; &#123;# &#123;% if item.type == &#x27;department&#x27; %&#125;#&#125; &#123;# 部门#&#125; &#123;# &#123;% else %&#125;#&#125; &#123;# 公司#&#125; &#123;# &#123;% endif %&#125;#&#125; &lt;/td&gt; &lt;td class=&quot;align-middle&quot;&gt;&#123;&#123; item.parent.title &#125;&#125;&lt;/td&gt; &lt;td class=&quot;align-middle&quot; width=&quot;120px&quot;&gt; &lt;a class=&quot;btn btn-sm btn-outline-primary&quot; href=&quot;&#123;% url &#x27;update&#x27; item.id %&#125;&quot;&gt;编辑&lt;/a&gt; &lt;a class=&quot;btn btn-sm btn-outline-danger&quot; href=&quot;&#123;% url &#x27;delete&#x27; item.id %&#125;&quot;&gt;删除&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125; &lt;/tbody&gt; &lt;/table&gt; &lt;ul class=&quot;pagination&quot;&gt; &#123;# current_page 为视图中使用的变量名 #&#125; &#123;% if current_page.has_previous %&#125; &lt;li class=&quot;page-item&quot;&gt; &lt;a class=&quot;page-link&quot; href=&quot;/department/?page=&#123;&#123; current_page.previous_page_number &#125;&#125;&quot;&gt;前一页&lt;/a&gt; &lt;/li&gt; &#123;% else %&#125; &lt;li class=&quot;page-item disabled&quot;&gt; &lt;a class=&quot;page-link&quot; href=&quot;#&quot;&gt;前一页&lt;/a&gt; &lt;/li&gt; &#123;% endif %&#125; &#123;% for item in paginator.page_range %&#125; &lt;li class=&quot;page-item&quot;&gt; &lt;a class=&quot;page-link&quot; href=&quot;/department/?page=&#123;&#123; item &#125;&#125;&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/a&gt;&lt;/li&gt; &#123;% endfor %&#125; &#123;% if current_page.has_next %&#125; &lt;li class=&quot;page-item&quot;&gt; &lt;a class=&quot;page-link&quot; href=&quot;/department/?page=&#123;&#123; current_page.next_page_number &#125;&#125;&quot;&gt;下一页&lt;/a&gt;&lt;/li&gt; &#123;% else %&#125; &lt;li class=&quot;page-item disabled&quot;&gt; &lt;a class=&quot;page-link&quot; href=&quot;#&quot;&gt;下一页&lt;/a&gt; &lt;/li&gt; &#123;% endif %&#125; &lt;/ul&gt; &lt;/div&gt; &#123;% include &quot;footer.html&quot; %&#125;&#123;% endblock %&#125; 参考资料: Django v4.0 中文文档 Django入门与实践教程 Bootstrap5 中文手册 &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"django","slug":"django","permalink":"https://hujiyi.github.io/categories/django/"}],"tags":[{"name":"django","slug":"django","permalink":"https://hujiyi.github.io/tags/django/"},{"name":"python","slug":"python","permalink":"https://hujiyi.github.io/tags/python/"}]},{"title":"Django 框架开发实战 003 - 使用模板和静态文件","slug":"create-an-app-in-django-003","date":"2022-07-03T11:37:59.000Z","updated":"2022-10-11T01:40:12.888Z","comments":true,"path":"2022/07/03/create-an-app-in-django-003/","permalink":"https://hujiyi.github.io/2022/07/03/create-an-app-in-django-003/","excerpt":"","text":"开发环境： Microsoft Windows 10 Enterprise LTSC [Version 10.0.19044.1586], locale zh-CN Python 3.8.10 PyCharm 2021.2 (Professional Edition) Visual Studio Code, 64-bit edition (version 1.67.2) 使用模板(Template)在 Django 框架中，模板 是可以帮助开发者快速生成呈现给用户页面的工具。用于编写 html 代码，还可以嵌入模板代码转换更方便的完成页面开发，再通过在视图中 渲染 模板，将生成模板的设计实现了 业务逻辑视图 与 显示内容模板 的分离，一个视图可以使用任意一个模板，一个模板可以供多个视图使用。 我们可以轻松地将 Bootstrap 5 或其他前端组件框架添加到项目中, 更快地编写出漂亮的前端界面。 当前显示的页面 &#x3D; 模板 + 数据, 模板分为两部分： 静态页面：主要包括了CSS，HTML，JS，图片 动态填充：主要是通过模板语言去动态的产生一些页面上的内容 添加模板文件在项目的 templates 文件夹添加名为 index.html HTML文件, 打开 templates/index.html 文件, 编辑内容如下: 12345678910111213&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;组织构架&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;组织构架&lt;/h1&gt;&#123;% for item in departments %&#125; &#123;&#123; item.title &#125;&#125;&lt;br&gt;&#123;% endfor %&#125;&lt;/body&gt;&lt;/html&gt; 修改视图文件打开 users/views.py 文件, 编辑内容如下: 12345678910111213141516from django.shortcuts import renderfrom django.http import HttpResponse, HttpResponseRedirectfrom .models import Department # 添加模型类的导入def home(request): &quot;&quot;&quot;&quot; 浏览器URL为 http://127.0.0.1:8000 时, 跳转到 http://127.0.0.1:8000/department/ &quot;&quot;&quot; return HttpResponseRedirect(&#x27;/department/&#x27;)def index(request): # 查询所有数据(可以在之前默认后台中多添加几个组织构架数据用于显示) departments = Department.objects.all() # 调用并传递数据到指定的模板文件 return render(request, &#x27;index.html&#x27;, &#123;&#x27;departments&#x27;: departments&#125;) 编辑项目的路由, 自动跳转到当前应用打开 myproject/urls.py 文件, 编辑代码如下: 1234567891011from django.contrib import adminfrom django.urls import path, include # 添加 include 的导入import department.viewsurlpatterns = [ path(&#x27;admin/&#x27;, admin.site.urls), # 没有加路径时进行跳转 path(&#x27;&#x27;, users.views.home, name=&#x27;home&#x27;), # 添加应用的urls, department.urls: 子应用的urls 文件路径 path(&#x27;department/&#x27;, include(&#x27;department.urls&#x27;)),] 查看模板的显示结果在浏览器中打开URL：http://127.0.0.1:8000, 会自动跳转到 http://127.0.0.1:8000/department/ 使用静态文件静态文件 是指 CSS，JavaScript，字体，图片或者是用来组成用户界面的任何其他资源。 实际上，Django 本身是不负责处理这些文件的，但是为了让我们的开发过程更轻松，Django 提供了一些功能来帮助我们管理静态文件。 添加静态文件夹在项目根目录创建名为 static 的文件夹, 下载相应的资源文件后解压, 并将其中的文件复制到 static 文件夹中。 资源文件下载: https://hujiyi.github.io/2022/07/03/create-an-app-in-django-003/assets.zip 以上资源文件包含: Bootstrap 5: 流行的前端开源工具包; poper.js: Bootstrap5 依赖的 JavaScript 库; favicon.ico: 网站图标。 解压后的文件夹结构如下图所示: 在模板中使用静态文件添加静态文件夹配置打开 myproject/settings.py 文件, 找到 STATIC_URL 变量, 在其下方添加配置: 1234# 静态文件夹STATICFILES_DIRS = [ BASE_DIR / &quot;static&quot;,] 如下图所示： 使用静态文件打开 templates/index.html 文件, 编辑内容如下: 123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;link rel=&quot;icon&quot; href=&quot;/static/favicon.ico&quot;&gt; &lt;link href=&quot;/static/bootstrap-5.1.3-dist/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;title&gt;组织构架&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;container&quot;&gt; &lt;h1&gt;组织构架&lt;/h1&gt; &lt;ul class=&quot;list-group&quot;&gt; &#123;% for item in departments %&#125; &lt;li class=&quot;list-group-item&quot;&gt; &#123;&#123; item.title &#125;&#125;&lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt;&lt;/div&gt;&lt;script src=&quot;/static/poper/popper.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/static/bootstrap-5.1.3-dist/js/bootstrap.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 结果预览 基于 Bootstrap5 的整体布局创建布局模板母版页在项目的 templates 文件夹添加名为 layout.html HTML文件, 编辑内容如下: 123456789101112131415161718192021&#123;% load static %&#125;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;link rel=&quot;icon&quot; href=&quot;&#123;% static &#x27;favicon.ico&#x27; %&#125;&quot;&gt; &lt;link href=&quot;&#123;% static &#x27;bootstrap-5.1.3-dist/css/bootstrap.css&#x27; %&#125;&quot; rel=&quot;stylesheet&quot;&gt; &lt;title&gt;&#123;% block title %&#125;&#123;% endblock %&#125;&lt;/title&gt; &#123;% block style %&#125;&#123;% endblock %&#125;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;d-flex flex-column vh-100&quot;&gt; &#123;% block content %&#125; &#123;% endblock %&#125;&lt;/div&gt;&lt;script src=&quot;&#123;% static &#x27;poper/popper.min.js&#x27; %&#125;&quot;&gt;&lt;/script&gt;&lt;script src=&quot;&#123;% static &#x27;bootstrap-5.1.3-dist/js/bootstrap.js&#x27; %&#125;&quot;&gt;&lt;/script&gt;&lt;!-- 用于添加 javascript --&gt;&#123;% block scripts %&#125;&#123;% endblock scripts %&#125;&lt;/body&gt;&lt;/html&gt; 模板 最前面 使用了 Static Files App 模板标签 &#123;% load static %&#125;, 加载 静态文件 变量 模板标签 &#123;% static %&#125; 用于构成资源文件完整URL, &#123;% static 'bootstrap-5.1.3-dist/css/bootstrap.css' %&#125; 将返回 /static/bootstrap-5.1.3-dist/css/bootstrap.css, 完整的路径相当于 http://127.0.0.1:8000/static/bootstrap-5.1.3-dist/css/bootstrap.css &#123;% static %&#125;模板标签使用 myproject/settings.py 文件中的 STATIC_URL 配置来组成最终的 URL &#123;% block %&#125; &#123;% endblock %&#125; 用于在模板中保留一个空间，一个”子”模板(继承这个母版页的模板)可以在这个空间中插入代码和 HTML; 上面的模板文件中共定义了四个保留空间, content、title、style 和 scripts 为不同保留空间的名字 添加网站导航栏新建HTML文件 templates/nav.html, 编辑内容如下: 123456789101112131415161718192021222324252627&lt;!-- 导航菜单栏 --&gt;&lt;nav class=&quot;navbar navbar-expand-sm bg-light mb-4&quot;&gt; &lt;div class=&quot;container d-flex w-100&quot;&gt; &lt;h2&gt;我的网站&lt;/h2&gt; &lt;div class=&quot;flex-grow-1&quot;&gt;&lt;/div&gt; &lt;ul class=&quot;navbar-nav&quot;&gt; &lt;li class=&quot;nav-item&quot;&gt; &lt;a class=&quot;nav-link&quot; href=&quot;#&quot;&gt;首页&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;nav-item&quot;&gt; &lt;a class=&quot;nav-link&quot; href=&quot;/users/&quot;&gt;组织构架管理&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;nav-item&quot;&gt; &lt;a class=&quot;nav-link&quot; href=&quot;#&quot;&gt;当前用户: &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;nav-item&quot;&gt; &lt;a class=&quot;nav-link&quot; href=&quot;#&quot;&gt;注销 &lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;nav-item&quot;&gt; &lt;a class=&quot;nav-link&quot; href=&quot;#&quot;&gt;登录&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;nav-item&quot;&gt; &lt;a class=&quot;nav-link&quot; href=&quot;#&quot;&gt;注册&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/nav&gt; 参考资料URL: https://www.bootstrap.cn/doc/read/146.html 添加网站底部内容文件新建HTML文件 templates/footer.html, 编辑内容如下: 12&lt;!-- 网站页脚 --&gt;&lt;footer class=&quot;text-center mt-5 p-3 bg-secondary&quot;&gt; 版权所有&lt;/footer&gt; 继承复用模板在项目的 templates 文件夹中新建名为 department 的新文件夹, 将 templates/index.html 移动到 templates/department/ 文件夹中。 打开 移动位置后 的 templates/department/index.html 文件, 编辑内容如下: 1234567891011121314151617&#123;% extends &quot;layout.html&quot; %&#125;&#123;% block title %&#125;组织构架&#123;% endblock %&#125;&#123;% block content %&#125; &#123;% include &quot;nav.html&quot; %&#125; &lt;div class=&quot;container flex-grow-1&quot;&gt; &lt;h1&gt;组织构架&lt;/h1&gt; &lt;ul class=&quot;list-group&quot;&gt; &#123;% for item in departments %&#125; &lt;li class=&quot;list-group-item&quot;&gt; &#123;&#123; item.title &#125;&#125;&lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; &lt;/div&gt; &#123;% include &quot;footer.html&quot; %&#125;&#123;% endblock %&#125; 第一行的 &#123;% extends \"layout.html\" %&#125; 表示要使用 layout.html 作为母版页(继承) &#123;% block title %&#125;组织构架&#123;% endblock %&#125; 表示在母版页名字为 title 的保留空间放置内容。&#123;% block content %&#125; &#123;% endblock %&#125;作用相同 &#123;% include \"nav.html\" %&#125; 和 &#123;% include \"footer.html\" %&#125; 表示分别在该位置插入nav.html 和 footer.html 文件中的内容 编辑视图文件123456789from django.shortcuts import render# from django.http import HttpResponsefrom .models import Department def index(request): departments = Department.objects.all() # 修改模板文件为: &#x27;departments/index.html&#x27; return render(request, &#x27;department/index.html&#x27;, &#123;&#x27;departments&#x27;: departments&#125;) 结果预览 使用表格显示组织构架打开 templates/department/index.html 文件, 编辑内容如下: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&#123;% extends &quot;layout.html&quot; %&#125;&#123;% block title %&#125;组织构架&#123;% endblock %&#125;&#123;% block content %&#125; &#123;% include &quot;nav.html&quot; %&#125; &lt;div class=&quot;container flex-grow-1&quot;&gt; &lt;h1&gt;组织构架&lt;/h1&gt; &lt;table class=&quot;table table-striped table-hover&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;ID&lt;/th&gt; &lt;th&gt;名称&lt;/th&gt; &lt;th&gt;类别&lt;/th&gt; &lt;th&gt;所属&lt;/th&gt; &lt;th&gt;操作&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &#123;% for item in departments %&#125; &lt;tr class=&quot;align-middle&quot;&gt; &lt;td&gt;&#123;&#123; item.id &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; item.title &#125;&#125;&lt;/td&gt; &lt;td&gt; &#123;# get_type_display: 显示 type 字段的 choices 的名字 #&#125; &#123;&#123; item.get_type_display &#125;&#125; &#123;# &#123;% if item.type == &#x27;department&#x27; %&#125; #&#125; &#123;# 部门 #&#125; &#123;# &#123;% else %&#125; #&#125; &#123;# 公司 #&#125; &#123;# &#123;% endif %&#125; #&#125; &lt;/td&gt; &lt;td&gt;&#123;&#123; item.parent.title &#125;&#125;&lt;/td&gt; &lt;td width=&quot;120px&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-primary&quot;&gt;编辑&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-outline-danger&quot;&gt;删除&lt;/button&gt; &lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &#123;% include &quot;footer.html&quot; %&#125;&#123;% endblock %&#125; 结果预览 参考资料: Django v4.0 中文文档 Django入门与实践教程 Bootstrap5 中文手册 &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"django","slug":"django","permalink":"https://hujiyi.github.io/categories/django/"}],"tags":[{"name":"django","slug":"django","permalink":"https://hujiyi.github.io/tags/django/"},{"name":"python","slug":"python","permalink":"https://hujiyi.github.io/tags/python/"}]},{"title":"Django 框架开发实战 002 - 使用内置的后台管理功能","slug":"create-an-app-in-django-002","date":"2022-07-03T05:15:11.000Z","updated":"2022-10-11T01:40:12.888Z","comments":true,"path":"2022/07/03/create-an-app-in-django-002/","permalink":"https://hujiyi.github.io/2022/07/03/create-an-app-in-django-002/","excerpt":"","text":"开发环境： Microsoft Windows 10 Enterprise LTSC [Version 10.0.19044.1586], locale zh-CN Python 3.8.10 PyCharm 2021.2 (Professional Edition) Visual Studio Code, 64-bit edition (version 1.67.2) 在项目内创建应用在项目文件夹中按住键盘的 Shift, 点鼠标 右键, 选择 在此处打开PowerShell窗口 创建应用的命令： python manage.py startapp &lt;应用名称&gt; 12(venv) PS D:\\PycharmProjects\\myproject&gt; python .\\manage.py startapp department(venv) PS D:\\PycharmProjects\\myproject&gt; 添加 users 应用后的项目结构 12345678910111213141516171819-- myproject |-- manage.py |-- myproject | |-- __init__.py | |-- __pycache__ | |-- asgi.py | |-- settings.py | |-- urls.py | `-- wsgi.py |-- templates |-- department 新创建的应用名称 | |-- __init__.py 包初始化文件 | |-- admin.py django内置的应用程序Django Admin的配置文件 | |-- apps.py 应用程序本身的配置文件 | |-- migrations 数据迁移文件夹 | |-- models.py 数据库模型类文件 | |-- tests.py 单元测试文件 | `-- views.py 视图文件 `-- venv 配置项目用于 启用 新创建的应用打开 myproject/settings.py 文件, 找到 INSTALLED_APPS 变量, 将新应用添加到 INSTALLED_APPS 变量的应用列表中(以下方法 二选一): 使用 应用名称 安装应用到项目中 12345678910INSTALLED_APPS = [ &#x27;django.contrib.admin&#x27;, &#x27;django.contrib.auth&#x27;, &#x27;django.contrib.contenttypes&#x27;, &#x27;django.contrib.sessions&#x27;, &#x27;django.contrib.messages&#x27;, &#x27;django.contrib.staticfiles&#x27;, &#x27;department&#x27;, # 通过 应用名 安装应用, 适用于大多数情况 ] 使用 应用的配置文件 安装应用到项目中 12345678910INSTALLED_APPS = [ &#x27;django.contrib.admin&#x27;, &#x27;django.contrib.auth&#x27;, &#x27;django.contrib.contenttypes&#x27;, &#x27;django.contrib.sessions&#x27;, &#x27;django.contrib.messages&#x27;, &#x27;django.contrib.staticfiles&#x27;, &#x27;department.apps.UsersConfig&#x27;, # 通过应用的配置文件安装应用, 适用于 新应用有自定义的配置信息] 每个 应用(app) 也有自己的 配置信息，放在 apps.py 里的。在大多数情况下，把 app名 直接加入到 INSTALLED_APPS 就足够了。只有当你需要给 app自定义配置 信息时，需要把加入 应用(app) 对应的 AppConfig子类 路径直接加入到 INSTALLED_APPS 添加到 INSTALLED_APPS 变量列表中的应用才能实现 数据迁移 为新应用添加一个视图打开 department/views.py 文件, 编辑内容如下: 123456from django.shortcuts import renderfrom django.http import HttpResponsedef index(request): return HttpResponse(&#x27;Hello, World!&#x27;) 管理新应用的路由(url)在 department 文件夹添加名为 urls.py 的 Python File, 编辑内容如下: 123456from django.urls import pathfrom . import viewsurlpatterns = [ path(&#x27;&#x27;, views.index, name=&#x27;index&#x27;),] 注册新应用的路由到项目中打开 myproject/urls.py 文件, 编辑内容如下: 12345678910from django.contrib import adminfrom django.urls import path, include # 添加 include 的导入urlpatterns = [ path(&#x27;admin/&#x27;, admin.site.urls), # 添加应用的urls, department.urls: 子应用的 urls.py 文件路径 path(&#x27;department/&#x27;, include(&#x27;department.urls&#x27;)),] 显示视图的运行结果在浏览器的地址栏输入URL: http://127.0.0.1:8000/department/ 使用模型(Model)Django 通过内置的 ORM 实现对数据库的操作, 每个模型类对应于数据库中的一个表 定义 组织结构 模型类打开 department/models.py 文件, 编辑内容如下: 12345678910111213141516171819202122232425262728293031from django.db import modelsclass Department(models.Model): &quot;&quot;&quot; 组织架构:用于保存有关联业务的其他公司 或 单位内部的部门信息 &quot;&quot;&quot; # 组织架构选项 type_choices = ((&#x27;firm&#x27;, &#x27;公司&#x27;), (&#x27;department&#x27;, &#x27;部门&#x27;)) # max_length: 最大长度; verbose_name: 字段备注名 title = models.CharField(max_length=60, verbose_name=&quot;名称&quot;) type = models.CharField(max_length=20, choices=type_choices, default=&#x27;department&#x27;, verbose_name=&#x27;类型&#x27;) # null=True: 空值时存为null; blank=True: 允许为空; description = models.CharField(max_length=200, null=True, blank=True, verbose_name=&#x27;描述&#x27;) # ForeignKey: 关联关系; on_delete=models.CASCADE: 级联操作,外键表随主键表更新 parent = models.ForeignKey(&#x27;self&#x27;, null=True, blank=True, verbose_name=&#x27;上级部门&#x27;, on_delete=models.CASCADE) class Meta: verbose_name = &#x27;组织构架&#x27; # 对象的可读名称, 单数 verbose_name_plural = verbose_name # 对象的可读名称, 复数 def __str__(self): &quot;&quot;&quot; 返回对象的描述信息 &quot;&quot;&quot; return self.title 所有模型都是django.db.models.Model类的子类。每个类将被转换为 数据库表。每个字段由 django.db.models.Field子类（内置在Django core）的实例表示, 它们并将被转换为数据库的列 字段 CharField, DateTimeField等，都是 django.db.models.Field 的子类，包含在Django core 里面, 随时可以使用 CharField 必须设定一个 max_length ForeignKey 引用它关联的模型(数据库外键), 在新版 Django 中, ForeignKey 必须包含 on_delete 属性 不包含 blank=True 属性的为 必填字段 迁移模型迁移模型是告诉 Django 通过模型类来创建对应的数据库表, 以便可以使用数据库来存储数据 到 manage.py 文件所在的文件夹 打开PowerShell窗口, 激活虚拟环境, 执行命令：python manage.py makemigrations 1234(venv) PS D:\\PycharmProjects\\myproject&gt; python .\\manage.py makemigrationsMigrations for &#x27;department&#x27;: department\\migrations\\0001_initial.py - Create model Structure 命令执行完毕后, 会生成文件 department\\migrations\\0001_initial.py, 它代表了应用程序模型的当前状态 将生成的迁移文件应用到数据库继续执行命令: python manage.py migrate 1234567891011121314151617181920212223(venv) PS D:\\PycharmProjects\\myproject&gt; python .\\manage.py migrateOperations to perform: Apply all migrations: admin, auth, contenttypes, sessions, departmentRunning migrations: Applying contenttypes.0001_initial... OK Applying auth.0001_initial... OK Applying admin.0001_initial... OK Applying admin.0002_logentry_remove_auto_add... OK Applying admin.0003_logentry_add_action_flag_choices... OK Applying contenttypes.0002_remove_content_type_name... OK Applying auth.0002_alter_permission_name_max_length... OK Applying auth.0003_alter_user_email_max_length... OK Applying auth.0004_alter_user_username_opts... OK Applying auth.0005_alter_user_last_login_null... OK Applying auth.0006_require_contenttypes_0002... OK Applying auth.0007_alter_validators_add_error_messages... OK Applying auth.0008_alter_user_username_max_length... OK Applying auth.0009_alter_user_last_name_max_length... OK Applying auth.0010_alter_group_name_max_length... OK Applying auth.0011_update_proxy_permissions... OK Applying auth.0012_alter_user_first_name_max_length... OK Applying sessions.0001_initial... OK Applying department.0001_initial... OK 执行迁移数据库操作的时候, 会处理 INSTALLED_APPS 变量中的所有应用的 模型类, 所以除了上面的自下定义模型, 生成的数据库表也包含了项目自带的其他数据表。而 没有添加 到 INSTALLED_APPS 变量中的应用, 将 不会 被处理。 查看迁移后生成的数据库打开 MySQL 数据库客户端, 选择当前项目使用的数据库, 查看生成的数据表, 如下图所示: 修改数据库当模型类修改后，则数据库与模型类不再匹配，此时需要重新执行以下两个命令, 生成修改后的迁移文件以及应用到数据库即可。 python manage.py makemigrations python manage.py migrate 如果模型类的修改比较大, 并且数据库中对应的表已经保存的数据, 以上两个命令执行后可能会出现异常, 可以直接在MySQL数据库的 客户端 中删除数据库, 然后重建 同名数据库, 再执行以上两个命令 使用内置的后台管理功能Django 已经配置了 Django Admin, 添加 超级管理员 用户并配置 Django Admin, 就可以用来维护应用程序了 创建超级用户执行命令： python manage.py createsuperuser 123456(venv) PS D:\\PycharmProjects\\myproject&gt; python .\\manage.py createsuperuser用户名 (leave blank to use &#x27;laohoo&#x27;): admin电子邮件地址: admin@163.comPassword:Password (again):Superuser created successfully. 按命令执行后的提示分别输入用户名, 电子邮箱, 密码 和 确认密码。 其中 密码 有复杂度的要求 管理员登录在浏览器中打开URL：http://127.0.0.1:8000/admin/ 输入用户名和密码登录到管理界面 添加模型到管理界面打开 department/admin.py 文件，并添加以下代码： 12345from django.contrib import adminfrom .models import Departmentadmin.site.register(Department) 刷新网页 添加新的组织架构(部门) 添加成功 定制后台管理界面Django 允许对后台管理界面显示的模型数据进行定制 打开 department/admin.py文件, 修改如下： 1234567891011121314151617from django.contrib import adminfrom .models import Departmentclass DepartmentAdmin(admin.ModelAdmin): # 显示的字段名列表 list_display = (&#x27;title&#x27;, &#x27;type&#x27;, &#x27;description&#x27;,) # 可过滤的字段名列表 list_filter = (&#x27;title&#x27;, &#x27;type&#x27;,) # 可搜索的字段名列表 search_fields = (&#x27;title&#x27;, &#x27;description&#x27;,) # 启用排序功能的字段 ordering = [&#x27;title&#x27;]admin.site.register(Department, DepartmentAdmin) 保存文件后，刷新网页，即可看到定制后的管理界面显示效果 参考资料: Django v4.0 中文文档 Django入门与实践教程 Bootstrap5 中文手册 &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"django","slug":"django","permalink":"https://hujiyi.github.io/categories/django/"}],"tags":[{"name":"django","slug":"django","permalink":"https://hujiyi.github.io/tags/django/"},{"name":"python","slug":"python","permalink":"https://hujiyi.github.io/tags/python/"}]},{"title":"Django 框架开发实战 001 - 创建项目","slug":"create-an-app-in-django-001","date":"2022-07-03T02:01:09.000Z","updated":"2022-10-11T01:40:12.872Z","comments":true,"path":"2022/07/03/create-an-app-in-django-001/","permalink":"https://hujiyi.github.io/2022/07/03/create-an-app-in-django-001/","excerpt":"","text":"开发环境： Microsoft Windows 10 Enterprise LTSC [Version 10.0.19044.1586], locale zh-CN Python 3.8.10 PyCharm 2021.2 (Professional Edition) Visual Studio Code, 64-bit edition (version 1.67.2) pip 使用国内镜像源Python 安装第三方包时, 默认的服务器在国外, 安装速度可能会很慢, 可以设置国内的镜像服务器为安装源 1、执行以下两个命令，设置 全局 使用 国内源（中科大） 123pip config set global.index-url https://mirrors.ustc.edu.cn/pypi/web/simplepip config set global.trusted-host https://mirrors.ustc.edu.cn/pypi/web/simple 2、输出（查看）现有的pip源： 1pip config list 准备工作查看当前电脑已安装 Django 版本的命令: 1python -m django --version 安装 最新版本 的 Django : 1pip install django 安装 指定版本 的 Django : 1pip install django==版本号 例如： 1pip install django== 2.2.3 卸载 已安装的 Django : 1pip uninstall django 创建项目使用命令行创建项目命令格式： 12django-admin startproject &lt;项目名称&gt; 例如: 12django-admin startproject mysite django-admin 是 Django 提供的 命令行管理工具, 这个工具会在安装 Django 的时候自动安装 在 PyCharm 中创建 Django 项目在 PyCharm 菜单中选择 File -&gt; New Project, 在弹出的 新项目 对话框中选择 项目类型、保存位置 等信息, 如下图所示： 提示： 在 PyCharm 中创建 Django 项目, 会默认使用 最新 的版本(不会使用电脑中已经安装的旧版 Django), 所以需要创建 指定版本 的 Django 项目时, 建议使用 命令行 的方式创建项目 项目结构说明12345678910- myproject 项目的容器, 默认与项目名称相同 |-- manage.py 命令行工具 |-- myproject 项目文件夹 | |-- __init__.py 包的初始化文件 | |-- asgi.py 异步的 WSGI 网关 | |-- settings.py 项目配置文件 | |-- urls.py 项目的路径和路由配置文件 | `-- wsgi.py 简单网关接口 |-- templates 模板文件夹目录 `-- venv 虚拟环境目录 项目的配置修改默认 语言 和 时区打开文件 myproject/settings.py, 找到 LANGUAGE_CODE、TIME_ZONE 和 USE_TZ 并进行修改, 如下图所示： 在项目中使用 MySQL 数据库 在新创建的 Django 项目中, 已经默认配置使用 SQLite 数据库, SQLite 数据库的驱动已经被 Python 集成, 不需要额外安装驱动。可以开发阶段使用该数据库, 部署到生产服务器时再修改为使用其他数据库 安装 MySQL 数据库驱动在 PyCharm 菜单中选择 File -&gt; Settings, 在弹出的 Settings 对话框 左侧窗格 中选择 Project: myproject(冒号右侧为项目名称) -&gt; Python Interpreter, 右侧选择 +, 如下图所示： 在弹出的包管理对话框中输入 MySQL 数据库驱动程序的名称 mysqlclient, 选择并安装包, 如下图所示： 安装成功后并闭对话框 使用 MySQL 数据库打开文件 myproject/settings.py, 找到 DATABASES 配置项目, 将其注释, 并添加新的数据库配置, 如下所示： 12345678910DATABASES = &#123; &#x27;default&#x27;: &#123; &#x27;ENGINE&#x27;: &#x27;django.db.backends.mysql&#x27;, # 数据库驱动 &#x27;NAME&#x27;: &#x27;my_data_labs&#x27;, # 数据库名称 &#x27;HOST&#x27;: &#x27;localhost&#x27;, # 数据库服务器地址 &#x27;USER&#x27;: &#x27;root&#x27;, # 数据库登录账号 &#x27;PASSWORD&#x27;: &#x27;123456&#x27;, # 数据库登录密码 &#x27;PORT&#x27;: &#x27;3306&#x27; # 端口号 &#125;&#125; 创建数据库打开 MySQL 数据库 客户端, 创建上一步骤 配置文件 中指定的数据库 my_data_labs, 如下图所示: 如果 没有创建 数据库, 运行时会出现类似以下找不到数据库(Unknown database &#39;my_data_labs&#39;)的的 错误信息: 运行项目在命令行中运行项目在 PyCharm 中创建的项目默认启用 虚拟环境, 所以使用命令行方式运行项目时, 要先 激活虚拟环境。 在项目文件夹中按住键盘的 Shift, 点鼠标 右键, 选择 在此处打开PowerShell窗口 激活虚拟环境, 命令： .\\venv\\Scripts\\activate 12PS D:\\PycharmProjects\\myproject&gt; .\\venv\\Scripts\\activate(venv) PS D:\\PycharmProjects\\myproject&gt; 运行项目, 命令： python .\\manage.py runserver 123456789101112(venv) PS D:\\PycharmProjects\\myproject&gt; python .\\manage.py runserverWatching for file changes with StatReloaderPerforming system checks...System check identified no issues (0 silenced).You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.Run &#x27;python manage.py migrate&#x27; to apply them.July 03, 2022 - 11:52:32Django version 4.0.5, using settings &#x27;myproject.settings&#x27;Starting development server at http://127.0.0.1:8000/Quit the server with CTRL-BREAK. 在 PyCharm 中运行项目在 PyCharm 的菜单中选择 Run -&gt; Run &#39;myproject&#39;, 或点击工具栏中的 运行 按钮: 查看运行结果打开浏览器, 输入网址: http://127.0.0.1:8000/ 参考资料: Django v4.0 中文文档 Django入门与实践教程 Bootstrap5 中文手册 &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"django","slug":"django","permalink":"https://hujiyi.github.io/categories/django/"}],"tags":[{"name":"django","slug":"django","permalink":"https://hujiyi.github.io/tags/django/"},{"name":"python","slug":"python","permalink":"https://hujiyi.github.io/tags/python/"}]},{"title":"在 Flutter 中使用 Freezed","slug":"use-freezed-with-flutter","date":"2022-05-04T12:59:54.000Z","updated":"2022-10-11T01:40:13.298Z","comments":true,"path":"2022/05/04/use-freezed-with-flutter/","permalink":"https://hujiyi.github.io/2022/05/04/use-freezed-with-flutter/","excerpt":"","text":"https://github.com/rrousselGit/freezed https://www.developer.school/tutorials/how-to-use-freezed-with-flutter https://runble1.com/flutter-freezed-tutorial/ Freezed 是一个不可变类的代码生成器, 用于数据类&#x2F;联合&#x2F;模式匹配&#x2F;克隆的代码生成器。不可变类的代码生成具有简单的语法&#x2F;API，而不会影响功能。 在 Dart/Flutter 中定义模型(model)的时候, 经常要附加以下的工作： 定义一个构造函数+属性 覆盖 toString、运算符 &#x3D;&#x3D;、hashCode 实现一个 copyWith 方法来克隆对象 处理反序列化 除此之外，Dart 还缺少联合类型和模式匹配等功能。实现所有这些可能需要数百行代码，这很容易出错并且模型的可读性显着。 Freezed 尝试通过实现以上的大部分内容来解决这个问题，让开发者可以专注于模型的定义。 不可变类(immutable class)","categories":[{"name":"flutter","slug":"flutter","permalink":"https://hujiyi.github.io/categories/flutter/"}],"tags":[{"name":"flutter","slug":"flutter","permalink":"https://hujiyi.github.io/tags/flutter/"},{"name":"freezed","slug":"freezed","permalink":"https://hujiyi.github.io/tags/freezed/"}]},{"title":"在 Flutter中使用 go_router 配置路由","slug":"flutter-navigator-using-go-router","date":"2022-04-09T15:02:14.000Z","updated":"2022-10-11T01:40:13.254Z","comments":true,"path":"2022/04/09/flutter-navigator-using-go-router/","permalink":"https://hujiyi.github.io/2022/04/09/flutter-navigator-using-go-router/","excerpt":"","text":"go_router 基于 Navigation 2 的 Flutter 声明式路由, 通过使用声明式路由来降低复杂性, 适用于各种不同的目标平台(mobile、Web、desktop), 是由 Flutter 生态系统委员会选出的表现出最高质量水平的软件包(Flutter Favorites)。 开发环境： Microsoft Windows 10 Enterprise LTSC [Version 10.0.19044.1586], locale zh-CN Flutter 2.10.3 • Channel Stable, Dart 2.16.1 Visual Studio Code, 64-bit edition (version 1.66.1) OpenJDK Runtime Environment (build 11.0.11+9-b60-7590822) Android SDK version 30.0.3, Platform android-31, build-tools 30.0.3 新建项目执行命令，创建新项目：flutter create my_go_router_app 12345678910111213PS D:\\flutter_repos&gt; flutter create my_go_router_appFlutter assets will be downloaded from https://storage.flutter-io.cn. Make sure you trust this source!Creating project my_go_router_app...Running &quot;flutter pub get&quot; in my_go_router_app... 1,770msWrote 96 files.All done!In order to run your application, type: $ cd my_go_router_app $ flutter runYour application code is in my_go_router_app\\lib\\main.dart. 打开新创建的项目： 12PS D:\\flutter_repos&gt; cd .\\my_go_router_app\\PS D:\\flutter_repos\\my_go_router_app&gt; code . 添加新文件新建文件 lib/views/index_page.dart, 编辑其内容如下： 12345678910111213141516171819202122import &#x27;package:flutter/material.dart&#x27;;class IndexPage extends StatelessWidget &#123; const IndexPage(&#123;Key? key&#125;) : super(key: key); @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar(title: const Text(&#x27;Go Router&#x27;)), body: Column( children: [ ListTile( leading: const Icon(Icons.settings_outlined), title: const Text(&#x27;设置&#x27;), onTap: () &#123;&#125;, ), ], ), ); &#125;&#125; 新建文件 lib/views/movie_detail_page.dart, 编辑其内容如下： 123456789101112131415161718import &#x27;package:flutter/material.dart&#x27;;class MovieDetailPage extends StatelessWidget &#123; const MovieDetailPage(&#123;Key? key, required this.id&#125;) : super(key: key); final String id; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar(title: const Text(&#x27;Movie Detail&#x27;)), body: Center( child: Text(&#x27;当前电影ID: $id&#x27;), ), ); &#125;&#125; 新建文件 lib/views/settings_page.dart, 编辑其内容如下： 123456789101112import &#x27;package:flutter/material.dart&#x27;;class SettingPage extends StatelessWidget &#123; const SettingPage(&#123;Key? key&#125;) : super(key: key); @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar(title: const Text(&#x27;Settings&#x27;)), ); &#125;&#125; 新建文件 lib/views/search_page.dart, 编辑其内容如下： 1234567891011121314151617import &#x27;package:flutter/material.dart&#x27;;class SearchPage extends StatelessWidget &#123; const SearchPage(&#123;Key? key, required this.query&#125;) : super(key: key); final String query; @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar(title: const Text(&#x27;Search&#x27;)), body: Center( child: Text(&#x27;查找的内容为: $query&#x27;), ), ); &#125;&#125; 添加 go_router 依赖go_router 最新版本: https://pub.flutter-io.cn/packages/go_router 打开文件pubspec.yaml, 在 dependencies 中添加 go_router 包： 123456dependencies: flutter: sdk: flutter cupertino_icons: ^1.0.2 go_router: ^3.0.7 # 添加这一行 创建路由表新建文件 lib/utils/app_routes.dart, 编辑其内容如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566import &#x27;package:go_router/go_router.dart&#x27;;import &#x27;../views/index_page.dart&#x27;;import &#x27;../views/movie_detail_page.dart&#x27;;import &#x27;../views/search_page.dart&#x27;;import &#x27;../views/settings_page.dart&#x27;;class AppRoutes &#123; // 用于路径路由(声明式路由)的常量, 路径不包含参数 static const String homePath = &#x27;/&#x27;; // 根路由 static const String settingPath = &#x27;/settings&#x27;; static const String movieDetailPath = &#x27;/movie_detail&#x27;; static const String searchPath = &#x27;/search&#x27;; // 用于 命名路由的常量 static const String homeNamed = &#x27;home_page&#x27;; static const String settingsNamed = &#x27;setting_page&#x27;; static const String movieDetailNamed = &#x27;movie_detail_page&#x27;; static const String searchNamed = &#x27;search_page&#x27;; static GoRouter router = GoRouter( initialLocation: homePath, // 默认路由, 不指定这一荐时，默认路由为 &#x27;/&#x27; routes: [ GoRoute( // 不传递参数的路由项 name: homeNamed, // 命名路由 path: homePath, // 路径路由 builder: (context, state) =&gt; const IndexPage(), ), GoRoute( name: settingsNamed, path: settingPath, builder: (context, state) =&gt; const SettingPage(), ), GoRoute( // 传递参数方式1, 参数格式类似URL：/search?query=flutter name: searchNamed, path: searchPath, // 问号格式的参数，在路径中不需要包含参数信息 // GoRouter.of(context).pushNamed(AppRoutes.searchNamed, queryParams: &#123;&#x27;query&#x27;: &#x27;abcd&#x27;&#125;); // GoRouter.of(context).push(&#x27;$&#123;AppRoutes.searchPath&#125;?query=flutter&#x27;); // GoRouter.of(context).go(&#x27;/search?query=flutter&#x27;); builder: (context, state) &#123; // state.queryParams 接收用问号隔开的参数 final query = state.queryParams[&#x27;query&#x27;]; return SearchPage(query: query!); &#125;, ), GoRoute( // 传递参数方式2, 参数格式：/movie_detail/123 name: movieDetailNamed, path: &#x27;$movieDetailPath/:id&#x27;, // 位置格式的参数，参数要包含在路径中 // GoRouter.of(context).pushNamed(AppRoutes.searchNamed, params: &#123;&#x27;query&#x27;: &#x27;abcd&#x27;&#125;); // GoRouter.of(context).push(&#x27;$&#123;AppRoutes.movieDetailPath&#125;/654321&#x27;); // GoRouter.of(context).go(&#x27;/movie_detail/654321&#x27;); builder: (context, state) &#123; // state.params 接收 `/` 隔开的参数(按位置) final id = state.params[&#x27;id&#x27;]!; return MovieDetailPage(id: id); &#125;, ), ], );&#125; 路由初始化打开 main.dart 文件, 编辑内容如下： 12345678910111213141516171819202122232425import &#x27;package:flutter/material.dart&#x27;;import &#x27;utils/app_routes.dart&#x27;;void main() &#123; runApp(const MyApp());&#125;class MyApp extends StatelessWidget &#123; const MyApp(&#123;Key? key&#125;) : super(key: key); // This widget is the root of your application. @override Widget build(BuildContext context) &#123; return MaterialApp.router( title: &#x27;Flutter Demo&#x27;, theme: ThemeData( primarySwatch: Colors.blue, ), routeInformationParser: AppRoutes.router.routeInformationParser, routerDelegate: AppRoutes.router.routerDelegate, ); &#125;&#125; 使用路由打开文件 lib/views/index_page.dart, 编辑其内容如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:go_router/go_router.dart&#x27;;import &#x27;package:my_go_router_app/utils/app_routes.dart&#x27;;class IndexPage extends StatelessWidget &#123; const IndexPage(&#123;Key? key&#125;) : super(key: key); @override Widget build(BuildContext context) &#123; return Scaffold( appBar: AppBar(title: const Text(&#x27;Go Router&#x27;)), body: Column( children: [ ListTile( leading: const Icon(Icons.settings_outlined), title: const Text(&#x27;设置&#x27;), onTap: () &#123; GoRouter.of(context).push(AppRoutes.settingPath); &#125;, ), ListTile( leading: const Icon(Icons.find_in_page_outlined), title: const Text(&#x27;搜索_path&#x27;), onTap: () &#123; GoRouter.of(context).push( // 实际路径：/search?query=flutter &#x27;$&#123;AppRoutes.searchPath&#125;?query=flutter&#x27;, ); &#125;, ), ListTile( leading: const Icon(Icons.find_in_page_outlined), title: const Text(&#x27;搜索_named&#x27;), onTap: () &#123; GoRouter.of(context).pushNamed( AppRoutes.searchNamed, // queryParams 传递问号隔开的参数 queryParams: &#123;&#x27;query&#x27;: &#x27;abcd&#x27;&#125;, ); &#125;, ), ListTile( leading: const Icon(Icons.details_outlined), title: const Text(&#x27;电影详情_path&#x27;), onTap: () &#123; // 路径传递参数 GoRouter.of(context).push( // 实际路径： /movie_detail/654321 &#x27;$&#123;AppRoutes.movieDetailPath&#125;/654321&#x27;, ); &#125;, ), ListTile( leading: const Icon(Icons.details_outlined), title: const Text(&#x27;电影详情_named&#x27;), onTap: () &#123; // 命令路由传递参数 GoRouter.of(context).pushNamed( AppRoutes.movieDetailNamed, // params 传递 `/` 隔开的参数 params: &#123;&#x27;id&#x27;: &#x27;123456&#x27;&#125;, ); &#125;, ), ], ), ); &#125;&#125; 路由导航无参数的路径路由要在页面之间导航，可以使用 GoRouter.go 或 GoRouter.push 方法： 12// navigate using the GoRouteronTap: () =&gt; GoRouter.of(context).go(&#x27;/page2&#x27;) 12// navigate using the GoRouteronTap: () =&gt; GoRouter.of(context).push(&#x27;/page2&#x27;) go_router 还提供了一个使用 Dart扩展方法 的简化导航手段。 12// navigate using the GoRouter more easilyonTap: () =&gt; context.go(&#x27;/page2&#x27;) 12// navigate using the GoRouter more easilyonTap: () =&gt; context.push(&#x27;/page2&#x27;) GoRouter.go 方法跳转后不能返回; GoRouter.push 方法会把当前路由压入堆栈，可以通过 GoRouter.of(context).pop() 返回前一页。 无参数的命名路由1GoRouter.of(context).goNamed(&#x27;settings_page&#x27;); 1GoRouter.of(context).pushNamed(&#x27;settings_page&#x27;); 通过路由传递参数的方式1参数传递方式1, 参数格式类似URL：/search?query=flutter 123456789GoRoute( name: &#x27;search_page&#x27;, path: &#x27;/search&#x27;, // 问号格式的参数，在路径中不需要包含参数信息 builder: (context, state) &#123; // state.queryParams 接收用问号隔开的参数 final query = state.queryParams[&#x27;query&#x27;]; return SearchPage(query: query!); &#125;,), state.queryParams 接收用问号隔开的参数 参数传递方式1 的路由跳转的几种写法： 1234GoRouter.of(context).pushNamed(&#x27;search_page&#x27;, queryParams: &#123;&#x27;query&#x27;: &#x27;abcd&#x27;&#125;);GoRouter.of(context).push(&#x27;/search?query=mobile&#x27;);GoRouter.of(context).goNamed(&#x27;search_page&#x27;, queryParams: &#123;&#x27;query&#x27;: &#x27;android&#x27;&#125;);GoRouter.of(context).go(&#x27;/search?query=flutter&#x27;); 通过路由传递参数的方式2参数传递方式2, 参数格式类似：/movie_detail/654342 1234567891011GoRoute( // 传递参数方式2, 参数格式：/movie_detail/123 name: &#x27;movie_detail_page&#x27;, path: &#x27;movie_detail/:id&#x27;, // 位置格式的参数，参数要包含在路径中 builder: (context, state) &#123; final id = state.params[&#x27;id&#x27;]!; return MovieDetailPage(id: id); &#125;,), state.params 接收 / 隔开的参数(按位置) 参数传递方式2 的路由跳转的几种写法： 1234GoRouter.of(context).pushNamed(&#x27;movie_detail_page&#x27;, Params: &#123;&#x27;id&#x27;: 654342&#125;);GoRouter.of(context).push(&#x27;movie_detail/234321&#x27;);GoRouter.of(context).goNamed(&#x27;movie_detail_page&#x27;, Params: &#123;&#x27;id&#x27;: 794341&#125;);GoRouter.of(context).go(&#x27;/movie_detail/854785&#x27;); 错误处理默认情况下，go_router 带有 MaterialApp 和 CupertinoApp 一个默认错误页面，如果不想使用自带的默认错误处理页面。可以通过设置 GoRouter 的 errorBuilder 参数来替换默认的错误页面。 1234567class App extends StatelessWidget &#123; ... final _router = GoRouter( ... errorBuilder: (context, state) =&gt; ErrorPage(state.error), );&#125;","categories":[{"name":"flutter","slug":"flutter","permalink":"https://hujiyi.github.io/categories/flutter/"}],"tags":[{"name":"flutter","slug":"flutter","permalink":"https://hujiyi.github.io/tags/flutter/"},{"name":"go_router","slug":"go-router","permalink":"https://hujiyi.github.io/tags/go-router/"},{"name":"路由","slug":"路由","permalink":"https://hujiyi.github.io/tags/%E8%B7%AF%E7%94%B1/"}]},{"title":"使用 Android SDK 命令行工具搭建 Flutter 开发环境","slug":"build-flutter-dev-environment-with-cmdline-tools","date":"2022-03-18T12:52:47.000Z","updated":"2024-02-16T10:47:00.498Z","comments":true,"path":"2022/03/18/build-flutter-dev-environment-with-cmdline-tools/","permalink":"https://hujiyi.github.io/2022/03/18/build-flutter-dev-environment-with-cmdline-tools/","excerpt":"","text":"准备的软件： Flutter SDK (stable channel), 下载地址：https://docs.flutter.dev/development/tools/sdk/releases OpenJDK 11 (可以使用其他的 JDK, 最低版本要求是 11, 可以使用更高版本的 JDK ) Android SDK Command-line Tools(latest) 下载地址：https://developer.android.google.cn/studio?hl=zh-cn#command-tools Visual Studio Code 下载地址：https://code.visualstudio.com/Download 雷电模拟器、 夜神模拟器 或 Android Studio 自带的模拟器任选一个（也可以使用其他可以连接到开发工具的模拟器）,雷电模拟器 安装好即可使用; 夜神模拟器 需要做一个额外的配置。 最新版的 Android Studio 安装文件夹下的 jre 文件夹是自带的 OpenJDK 11.0.10, 我从另外一台安装有 Android Studio 的电脑上复制了这个文件夹并改名为 openJDK 备用 说明：理论上搭建 Flutter 开发环境只要有 Android SDK 就可以了, 可以不安装 Android Studio。 于是找了个旧电脑来试了一下。当然了, 在开发完整功能的 Flutter 应用程序时, 如果需要编写涉及 Android 的混合代码, 还是配合使用 Android Studio 更方便。 配置 Flutter SDK 使用国内镜像由于某些不可描述的原因，Flutter SDK 的资源网站访问受到影响，可以通过设置 PUB_HOSTED_URL 和 FLUTTER_STORAGE_BASE_URL 两个环境变量设置为使用国内镜像， 以下两个站点二选一： 使用清华大学镜像：使用管理员权限打开 CMD窗口 或 PowerShell窗口，执行以下命令： 12setx &quot;PUB_HOSTED_URL&quot; &quot;https://mirrors.tuna.tsinghua.edu.cn/dart-pub&quot; setx &quot;FLUTTER_STORAGE_BASE_URL&quot; &quot;https://mirrors.tuna.tsinghua.edu.cn/flutter&quot; 使用Flutter官方为中国开发者搭建了临时镜像：使用管理员权限打开 CMD窗口 或 PowerShell窗口，执行以下命令： 12setx &quot;PUB_HOSTED_URL&quot; &quot;https://pub.flutter-io.cn&quot;setx &quot;FLUTTER_STORAGE_BASE_URL&quot; &quot;https://storage.flutter-io.cn&quot; 配置 Flutter SDK 打开文件夹 D:\\AppData (没有则新建一个, 或指定其他合适的文件夹) 将下载好的 Flutter SDK 压缩文件复制到该文件夹中，使用 解压到当前位置 解压文件, Flutter SDK 的路径为：D:\\AppData\\flutter 修改环境变量 path， 添加一个值: D:\\AppData\\flutter\\bin (如果使用命令方式修改环境变量，与下一步的 配置JDK 一起修改) 配置 JDK 打开 D:\\AppData 文件夹 将 openJDK 复制该文件中, JDK 的路径为：D:\\AppData\\openJDK 添加环境变量 JAVA_HOME: 使用 管理员权限 打开 CMD窗口 或 PowerShell窗口，执行以下命令： 1setx &quot;JAVA_HOME&quot; &quot;D:\\AppData\\openJDK&quot; /m 修改环境变量 path, 添加两个值：%JAVA_HOME%\\bin 和 %JAVA_HOME%\\jre\\bin, 使用管理员权限打开 CMD窗口 或 PowerShell窗口，执行以下命令： 1setx PATH &quot;%PATH%;%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;D:\\AppData\\flutter\\bin&quot; /m 使用 Android SDK Command-line Tools(latest) 安装 Android SDK 将下载好的 commandlinetools-win-8092744_latest.zip (当前最新版) 文件解压缩, 修改解压后的文件夹名称及相关路径为以下格式： D:\\AppData\\Android\\Sdk\\cmdline-tools\\latest, 确保 latest 文件夹内为 bin 、lib 文件夹, 如下图所示: 特别提醒: 文件夹路径不对, 会导致后续步骤不能正确执行, D:\\AppData\\Android\\Sdk\\ 为 Android SDK 路径, 可根据自己的需要进行修改调整; cmdline-tools\\latest 为Android SDK内部文件夹结构, 不能变动。 添加ANDROID_HOME 环境变量 将 Android SDK 的路径添加到环境变量中, 使用 管理员权限 运行 CMD窗口 或 PowerShell窗口, 执行以下命令： 1setx &quot;ANDROID_HOME&quot; &quot;D:\\AppData\\Android\\Sdk&quot; /m 将 D:\\AppData\\Android\\Sdk 替换为自己电脑实际的 Android SDK 路径 在 D:\\AppData\\Android\\Sdk\\cmdline-tools\\latest\\bin 文件夹打开 Powershell 或 CMD 窗口 查看 已安装的包 和 有效的包, 命令格式： sdkmanager.bat --list, Powershell窗口 执行情况如下所示： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292PS D:\\AppData\\Android\\Sdk\\cmdline-tools\\latest\\bin&gt; .\\sdkmanager.bat --list[=======================================] 100% Computing updates...Available Packages: Path | Version | Description ------- | ------- | ------- add-ons;addon-google_apis-google-15 | 3 | Google APIs add-ons;addon-google_apis-google-16 | 4 | Google APIs add-ons;addon-google_apis-google-17 | 4 | Google APIs add-ons;addon-google_apis-google-18 | 4 | Google APIs add-ons;addon-google_apis-google-19 | 20 | Google APIs add-ons;addon-google_apis-google-21 | 1 | Google APIs add-ons;addon-google_apis-google-22 | 1 | Google APIs add-ons;addon-google_apis-google-23 | 1 | Google APIs add-ons;addon-google_apis-google-24 | 1 | Google APIs build-tools;19.1.0 | 19.1.0 | Android SDK Build-Tools 19.1 build-tools;20.0.0 | 20.0.0 | Android SDK Build-Tools 20 build-tools;21.1.2 | 21.1.2 | Android SDK Build-Tools 21.1.2 build-tools;22.0.1 | 22.0.1 | Android SDK Build-Tools 22.0.1 build-tools;23.0.1 | 23.0.1 | Android SDK Build-Tools 23.0.1 build-tools;23.0.2 | 23.0.2 | Android SDK Build-Tools 23.0.2 build-tools;23.0.3 | 23.0.3 | Android SDK Build-Tools 23.0.3 build-tools;24.0.0 | 24.0.0 | Android SDK Build-Tools 24 build-tools;24.0.1 | 24.0.1 | Android SDK Build-Tools 24.0.1 build-tools;24.0.2 | 24.0.2 | Android SDK Build-Tools 24.0.2 build-tools;24.0.3 | 24.0.3 | Android SDK Build-Tools 24.0.3 build-tools;25.0.0 | 25.0.0 | Android SDK Build-Tools 25 build-tools;25.0.1 | 25.0.1 | Android SDK Build-Tools 25.0.1 build-tools;25.0.2 | 25.0.2 | Android SDK Build-Tools 25.0.2 build-tools;25.0.3 | 25.0.3 | Android SDK Build-Tools 25.0.3 build-tools;26.0.0 | 26.0.0 | Android SDK Build-Tools 26 build-tools;26.0.1 | 26.0.1 | Android SDK Build-Tools 26.0.1 build-tools;26.0.2 | 26.0.2 | Android SDK Build-Tools 26.0.2 build-tools;26.0.3 | 26.0.3 | Android SDK Build-Tools 26.0.3 build-tools;27.0.0 | 27.0.0 | Android SDK Build-Tools 27 build-tools;27.0.1 | 27.0.1 | Android SDK Build-Tools 27.0.1 build-tools;27.0.2 | 27.0.2 | Android SDK Build-Tools 27.0.2 build-tools;27.0.3 | 27.0.3 | Android SDK Build-Tools 27.0.3 build-tools;28.0.0 | 28.0.0 | Android SDK Build-Tools 28 build-tools;28.0.1 | 28.0.1 | Android SDK Build-Tools 28.0.1 build-tools;28.0.2 | 28.0.2 | Android SDK Build-Tools 28.0.2 build-tools;28.0.3 | 28.0.3 | Android SDK Build-Tools 28.0.3 build-tools;29.0.0 | 29.0.0 | Android SDK Build-Tools 29 build-tools;29.0.1 | 29.0.1 | Android SDK Build-Tools 29.0.1 build-tools;29.0.2 | 29.0.2 | Android SDK Build-Tools 29.0.2 build-tools;29.0.3 | 29.0.3 | Android SDK Build-Tools 29.0.3 build-tools;30.0.0 | 30.0.0 | Android SDK Build-Tools 30 build-tools;30.0.1 | 30.0.1 | Android SDK Build-Tools 30.0.1 build-tools;30.0.2 | 30.0.2 | Android SDK Build-Tools 30.0.2 build-tools;30.0.3 | 30.0.3 | Android SDK Build-Tools 30.0.3 build-tools;31.0.0 | 31.0.0 | Android SDK Build-Tools 31 build-tools;32.0.0 | 32.0.0 | Android SDK Build-Tools 32 build-tools;32.1.0-rc1 | 32.1.0 rc1 | Android SDK Build-Tools 32.1-rc1 build-tools;33.0.0-rc2 | 33.0.0 rc2 | Android SDK Build-Tools 33-rc2 cmake;3.10.2.4988404 | 3.10.2 | CMake 3.10.2.4988404 cmake;3.18.1 | 3.18.1 | CMake 3.18.1 cmake;3.6.4111459 | 3.6.4111459 | CMake 3.6.4111459 cmdline-tools;1.0 | 1.0 | Android SDK Command-line Tools cmdline-tools;2.1 | 2.1 | Android SDK Command-line Tools cmdline-tools;3.0 | 3.0 | Android SDK Command-line Tools cmdline-tools;4.0 | 4.0 | Android SDK Command-line Tools cmdline-tools;5.0 | 5.0 | Android SDK Command-line Tools cmdline-tools;6.0 | 6.0 | Android SDK Command-line Tools cmdline-tools;latest | 6.0 | Android SDK Command-line Tools (latest) emulator | 31.2.8 | Android Emulator extras;android;m2repository | 47.0.0 | Android Support Repository extras;google;Android_Emulator_Hypervisor_Driver | 1.8.0 | Android Emulator Hypervisor Driver for AMD Processors (installer) extras;google;auto | 1.1 | Android Auto Desktop Head Unit Emulator extras;google;google_play_services | 49 | Google Play services extras;google;instantapps | 1.9.0 | Google Play Instant Development SDK extras;google;m2repository | 58 | Google Repository extras;google;market_apk_expansion | 1 | Google Play APK Expansion library extras;google;market_licensing | 1 | Google Play Licensing Library extras;google;simulators | 1 | Android Auto API Simulators extras;google;usb_driver | 13 | Google USB Driver extras;google;webdriver | 2 | Google Web Driver extras;intel;Hardware_Accelerated_Execution_Manager | 7.6.5 | Intel x86 Emulator Accelerator (HAXM installer) extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0 | 1 | Solver for ConstraintLayout 1.0.0 extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha4 | 1 | com.android.support.constraint:constraint-layout-solver:1.0.0-alpha4 extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-alpha8 | 1 | Solver for ConstraintLayout 1.0.0-alpha8 extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta1 | 1 | Solver for ConstraintLayout 1.0.0-beta1 extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta2 | 1 | Solver for ConstraintLayout 1.0.0-beta2 extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta3 | 1 | Solver for ConstraintLayout 1.0.0-beta3 extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta4 | 1 | Solver for ConstraintLayout 1.0.0-beta4 extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.0-beta5 | 1 | Solver for ConstraintLayout 1.0.0-beta5 extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.1 | 1 | Solver for ConstraintLayout 1.0.1 extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.2 | 1 | Solver for ConstraintLayout 1.0.2 extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0 | 1 | ConstraintLayout for Android 1.0.0 extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha4 | 1 | com.android.support.constraint:constraint-layout:1.0.0-alpha4 extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-alpha8 | 1 | ConstraintLayout for Android 1.0.0-alpha8 extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-beta1 | 1 | ConstraintLayout for Android 1.0.0-beta1 extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-beta2 | 1 | ConstraintLayout for Android 1.0.0-beta2 extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-beta3 | 1 | ConstraintLayout for Android 1.0.0-beta3 extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-beta4 | 1 | ConstraintLayout for Android 1.0.0-beta4 extras;m2repository;com;android;support;constraint;constraint-layout;1.0.0-beta5 | 1 | ConstraintLayout for Android 1.0.0-beta5 extras;m2repository;com;android;support;constraint;constraint-layout;1.0.1 | 1 | ConstraintLayout for Android 1.0.1 extras;m2repository;com;android;support;constraint;constraint-layout;1.0.2 | 1 | ConstraintLayout for Android 1.0.2 ndk-bundle | 22.1.7171670 | NDK ndk;16.1.4479499 | 16.1.4479499 | NDK (Side by side) 16.1.4479499 ndk;17.2.4988734 | 17.2.4988734 | NDK (Side by side) 17.2.4988734 ndk;18.1.5063045 | 18.1.5063045 | NDK (Side by side) 18.1.5063045 ndk;19.2.5345600 | 19.2.5345600 | NDK (Side by side) 19.2.5345600 ndk;20.0.5594570 | 20.0.5594570 | NDK (Side by side) 20.0.5594570 ndk;20.1.5948944 | 20.1.5948944 | NDK (Side by side) 20.1.5948944 ndk;21.0.6113669 | 21.0.6113669 | NDK (Side by side) 21.0.6113669 ndk;21.1.6352462 | 21.1.6352462 | NDK (Side by side) 21.1.6352462 ndk;21.2.6472646 | 21.2.6472646 | NDK (Side by side) 21.2.6472646 ndk;21.3.6528147 | 21.3.6528147 | NDK (Side by side) 21.3.6528147 ndk;21.4.7075529 | 21.4.7075529 | NDK (Side by side) 21.4.7075529 ndk;22.0.7026061 | 22.0.7026061 | NDK (Side by side) 22.0.7026061 ndk;22.1.7171670 | 22.1.7171670 | NDK (Side by side) 22.1.7171670 ndk;23.0.7599858 | 23.0.7599858 | NDK (Side by side) 23.0.7599858 ndk;23.1.7779620 | 23.1.7779620 | NDK (Side by side) 23.1.7779620 ndk;24.0.8215888 | 24.0.8215888 | NDK (Side by side) 24.0.8215888 patcher;v4 | 1 | SDK Patch Applier v4 platform-tools | 33.0.1 | Android SDK Platform-Tools platforms;android-10 | 2 | Android SDK Platform 10 platforms;android-11 | 2 | Android SDK Platform 11 platforms;android-12 | 3 | Android SDK Platform 12 platforms;android-13 | 1 | Android SDK Platform 13 platforms;android-14 | 4 | Android SDK Platform 14 platforms;android-15 | 5 | Android SDK Platform 15 platforms;android-16 | 5 | Android SDK Platform 16 platforms;android-17 | 3 | Android SDK Platform 17 platforms;android-18 | 3 | Android SDK Platform 18 platforms;android-19 | 4 | Android SDK Platform 19 platforms;android-20 | 2 | Android SDK Platform 20 platforms;android-21 | 2 | Android SDK Platform 21 platforms;android-22 | 2 | Android SDK Platform 22 platforms;android-23 | 3 | Android SDK Platform 23 platforms;android-24 | 2 | Android SDK Platform 24 platforms;android-25 | 3 | Android SDK Platform 25 platforms;android-26 | 2 | Android SDK Platform 26 platforms;android-27 | 3 | Android SDK Platform 27 platforms;android-28 | 6 | Android SDK Platform 28 platforms;android-29 | 5 | Android SDK Platform 29 platforms;android-30 | 3 | Android SDK Platform 30 platforms;android-31 | 1 | Android SDK Platform 31 platforms;android-32 | 1 | Android SDK Platform 32 platforms;android-7 | 3 | Android SDK Platform 7 platforms;android-8 | 3 | Android SDK Platform 8 platforms;android-9 | 2 | Android SDK Platform 9 platforms;android-Tiramisu | 2 | Android SDK Platform Tiramisu skiaparser;1 | 6 | Layout Inspector image server for API 29-30 skiaparser;2 | 3 | Layout Inspector image server for API S sources;android-15 | 2 | Sources for Android 15 sources;android-16 | 2 | Sources for Android 16 sources;android-17 | 1 | Sources for Android 17 sources;android-18 | 1 | Sources for Android 18 sources;android-19 | 2 | Sources for Android 19 sources;android-20 | 1 | Sources for Android 20 sources;android-21 | 1 | Sources for Android 21 sources;android-22 | 1 | Sources for Android 22 sources;android-23 | 1 | Sources for Android 23 sources;android-24 | 1 | Sources for Android 24 sources;android-25 | 1 | Sources for Android 25 sources;android-26 | 1 | Sources for Android 26 sources;android-27 | 1 | Sources for Android 27 sources;android-28 | 1 | Sources for Android 28 sources;android-29 | 1 | Sources for Android 29 sources;android-30 | 1 | Sources for Android 30 sources;android-31 | 1 | Sources for Android 31 system-images;android-10;default;armeabi-v7a | 5 | ARM EABI v7a System Image system-images;android-10;default;x86 | 5 | Intel x86 Atom System Image system-images;android-10;google_apis;armeabi-v7a | 6 | Google APIs ARM EABI v7a System Image system-images;android-10;google_apis;x86 | 6 | Google APIs Intel x86 Atom System Image system-images;android-14;default;armeabi-v7a | 2 | ARM EABI v7a System Image system-images;android-15;default;armeabi-v7a | 5 | ARM EABI v7a System Image system-images;android-15;default;x86 | 7 | Intel x86 Atom System Image system-images;android-15;google_apis;armeabi-v7a | 6 | Google APIs ARM EABI v7a System Image system-images;android-15;google_apis;x86 | 7 | Google APIs Intel x86 Atom System Image system-images;android-16;default;armeabi-v7a | 6 | ARM EABI v7a System Image system-images;android-16;default;mips | 1 | MIPS System Image system-images;android-16;default;x86 | 7 | Intel x86 Atom System Image system-images;android-16;google_apis;armeabi-v7a | 6 | Google APIs ARM EABI v7a System Image system-images;android-16;google_apis;x86 | 7 | Google APIs Intel x86 Atom System Image system-images;android-17;default;armeabi-v7a | 6 | ARM EABI v7a System Image system-images;android-17;default;mips | 1 | MIPS System Image system-images;android-17;default;x86 | 7 | Intel x86 Atom System Image system-images;android-17;google_apis;armeabi-v7a | 6 | Google APIs ARM EABI v7a System Image system-images;android-17;google_apis;x86 | 7 | Google APIs Intel x86 Atom System Image system-images;android-18;default;armeabi-v7a | 5 | ARM EABI v7a System Image system-images;android-18;default;x86 | 4 | Intel x86 Atom System Image system-images;android-18;google_apis;armeabi-v7a | 6 | Google APIs ARM EABI v7a System Image system-images;android-18;google_apis;x86 | 6 | Google APIs Intel x86 Atom System Image system-images;android-19;default;armeabi-v7a | 5 | ARM EABI v7a System Image system-images;android-19;default;x86 | 6 | Intel x86 Atom System Image system-images;android-19;google_apis;armeabi-v7a | 40 | Google APIs ARM EABI v7a System Image system-images;android-19;google_apis;x86 | 40 | Google APIs Intel x86 Atom System Image system-images;android-21;android-tv;armeabi-v7a | 3 | Android TV ARM EABI v7a System Image system-images;android-21;android-tv;x86 | 3 | Android TV Intel x86 Atom System Image system-images;android-21;default;armeabi-v7a | 4 | ARM EABI v7a System Image system-images;android-21;default;x86 | 5 | Intel x86 Atom System Image system-images;android-21;default;x86_64 | 5 | Intel x86 Atom_64 System Image system-images;android-21;google_apis;armeabi-v7a | 32 | Google APIs ARM EABI v7a System Image system-images;android-21;google_apis;x86 | 32 | Google APIs Intel x86 Atom System Image system-images;android-21;google_apis;x86_64 | 32 | Google APIs Intel x86 Atom_64 System Image system-images;android-22;android-tv;x86 | 3 | Android TV Intel x86 Atom System Image system-images;android-22;default;armeabi-v7a | 2 | ARM EABI v7a System Image system-images;android-22;default;x86 | 6 | Intel x86 Atom System Image system-images;android-22;default;x86_64 | 6 | Intel x86 Atom_64 System Image system-images;android-22;google_apis;armeabi-v7a | 26 | Google APIs ARM EABI v7a System Image system-images;android-22;google_apis;x86 | 26 | Google APIs Intel x86 Atom System Image system-images;android-22;google_apis;x86_64 | 26 | Google APIs Intel x86 Atom_64 System Image system-images;android-23;android-tv;armeabi-v7a | 12 | Android TV ARM EABI v7a System Image system-images;android-23;android-tv;x86 | 21 | Android TV Intel x86 Atom System Image system-images;android-23;default;armeabi-v7a | 6 | ARM EABI v7a System Image system-images;android-23;default;x86 | 10 | Intel x86 Atom System Image system-images;android-23;default;x86_64 | 10 | Intel x86 Atom_64 System Image system-images;android-23;google_apis;armeabi-v7a | 33 | Google APIs ARM EABI v7a System Image system-images;android-23;google_apis;x86 | 33 | Google APIs Intel x86 Atom System Image system-images;android-23;google_apis;x86_64 | 33 | Google APIs Intel x86 Atom_64 System Image system-images;android-24;android-tv;x86 | 22 | Android TV Intel x86 Atom System Image system-images;android-24;default;arm64-v8a | 7 | ARM 64 v8a System Image system-images;android-24;default;armeabi-v7a | 7 | ARM EABI v7a System Image system-images;android-24;default;x86 | 8 | Intel x86 Atom System Image system-images;android-24;default;x86_64 | 8 | Intel x86 Atom_64 System Image system-images;android-24;google_apis;arm64-v8a | 27 | Google APIs ARM 64 v8a System Image system-images;android-24;google_apis;x86 | 27 | Google APIs Intel x86 Atom System Image system-images;android-24;google_apis;x86_64 | 27 | Google APIs Intel x86 Atom_64 System Image system-images;android-24;google_apis_playstore;x86 | 19 | Google Play Intel x86 Atom System Image system-images;android-25;android-tv;x86 | 16 | Android TV Intel x86 Atom System Image system-images;android-25;android-wear-cn;armeabi-v7a | 4 | China version of Android Wear ARM EABI v7a System Image system-images;android-25;android-wear-cn;x86 | 4 | China version of Android Wear Intel x86 Atom System Image system-images;android-25;android-wear;armeabi-v7a | 3 | Android Wear ARM EABI v7a System Image system-images;android-25;android-wear;x86 | 3 | Android Wear Intel x86 Atom System Image system-images;android-25;default;x86 | 1 | Intel x86 Atom System Image system-images;android-25;default;x86_64 | 1 | Intel x86 Atom_64 System Image system-images;android-25;google_apis;arm64-v8a | 18 | Google APIs ARM 64 v8a System Image system-images;android-25;google_apis;armeabi-v7a | 18 | Google APIs ARM EABI v7a System Image system-images;android-25;google_apis;x86 | 18 | Google APIs Intel x86 Atom System Image system-images;android-25;google_apis;x86_64 | 18 | Google APIs Intel x86 Atom_64 System Image system-images;android-25;google_apis_playstore;x86 | 9 | Google Play Intel x86 Atom System Image system-images;android-26;android-tv;x86 | 14 | Android TV Intel x86 Atom System Image system-images;android-26;android-wear-cn;x86 | 4 | China version of Android Wear Intel x86 Atom System Image system-images;android-26;android-wear;x86 | 4 | Android Wear Intel x86 Atom System Image system-images;android-26;default;x86 | 1 | Intel x86 Atom System Image system-images;android-26;default;x86_64 | 1 | Intel x86 Atom_64 System Image system-images;android-26;google_apis;x86 | 16 | Google APIs Intel x86 Atom System Image system-images;android-26;google_apis;x86_64 | 16 | Google APIs Intel x86 Atom_64 System Image system-images;android-26;google_apis_playstore;x86 | 7 | Google Play Intel x86 Atom System Image system-images;android-27;android-tv;x86 | 9 | Android TV Intel x86 Atom System Image system-images;android-27;default;x86 | 1 | Intel x86 Atom System Image system-images;android-27;default;x86_64 | 1 | Intel x86 Atom_64 System Image system-images;android-27;google_apis;x86 | 11 | Google APIs Intel x86 Atom System Image system-images;android-27;google_apis_playstore;x86 | 3 | Google Play Intel x86 Atom System Image system-images;android-28;android-tv;x86 | 10 | Android TV Intel x86 Atom System Image system-images;android-28;android-wear-cn;x86 | 9 | China version of Wear OS Intel x86 Atom System Image system-images;android-28;android-wear;x86 | 9 | Wear OS Intel x86 Atom System Image system-images;android-28;default;arm64-v8a | 1 | ARM 64 v8a System Image system-images;android-28;default;x86 | 4 | Intel x86 Atom System Image system-images;android-28;default;x86_64 | 4 | Intel x86 Atom_64 System Image system-images;android-28;google_apis;arm64-v8a | 1 | Google APIs ARM 64 v8a System Image system-images;android-28;google_apis;x86 | 12 | Google APIs Intel x86 Atom System Image system-images;android-28;google_apis;x86_64 | 11 | Google APIs Intel x86 Atom_64 System Image system-images;android-28;google_apis_playstore;arm64-v8a | 1 | Google ARM64-V8a Play ARM 64 v8a System Image system-images;android-28;google_apis_playstore;x86 | 9 | Google Play Intel x86 Atom System Image system-images;android-28;google_apis_playstore;x86_64 | 8 | Google Play Intel x86 Atom_64 System Image system-images;android-29;android-tv;x86 | 3 | Android TV Intel x86 Atom System Image system-images;android-29;default;arm64-v8a | 8 | ARM 64 v8a System Image system-images;android-29;default;x86 | 8 | Intel x86 Atom System Image system-images;android-29;default;x86_64 | 8 | Intel x86 Atom_64 System Image system-images;android-29;google_apis;arm64-v8a | 12 | Google APIs ARM 64 v8a System Image system-images;android-29;google_apis;x86 | 12 | Google APIs Intel x86 Atom System Image system-images;android-29;google_apis;x86_64 | 12 | Google APIs Intel x86 Atom_64 System Image system-images;android-29;google_apis_playstore;x86 | 8 | Google Play Intel x86 Atom System Image system-images;android-29;google_apis_playstore;x86_64 | 8 | Google Play Intel x86 Atom_64 System Image system-images;android-30;android-tv;x86 | 3 | Android TV Intel x86 Atom System Image system-images;android-30;android-wear-cn;x86 | 10 | China version of Wear OS 3 - Preview Intel x86 Atom System Image system-images;android-30;android-wear;arm64-v8a | 10 | Wear OS 3 - Preview ARM 64 v8a System Image system-images;android-30;android-wear;x86 | 10 | Wear OS 3 - Preview Intel x86 Atom System Image system-images;android-30;default;arm64-v8a | 1 | ARM 64 v8a System Image system-images;android-30;default;x86_64 | 10 | Intel x86 Atom_64 System Image system-images;android-30;google-tv;x86 | 3 | Google TV Intel x86 Atom System Image system-images;android-30;google_apis;arm64-v8a | 11 | Google APIs ARM 64 v8a System Image system-images;android-30;google_apis;x86 | 10 | Google APIs Intel x86 Atom System Image system-images;android-30;google_apis;x86_64 | 11 | Google APIs Intel x86 Atom_64 System Image system-images;android-30;google_apis_playstore;x86 | 9 | Google Play Intel x86 Atom System Image system-images;android-30;google_apis_playstore;x86_64 | 10 | Google Play Intel x86 Atom_64 System Image system-images;android-31;android-tv;x86 | 3 | Android TV Intel x86 Atom System Image system-images;android-31;default;arm64-v8a | 3 | ARM 64 v8a System Image system-images;android-31;default;x86_64 | 3 | Intel x86 Atom_64 System Image system-images;android-31;google-tv;x86 | 3 | Google TV Intel x86 Atom System Image system-images;android-31;google_apis;arm64-v8a | 9 | Google APIs ARM 64 v8a System Image system-images;android-31;google_apis;x86_64 | 9 | Google APIs Intel x86 Atom_64 System Image system-images;android-31;google_apis_playstore;x86_64 | 9 | Google Play Intel x86 Atom_64 System Image system-images;android-32;google_apis;arm64-v8a | 3 | Google APIs ARM 64 v8a System Image system-images;android-32;google_apis;x86_64 | 3 | Google APIs Intel x86 Atom_64 System Image system-images;android-32;google_apis_playstore;x86_64 | 3 | Google Play Intel x86 Atom_64 System Image system-images;android-Tiramisu;google_apis;arm64-v8a | 2 | Google APIs ARM 64 v8a System Image system-images;android-Tiramisu;google_apis;x86_64 | 2 | Google APIs Intel x86 Atom_64 System Image system-images;android-Tiramisu;google_apis_playstore;x86_64 | 2 | Google Play Intel x86 Atom_64 System Image 安装 Android SDK 软件包 安装命令: sdkmanager &lt;packages&gt; 这里至少需要安装三个组件： platform-tools、 build-tools、 platforms 命令：./sdkmanager &quot;platform-tools&quot; &quot;build-tools;30.0.3&quot; &quot;platforms;android-34&quot; 说明: 不同版本的 Flutter SDK 要求的这三个组件的版本会有所不同, 如果不知道具体的版本需求, 可以按以上版本进行安装, 等项目运行时, Flutter 会自动下载正确的版本。 Flutter 3.16.x 需要 Android SDK Platform 33,命令可以更改为： ./sdkmanager &quot;platform-tools&quot; &quot;build-tools;30.0.3&quot; &quot;platforms;android-33&quot; Powershell窗口 执行情况如下所示： 123456789101112131415161718PS D:\\AppData\\Android\\Sdk\\cmdline-tools\\latest\\bin&gt; .\\sdkmanager.bat &quot;platform-tools&quot; &quot;build-tools;30.0.3&quot; &quot;platforms;android-34&quot;License android-sdk-license: ] 10% Computing updates...---------------------------------------Terms and ConditionsThis is the Android Software Development Kit License Agreement1. Introduction1.1 The Android Software Development Kit (referred to in the License Agreement as the &quot;SDK&quot; and specifically including the Android system files, packaged APIs, and Google APIs add-ons) is licensed to you subject to the terms of the License Agreement. The License Agreement forms a legally binding contract between you and Google in relation to your use of the SDK.&lt;中间是很长的协议条文, 省略&gt;January 16, 2019---------------------------------------Accept? (y/N): y[=======================================] 100% Unzipping... android-11/renderscr 检测 Flutter 环境 执行命令：flutter doctor -v, 执行效果如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546PS D:\\sources\\flutter_repos&gt; flutter doctor -v[√] Flutter (Channel stable, 3.7.0, on Microsoft Windows [Version 10.0.17763.316], locale zh-CN) • Flutter version 3.7.0 at C:\\Users\\Laohoo\\AppData\\Local\\Android\\flutter • Upstream repository https://github.com/flutter/flutter.git • Framework revision 7e9793dee1 (2 weeks ago), 2022-03-02 11:23:12 -0600 • Engine revision bd539267b4 • Dart version 2.19 • DevTools version 2.9.2[!] Android toolchain - develop for Android devices (Android SDK version 29.0.2) • Android SDK at C:\\Users\\Laohoo\\AppData\\Local\\Android\\Sdk • Platform android-33, build-tools 30.0.3 • ANDROID_HOME = C:\\Users\\Laohoo\\AppData\\Local\\Android\\Sdk • Java binary at: C:\\Users\\Laohoo\\AppData\\Local\\Android\\openJDK\\bin\\java • Java version OpenJDK Runtime Environment (build 11.0.11+9-b60-7590822) ! Some Android licenses not accepted. To resolve this, run: flutter doctor --android-licenses[X] Chrome - develop for the web (Cannot find Chrome executable at .\\Google\\Chrome\\Application\\chrome.exe) ! Cannot find Chrome. Try setting CHROME_EXECUTABLE to a Chrome executable.[X] Visual Studio - develop for Windows X Visual Studio not installed; this is necessary for Windows development. Download at https://visualstudio.microsoft.com/downloads/. Please install the &quot;Desktop development with C++&quot; workload, including all of its default components[!] Android Studio (not installed) • Android Studio not found; download from https://developer.android.com/studio/index.html (or visit https://flutter.dev/docs/get-started/install/windows#android-setup for detailed instructions).[√] VS Code, 64-bit edition (version 1.65.2) • VS Code at C:\\Program Files\\Microsoft VS Code • Flutter extension version 3.36.0[√] Connected device (2 available) • Windows (desktop) • windows • windows-x64 • Microsoft Windows [Version 10.0.17763.316] • Edge (web) • edge • web-javascript • Microsoft Edge 99.0.1150.46[!] HTTP Host Availability X HTTP host https://maven.google.com/ is not reachable. Reason: An error occurred while checking the HTTP host: 信号灯超时时间已到 X HTTP host https://cloud.google.com/ is not reachable. Reason: An error occurred while checking the HTTP host: 信号灯超时时间已到! Doctor found issues in 5 categories. 接受 Android 许可证 执行命令：flutter doctor --android-licenses, 所有问题回答: y 再次检测 flutter 环境 1234567891011121314151617181920212223242526272829303132333435363738394041424344PS D:\\sources\\flutter_repos&gt; flutter doctor -v[√] Flutter (Channel stable, 2.10.3, on Microsoft Windows [Version 10.0.17763.316], locale zh-CN) • Flutter version 2.10.3 at C:\\Users\\Laohoo\\AppData\\Local\\Android\\flutter • Upstream repository https://github.com/flutter/flutter.git • Framework revision 7e9793dee1 (2 weeks ago), 2022-03-02 11:23:12 -0600 • Engine revision bd539267b4 • Dart version 2.16.1 • DevTools version 2.9.2[√] Android toolchain - develop for Android devices (Android SDK version 29.0.2) • Android SDK at C:\\Users\\Laohoo\\AppData\\Local\\Android\\Sdk • Platform android-30, build-tools 29.0.2 • ANDROID_HOME = C:\\Users\\Laohoo\\AppData\\Local\\Android\\Sdk • Java binary at: C:\\Users\\Laohoo\\AppData\\Local\\Android\\openJDK\\bin\\java • Java version OpenJDK Runtime Environment (build 11.0.11+9-b60-7590822) • All Android licenses accepted.[X] Chrome - develop for the web (Cannot find Chrome executable at .\\Google\\Chrome\\Application\\chrome.exe) ! Cannot find Chrome. Try setting CHROME_EXECUTABLE to a Chrome executable.[X] Visual Studio - develop for Windows X Visual Studio not installed; this is necessary for Windows development. Download at https://visualstudio.microsoft.com/downloads/. Please install the &quot;Desktop development with C++&quot; workload, including all of its default components[!] Android Studio (not installed) • Android Studio not found; download from https://developer.android.com/studio/index.html (or visit https://flutter.dev/docs/get-started/install/windows#android-setup for detailed instructions).[√] VS Code, 64-bit edition (version 1.65.2) • VS Code at C:\\Program Files\\Microsoft VS Code • Flutter extension version 3.36.0[√] Connected device (2 available) • Windows (desktop) • windows • windows-x64 • Microsoft Windows [Version 10.0.17763.316] • Edge (web) • edge • web-javascript • Microsoft Edge 99.0.1150.46[☠] HTTP Host Availability (the doctor check crashed) X Due to an error, the doctor check did not complete. If the error message below is not helpful, please let us know about this issue at https://github.com/flutter/flutter/issues. X HandshakeException: Connection terminated during handshake •! Doctor found issues in 4 categories. Android toolchain(Android 工具链) 检测正常, 安装完成。 visual Studio Code 安装步骤省略; 雷电模拟器(不需要特别配置, 推荐)下载地址：https://www.ldmnq.com/ 夜神模拟器 安装配置步骤请参考：https://hujiyi.github.io/2021/12/04/flutter-development-environment-configuration/ 雷电模拟器、 夜神模拟器 或是 Android Studio 自带的模拟器, 只需要选择其中任意一个就可以。","categories":[{"name":"flutter","slug":"flutter","permalink":"https://hujiyi.github.io/categories/flutter/"}],"tags":[{"name":"flutter","slug":"flutter","permalink":"https://hujiyi.github.io/tags/flutter/"},{"name":"command-line tools","slug":"command-line-tools","permalink":"https://hujiyi.github.io/tags/command-line-tools/"}]},{"title":"利用通道更换证件照的底色","slug":"using-channel-replace-the-background","date":"2022-02-27T14:34:25.000Z","updated":"2022-10-11T01:40:13.298Z","comments":true,"path":"2022/02/27/using-channel-replace-the-background/","permalink":"https://hujiyi.github.io/2022/02/27/using-channel-replace-the-background/","excerpt":"","text":"(目前只记录大概步骤，有空认真做一次再重新写) 很多年前偶尔用过一两次 Photoshop, 不过久了那些操作又忘记了, 所以这里记录一下, 感觉这次操作的效果没有以前的好, 可是以前那个教程的网站已经挂了，也只能将就了。 打开照片 在通道中选择反差最大的一个通道, 复制通道 调整色阶, 加大反差效果 添加图层 菜单： 图像 -&gt; 应用图像; 通道: 选择之前步骤复制好的副本; 混合: 正片叠底. 添加蒙板 点击新图层 填充颜色 点击蒙板, 用黑、白颜色 画笔 处理边缘","categories":[{"name":"photoshop","slug":"photoshop","permalink":"https://hujiyi.github.io/categories/photoshop/"}],"tags":[{"name":"photoshop","slug":"photoshop","permalink":"https://hujiyi.github.io/tags/photoshop/"}]},{"title":"学习笔记：使用 Cocos Creator 3.4.0 开发空战游戏 08(完)——粒子和血条","slug":"develop-an-airplane-game-in-cocos-creator-08","date":"2022-02-05T03:01:57.000Z","updated":"2022-10-11T01:40:13.141Z","comments":true,"path":"2022/02/05/develop-an-airplane-game-in-cocos-creator-08/","permalink":"https://hujiyi.github.io/2022/02/05/develop-an-airplane-game-in-cocos-creator-08/","excerpt":"","text":"开发工具 Cocos Dashboard 1.0.20 Cocos Creator 3.4.0 Visual Studio Code 1.63 Microsoft Edge 97.0.1072.69 游戏配套素材资源下载：游戏开发配套素材资源 导入特效资源 下载并解压游戏配套资源, res/particle package/ 文件夹包含已经制作好的一些特效资源 1234567891011.|-- audio|-- effect|-- particle package| |-- ball.zip --- 场景装饰：星球 | |-- cloudStars.zip --- 场景装饰：背景云层特效 | |-- explode.zip --- 玩家飞机爆炸粒子特效 | |-- explodeSmall.zip --- 敌人飞机爆炸粒子特效 | |-- stone.zip --- 场景装饰：石头 | `-- tailFlame.zip --- 玩家飞机喷气特效 `-- texture 导入资源, 在 资源管理器 点击选中 assets 文件夹, 右键 -&gt; 导入资源包, 分三次导入explode.zip、 explodeSmall.zip、 tailFlame.zip 三个资源包。 导入后如果报错, 删除 资源管理器 中对应资源的文件夹 tailFlame、explode(导入的资源包与原有资源重复), 删除 项目文件夹 下的 Libary 文件夹, 重启 编辑器, 刷新 资源。 玩家飞机喷射的尾焰 在 资源管理器 拖动预制 assets/res/effect/tailFlame/tailFlame 到 层级管理器 的 playerPlane 节点，沿 Z轴 向下拖动的玩家飞机尾部。 在 层级管理器 点击选中 playerPlane/tailFlame/flame01 节点, 修改 Scale(缩放) 属性的值为 X:8, Y:8, Z:8, 放大 8倍。 在 层级管理器 点击选中 playerPlane/tailFlame/flarecore04 节点, 修改 Scale(缩放) 属性的值为 X:8, Y:8, Z:8, 放大 8倍; 再沿 Z轴 方向适当拖动, 调整火焰形状(这一步可以省略)。 玩家飞机爆炸特效 在 资源管理器 拖动预制 assets/res/effect/explode/explode 到 层级管理器 的 playerPlane 节点。 将 层级管理器 中 playerPlane/explode 的 所有子节点 的 Scale(缩放) 属性的值都改为 X:4, Y:4, Z:4, 放大 4倍。 编辑 PlayerPlane 脚本, 控制玩家飞机死亡时播放爆炸效果 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import &#123; _decorator, Component, Node, Collider, ITriggerEvent, AudioSource &#125; from &#x27;cc&#x27;;import &#123; Constant &#125; from &#x27;../framework/Constant&#x27;;const &#123; ccclass, property &#125; = _decorator;@ccclass(&#x27;PlayerPlane&#x27;)export class PlayerPlane extends Component &#123; @property(Node) public explode: Node = null; // 玩家飞机爆炸效果 public lifeValue = 5; //玩家飞机生命 public isDie = false; private _currLife = 0; private _audioSource: AudioSource = null; onEnable() &#123; // 获取碰撞组件 const collider = this.getComponent(Collider); // 监听触发事件 collider.on(&#x27;onTriggerEnter&#x27;, this._onTriggerEnter, this); &#125; onDisable() &#123; const collider = this.getComponent(Collider); // 停止监听触发事件 collider.off(&#x27;onTriggerEnter&#x27;, this._onTriggerEnter, this); &#125; start() &#123; this._audioSource = this.getComponent(AudioSource); &#125; public init() &#123; this._currLife = this.lifeValue; this.isDie = false; this.explode.active = false; // 初始化玩家飞机爆炸效果 &#125; private _onTriggerEnter(event: ITriggerEvent) &#123; // 获取分组 const collisionGroup = event.otherCollider.getGroup(); // 遇到敌方飞机或敌方子弹，玩家飞机掉血 if (collisionGroup === Constant.CollistionType.ENEMY_PLANE || collisionGroup === Constant.CollistionType.ENEMY_BULLET) &#123; // 现在玩家飞机发生碰撞只在控制台输出文件 this._currLife--; console.log(&#x27;player plane reduce blood:&#x27;, this._currLife); if (this._currLife &lt;= 0) &#123; this.isDie = true; this.explode.active = true; // 播放玩家飞机爆炸效果 this._audioSource.play(); &#125; &#125; &#125;&#125; 将 层级管理器 点击选中 playerPlane/explode 节点，在属性检查器中将 explode 名字前面的 ✓ 去掉, 否则玩家飞机一开始就会显示爆炸特效。 将 层级管理器 点击选中 playerPlane 节点, 将 playerPlane/explode 节点拖动到 属性检查器 中对应的位置, 如下图所示: 敌人飞机爆炸特效 在 资源管理器 双击打开 assets/res/effect/explode/explodeSmall 预制, 将其 所有子节点 的 Scale(缩放) 属性的值都改为 X:6, Y:6, Z:6, 放大 6倍, 保存 预制。 敌人飞机爆炸直接在代码中进行控制, 编辑 GameManager 脚本。 添加爆炸预览的属性 enemyExplode 定义 添加播放爆炸效果的方法 createEnemyEffect 12345678910111213@property(Prefab)public enemyExplode: Prefab = null; // 敌机爆炸预览// 播放敌机爆炸效果public createEnemyEffect(pos: Vec3) &#123; let effect = instantiate(this.enemyExplode); effect.parent = this.node; console.log(&#x27;createEnemyEffect: &#x27;, effect); effect.setPosition(pos); &#125; 编辑 enemyPlane 脚本, 敌机销毁时播放爆炸特效 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778import &#123; _decorator, Component, Node, Collider, ITriggerEvent &#125; from &#x27;cc&#x27;;import &#123; Constant &#125; from &#x27;../framework/Constant&#x27;;import &#123; GameManager &#125; from &#x27;../framework/GameManager&#x27;;const &#123; ccclass, property &#125; = _decorator;// 敌机被销毁的位置(超出屏幕下边沿后的Z轴坐标值)const OUTOFBOUNCE = 50;@ccclass(&#x27;EnemyPlane&#x27;)export class EnemyPlane extends Component &#123; @property public createBulletTime = 0.5; // 敌机子弹发射周期 private _enemySpeed = 0; private _needBullet = false; // 敌机是否发射子弹 private _currCreateBulletTime = 0; // 敌机当前子弹发射周期 private _gameManager: GameManager = null; onEnable() &#123; // 获取碰撞组件 const collider = this.getComponent(Collider); // 监听触发事件 collider.on(&#x27;onTriggerEnter&#x27;, this._onTriggerEnter, this); &#125; onDisable() &#123; // 获取碰撞组件 const collider = this.getComponent(Collider); // 停止监听触发事件 collider.off(&#x27;onTriggerEnter&#x27;, this._onTriggerEnter, this); &#125; private _onTriggerEnter(event: ITriggerEvent) &#123; // 获取分组 const collisionGroup = event.otherCollider.getGroup(); // 遇到玩家飞机或子弹，敌人飞机销毁 if (collisionGroup === Constant.CollistionType.PLAYER_PLANE || collisionGroup === Constant.CollistionType.PLAYER_BULLET) &#123; console.log(&#x27;trigger enemy destroy&#x27;); this._gameManager.playAudioEffect(&#x27;enemy&#x27;); // 播放声音 this.node.destroy(); // 敌机爆炸 this._gameManager.createEnemyEffect(this.node.position); this._gameManager.addScore(); // 分数增加 &#125; &#125; update(deltaTime: number) &#123; const pos = this.node.position; // 敌机向下飞 pos.z 值要增加 let movePos = pos.z + this._enemySpeed; // 增加用于判断是否要发射子弹 if (this._needBullet) &#123; this._currCreateBulletTime += deltaTime; if (this._currCreateBulletTime &gt; this.createBulletTime) &#123; // 敌机发射子弹，需要在 GameManager 添加相应函数 // this.node.position 是发射子弹时敌机的位置 this._gameManager.createEnemyBullet(this.node.position); this._currCreateBulletTime = 0; &#125; &#125; this.node.setPosition(pos.x, pos.y, movePos); if (movePos &gt; OUTOFBOUNCE) &#123; this.node.destroy(); &#125; &#125; show(gameManager: GameManager, speed: number, needBullet: boolean = false) &#123; this._gameManager = gameManager; this._enemySpeed = speed; this._needBullet = needBullet; &#125;&#125; 在 资源管理器 的 script 文件夹添加脚本 Explode, 使用定时器 1秒 后销毁爆炸效果 1234567891011121314151617import &#123; _decorator, Component, Node &#125; from &#x27;cc&#x27;;const &#123; ccclass, property &#125; = _decorator;@ccclass(&#x27;Explode&#x27;)export class Explode extends Component &#123; onEnable()&#123; // 1秒后回收敌机爆炸效果 this.scheduleOnce(this._putBack, 1); &#125; private _putBack() &#123; this.node.destroy(); &#125;&#125; 在 资源管理器 双击打开 assets/res/effect/explode/explodeSmall 预制, 在 属性检查器 中点击 添加组件 -&gt; 自定义脚本 -&gt; Explode, 绑定脚本。 在 层级管理器 点击选中 gameManager 节点, 添加 explodeSmall 预制到对应的属性。 保存 场景, 运行预览。 玩家飞机血条 在 层级管理器 点击选中 playerPlane 节点, 右键 -&gt; 创建 -&gt; 空节点, 命名为 blood; 点击选中 blood节点, 右键 -&gt; 创建 -&gt; 3D对象 -&gt; Quad(四方形), 命名为 bg, 在 属性检查器 中将 Rotation 的值修改为 X:-90, Y:0, Z:0, 沿 X轴 旋转, Scale 属性的值修改为 x:1, Y:0.2, Z:1, 变成长条形状。 再次点击选中 blood节点, 右键 -&gt; 创建 -&gt; 3D对象 -&gt; Quad(四方形), 命名为 face。在 属性检查器 中将 Position 的值修改为X:0, Y:0.1, Z:0, 让血条比背景 高出 一点点; Rotation 的值修改为 X:-90, Y:0, Z:0, 沿 X轴 旋转; Scale 属性的值修改为 x:1, Y:0.2, Z:1, 变成长条形状。 在 层级管理器 点击选中 playerPlane/blood 节点, 沿 Z轴 向下拖动到飞机尾部, 修改 Scale(缩放) 属性的值为 X:8, Y:1, Z: 3, 缩放为 长条形状。 在 资源管理器 的 assets/res/texture/ 文件夹下 创建 两个材质, 分别命名为 fightBoxBlood02a 和 fightBoxBlood02b, Effect 属性的值更改为 builtin-unlit, USETEXTURE 打勾, MainTexture 分别拖入图片 fightBoxBlood02a 和 fightBoxBlood02b, 保存 材质。 分别将材质 fightBoxBlood02a 和 fightBoxBlood02b 添加到 playerPlane/blood 节点的子节点 bg 和 face 中。 在 层级管理器 点击选中 playerPlane/blood 节点, 右键 -&gt; 创建 -&gt; 空节点, 命名为 face, 将之前血条前景的 face 拖到这个 新建 的 空节点 下。 在 层级管理器 点击选中 playerPlane/blood/face/face 节点, 沿 X轴向右拖动 到血条的一半位置。(Position X: 0.5) 在 层级管理器 点击选中前一步骤的父节点 playerPlane/blood/face, 沿 X轴向左拖动 到与背景重叠。(Position X: -0.5) 使用步骤 7、8 是因为直接减少血条前景对象是 3D 对象是由两边向中间同时减少的，所以通过以上步骤实现血条由右向左减少。 在 层级管理器 点击选中 playerPlane/blood 节点, 在其 属性检查器 把名字 blood 左边的 ✓ 去掉, 默认不显示血条。 在 层级管理器 点击选中 playerPlane 节点, 将 血条根节点和 血条 添加到对应的属性中。 编辑玩家飞机脚本 PlayerPlane, 控制血条的显示 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667import &#123; _decorator, Component, Node, Collider, ITriggerEvent, AudioSource &#125; from &#x27;cc&#x27;;import &#123; Constant &#125; from &#x27;../framework/Constant&#x27;;const &#123; ccclass, property &#125; = _decorator;@ccclass(&#x27;PlayerPlane&#x27;)export class PlayerPlane extends Component &#123; @property(Node) public explode: Node = null; // 玩家飞机爆炸效果 @property(Node) public bloodFace: Node = null; // 玩家血条 @property(Node) public blood: Node = null; // 血量根节点 public lifeValue = 5; //玩家飞机生命 public isDie = false; private _currLife = 0; private _audioSource: AudioSource = null; onEnable() &#123; // 获取碰撞组件 const collider = this.getComponent(Collider); // 监听触发事件 collider.on(&#x27;onTriggerEnter&#x27;, this._onTriggerEnter, this); &#125; onDisable() &#123; const collider = this.getComponent(Collider); // 停止监听触发事件 collider.off(&#x27;onTriggerEnter&#x27;, this._onTriggerEnter, this); &#125; start() &#123; this._audioSource = this.getComponent(AudioSource); &#125; public init() &#123; this._currLife = this.lifeValue; this.isDie = false; this.explode.active = false; // 初始化玩家飞机爆炸效果 this.bloodFace.setScale(1, 1, 1); // 血条初始化 &#125; private _onTriggerEnter(event: ITriggerEvent) &#123; // 获取分组 const collisionGroup = event.otherCollider.getGroup(); // 遇到敌方飞机或敌方子弹，玩家飞机掉血 if (collisionGroup === Constant.CollistionType.ENEMY_PLANE || collisionGroup === Constant.CollistionType.ENEMY_BULLET) &#123; if(this._currLife ===this.lifeValue)&#123; this.blood.active = true; // 第一次被攻击后才显示玩家飞机血条 &#125; this._currLife--; this.bloodFace.setScale(this._currLife / this.lifeValue, 1, 1); // 血条减少 console.log(&#x27;player plane reduce blood:&#x27;, this._currLife); if (this._currLife &lt;= 0) &#123; this.isDie = true; this.explode.active = true; // 播放玩家飞机爆炸效果 this.blood.active = false; // 不显示血条 this._audioSource.play(); &#125; &#125; &#125;&#125; 保存场景, 运行预览。 &#x3D;&#x3D;&#x3D;全部完成&#x3D;&#x3D;&#x3D;","categories":[{"name":"cocos creator","slug":"cocos-creator","permalink":"https://hujiyi.github.io/categories/cocos-creator/"}],"tags":[{"name":"cocos creator","slug":"cocos-creator","permalink":"https://hujiyi.github.io/tags/cocos-creator/"},{"name":"game","slug":"game","permalink":"https://hujiyi.github.io/tags/game/"}]},{"title":"学习笔记：使用 Cocos Creator 3.4.0 开发空战游戏 07——游戏音效","slug":"develop-an-airplane-game-in-cocos-creator-07","date":"2022-02-04T08:48:03.000Z","updated":"2022-10-11T01:40:13.141Z","comments":true,"path":"2022/02/04/develop-an-airplane-game-in-cocos-creator-07/","permalink":"https://hujiyi.github.io/2022/02/04/develop-an-airplane-game-in-cocos-creator-07/","excerpt":"","text":"开发工具 Cocos Dashboard 1.0.20 Cocos Creator 3.4.0 Visual Studio Code 1.63 Microsoft Edge 97.0.1072.69 音频 在 层级管理器 创建名为 audio 的 空节点, 然后在 audio 节点上再创建一个 空节点，命名为 bgm(backgroundmusic), 点击选中 bgm 节点, 在 属性检查器 点击 添加组件 按钮, 选择 Audio -&gt; AudioSource, 将 资源管理器 中的 assets/res/audio/music/bgm 拖动到 bgm 节点的 Clip 属性中, 选中 Loop 和 PlayOnAwake 两个属性, Volume 属性的值改为 0.8。 在 层级管理器 点击选中 plane01 节点, 在其 属性检查器 点击 添加组件 按钮, 选择 Audio -&gt; AudioSource, 将 资源管理器 中的 assets/res/audio/sound/player 拖动到其 Clip 属性中, 取消 选中 Loop 和 PlayOnAwake 两个属性。 在 资源管理器 点击选中 assets/script/framework 文件夹，右键 -&gt; 创建 -&gt; 脚本(TypeScript), 命名为 AudioManager, 脚本文件暂时不用编辑内容。 在 层级管理器 点击选中 audio 节点, 右键 -&gt; 创建 -&gt; 空节点, 命名为 effect, 在其 属性检查器 点击 添加组件 按钮, 选择 Audio -&gt; AudioSource; 再点击一次 添加组件 按钮, 选择 自定义脚本 -&gt; AudioManager。 编辑脚本 AudioManager 1234567891011121314151617181920212223242526272829303132333435import &#123; _decorator, Component, Node, AudioClip, AudioSource &#125; from &#x27;cc&#x27;;const &#123; ccclass, property &#125; = _decorator;interface IAudioMap &#123; [name: string]: AudioClip;&#125;@ccclass(&#x27;AudioManager&#x27;)export class AudioManager extends Component &#123; @property([AudioClip]) public audioList: AudioClip[] = []; private _dict: IAudioMap = &#123;&#125;; private _audioSource: AudioSource = null; start() &#123; for (let i = 0; i &lt; this.audioList.length; i++) &#123; const element = this.audioList[i]; this._dict[element.name] = element; &#125; console.log(&#x27;sound: &#x27;, this._dict); this._audioSource = this.getComponent(AudioSource)!; &#125; public play(name: string) &#123; let audioClip = this._dict[name]; if (audioClip !== undefined) &#123; console.log(&#x27;play audio:&#x27;, audioClip.name); this._audioSource.playOneShot(audioClip); &#125; &#125;&#125; 编辑 GameManager 脚本, 添加对 AudioManager 进行管理的代码: 添加属性 添加方法 playAudioEffect() 更新方法: update() 完整代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432import &#123; _decorator, Component, Node, Prefab, instantiate, math, Vec3, BoxCollider, Label, Animation, macro &#125; from &#x27;cc&#x27;;import &#123; Bullet &#125; from &#x27;../bullet/Bullet&#x27;;import &#123; BulletProp &#125; from &#x27;../bullet/BulletProp&#x27;;import &#123; EnemyPlane &#125; from &#x27;../plane/EnemyPlane&#x27;;import &#123; PlayerPlane &#125; from &#x27;../plane/PlayerPlane&#x27;;import &#123; AudioManager &#125; from &#x27;./AudioManager&#x27;;import &#123; Constant &#125; from &#x27;./Constant&#x27;;const &#123; ccclass, property &#125; = _decorator;@ccclass(&#x27;GameManager&#x27;)export class GameManager extends Component &#123; @property(PlayerPlane) public playerPlane: PlayerPlane = null; // 玩家飞机 @property(Prefab) public bullet01: Prefab = null; // 子弹1 @property(Prefab) public bullet02: Prefab = null; // 子弹2 @property(Prefab) public bullet03: Prefab = null; // 子弹3 @property(Prefab) public bullet04: Prefab = null; // 子弹4 @property(Prefab) public bullet05: Prefab = null; // 子弹5 @property public shootTime = 0.3; // 射击周期（间隔时间） @property public bulletSpeed = 1; // 子弹速度 @property(Node) public bulletRoot: Node = null; // 子弹管理节点 // 敌机 @property(Prefab) public enemy01: Prefab = null; // 敌机1 @property(Prefab) public enemy02: Prefab = null; // 敌机2 @property public createEnemyTime = 1; // 敌机生成时间 @property public enemy01Speed = 0.5; // 敌机1速度 @property public enemy02Speed = 0.7; // 敌机2速度 // 子弹类型道具 @property(Prefab) public bulletPropM: Prefab = null; @property(Prefab) public bulletPropH: Prefab = null; @property(Prefab) public bulletPropS: Prefab = null; @property public bulletPropSpeed = 0.3; // 子弹类型道具速度 // ui @property(Node) public gamePage: Node = null; @property(Node) public gameOverPage: Node = null; @property(Label) public gameScore: Label = null; @property(Label) public gameOverScore: Label = null; @property(Animation) public overAnimation: Animation = null; // Animation 要手工添加导入 // audio @property(AudioManager) public audioEffect: AudioManager = null; public isGameStart = false; private _currShootTime = 0; private _isShooting = false; private _currCreateEnemyTiime = 0; // 当前敌机的生成时间 private _combinationInterval = Constant.Combination.PLAN1; // 组合的间隔状态 private _bulletType = Constant.BulletPropType.BULLET_M; // 子弹道具类型 private _score: number = 0; start() &#123; this._init(); &#125; update(deltaTime: number) &#123; if (!this.isGameStart) &#123; return; &#125; if (this.playerPlane.isDie) &#123; this.gameOver(); return; &#125; this._currShootTime += deltaTime; if (this._isShooting &amp;&amp; this._currShootTime &gt; this.shootTime) &#123; // 判断子弹道具的类型 if (this._bulletType === Constant.BulletPropType.BULLET_H) &#123; this.createPlayerBulletH(); &#125; else if (this._bulletType === Constant.BulletPropType.BULLET_S) &#123; this.createPlayerBulletS(); &#125; else &#123; this.createPlayerBulletM(); &#125; // 子弹的音效，用除2的余数得到名字后面的数字字符 let name = &#x27;bullet&#x27; + (this._bulletType % 2 + 1); console.log(&#x27;player shooting: &#x27;,name); this.playAudioEffect(name); this._currShootTime = 0; &#125; this._currCreateEnemyTiime += deltaTime; // 判断组合方式创建相应的敌机 if (this._combinationInterval === Constant.Combination.PLAN1) &#123; if (this._currCreateEnemyTiime &gt; this.createEnemyTime) &#123; this.createEnemyPlane(); this._currCreateEnemyTiime = 0; &#125; &#125; else if (this._combinationInterval === Constant.Combination.PLAN2) &#123; // 第二阶段，前两种组合随机出现 // 这里乘以 0.9 是缩短敌机出现的间隔时间 if (this._currCreateEnemyTiime &gt; this.createEnemyTime * 0.9) &#123; // 用于随机出现组合1或组合2 const randomCombination = math.randomRangeInt(1, 6); if (randomCombination === Constant.Combination.PLAN2) &#123; this.createCombination01(); &#125; else &#123; this.createEnemyPlane(); &#125; this._currCreateEnemyTiime = 0; &#125; &#125; else &#123; // 第三阶段，三个组合随机出现 // 这里乘以 0.9 是缩短敌机出现的间隔时间 if (this._currCreateEnemyTiime &gt; this.createEnemyTime * 0.8) &#123; // 用于随机出现组合1或组合2 const randomCombination = math.randomRangeInt(1, 7); if (randomCombination === Constant.Combination.PLAN2) &#123; this.createCombination01(); &#125; else if (randomCombination === Constant.Combination.PLAN3) &#123; this.createCombination02(); &#125; else &#123; this.createEnemyPlane(); &#125; this._currCreateEnemyTiime = 0; &#125; &#125; &#125; //创建玩家飞机的子弹 public createPlayerBulletM() &#123; // 实例材质类型的子弹, 实例出来的对象不在场景中 const bullet = instantiate(this.bullet01); bullet.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 let pos = this.playerPlane.node.position; // 获取玩家飞机位置 // 子弹出现的位置为飞机 Z轴 -7 bullet.setPosition(pos.x, pos.y, pos.z - 7); // 获取 Bullet类 （子弹预制根节点添加 Bullet 脚本） const bulletComp = bullet.getComponent(Bullet); bulletComp.show(this.bulletSpeed, false); // 设置子弹速度 &#125; // S型子弹为前方同时发射两颗 public createPlayerBulletH() &#123; let pos = this.playerPlane.node.position; // 获取玩家飞机位置 // 左边的子弹 const bullet1 = instantiate(this.bullet03); bullet1.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 // 子弹出现的位置为飞机 Z轴 -7 bullet1.setPosition(pos.x - 2.5, pos.y, pos.z - 7); // 获取 Bullet 组件 （脚本类） const bulletComp1 = bullet1.getComponent(Bullet); // bulletComp.bulletSpeed = this.bulletSpeed; // 设置子弹速度 bulletComp1.show(this.bulletSpeed, false); // 玩家飞机的子弹速度 // 右边的子弹 const bullet2 = instantiate(this.bullet03); bullet2.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 // 子弹出现的位置为飞机 Z轴 -7 bullet2.setPosition(pos.x + 2.5, pos.y, pos.z - 7); // 获取 Bullet 组件 （脚本类） const bulletComp2 = bullet2.getComponent(Bullet); // bulletComp.bulletSpeed = this.bulletSpeed; // 设置子弹速度 bulletComp2.show(this.bulletSpeed, false); // 玩家飞机的子弹速度 &#125; // S型子弹为三发 public createPlayerBulletS() &#123; let pos = this.playerPlane.node.position; // 获取玩家飞机位置 // 中间子弹 const bullet1 = instantiate(this.bullet05); bullet1.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 // 子弹出现的位置为飞机 Z轴 -7 bullet1.setPosition(pos.x, pos.y, pos.z - 7); // 获取 Bullet 组件 （脚本类） const bulletComp1 = bullet1.getComponent(Bullet); // bulletComp.bulletSpeed = this.bulletSpeed; // 设置子弹速度 bulletComp1.show(this.bulletSpeed, false); // 玩家飞机的子弹速度 // 左边子弹 const bullet2 = instantiate(this.bullet05); bullet2.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 // 子弹出现的位置为飞机 Z轴 -7 bullet2.setPosition(pos.x - 4, pos.y, pos.z - 7); // 获取 Bullet 组件 （脚本类） const bulletComp2 = bullet2.getComponent(Bullet); // bulletComp.bulletSpeed = this.bulletSpeed; // 设置子弹速度 bulletComp2.show(this.bulletSpeed, false, Constant.Direction.LEFT); // 玩家飞机的子弹速度 // 右边子弹 const bullet3 = instantiate(this.bullet05); bullet3.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 // 子弹出现的位置为飞机 Z轴 -7 bullet3.setPosition(pos.x + 4, pos.y, pos.z - 7); // 获取 Bullet 组件 （脚本类） const bulletComp3 = bullet3.getComponent(Bullet); // bulletComp.bulletSpeed = this.bulletSpeed; // 设置子弹速度 bulletComp3.show(this.bulletSpeed, false, Constant.Direction.RIGHT); // 玩家飞机的子弹速度 &#125; // 是否处理触摸状态，触摸才发射子弹 public isShooting(value: boolean) &#123; this._isShooting = value; &#125; public createEnemyPlane() &#123; // math 是 cc 带的数字模块 const whichEnemy = math.randomRangeInt(1, 3); let prefab: Prefab = null; let speed = 0; if (whichEnemy === Constant.EnemyType.TYPE1) &#123; prefab = this.enemy01; speed = this.enemy01Speed; &#125; else &#123; prefab = this.enemy02; speed = this.enemy02Speed; &#125; // 实例化预制 const enemy = instantiate(prefab); enemy.setParent(this.node); // 预制挂载到组件中 const enemyComp = enemy.getComponent(EnemyPlane); enemyComp.show(this, speed, true); // 敌机随机出现的X轴(左右)坐标范围 const randomPos = math.randomRangeInt(-25, 26); enemy.setPosition(randomPos, 0, -50); &#125; // 敌机出现组合1：5架飞机一字型同时出现 public createCombination01() &#123; const enemyArray = new Array&lt;Node&gt;(5); for (let i = 0; i &lt; enemyArray.length; i++) &#123; enemyArray[i] = instantiate(this.enemy01); const element = enemyArray[i]; element.parent = this.node; element.setPosition(-20 + i * 10, 0, -50); const enemyComp = element.getComponent(EnemyPlane); enemyComp.show(this, this.enemy01Speed, false); &#125; &#125; // 敌机出现组合1, 7架飞机V字型出现 public createCombination02() &#123; const enemyArray = new Array&lt;Node&gt;(7); // 7 架敌机的初始坐标 const combinationPos = [ -21, 0, -60, -14, 0, -55, -7, 0, -50, 0, 0, -45, 7, 0, -50, 14, 0, -55, 21, 0, -60, ]; for (let i = 0; i &lt; enemyArray.length; i++) &#123; enemyArray[i] = instantiate(this.enemy02); const element = enemyArray[i]; element.parent = this.node; const startIndex = i * 3; element.setPosition(combinationPos[startIndex], combinationPos[startIndex + 1], combinationPos[startIndex + 2]); const enemyComp = element.getComponent(EnemyPlane); enemyComp.show(this, this.enemy02Speed, false); &#125; &#125; // 敌机发射子弹 public createEnemyBullet(targetPos: Vec3) &#123; // 实例材质类型的子弹, 实例出来的对象不在场景中 const bullet = instantiate(this.bullet01); bullet.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 // 子弹出现的位置为飞机 Z轴 -7 bullet.setPosition(targetPos.x, targetPos.y, targetPos.z + 6); const bulletComp = bullet.getComponent(Bullet); // 敌机的子弹速度 要比敌机大一些 bulletComp.show(1, true); // 获取子弹的碰撞器组件 const colliderComp = bullet.getComponent(BoxCollider); // 设置敌机子弹的碰撞矩阵 colliderComp.setGroup(Constant.CollistionType.ENEMY_BULLET); // 设置碰撞掩码 与 玩家飞机 碰撞 colliderComp.setMask(Constant.CollistionType.PLAYER_PLANE); &#125; // 更换玩家子弹类型 public changeBulletType(type: number) &#123; this._bulletType = type; &#125; // 创建子弹道具 public createBulletProp() &#123; const randomProp = math.randomRangeInt(1, 4); console.log(&#x27;create bullet prop:&#x27;, randomProp); let prefab: Prefab = null; if (randomProp === Constant.BulletPropType.BULLET_H) &#123; prefab = this.bulletPropH; &#125; else if (randomProp === Constant.BulletPropType.BULLET_S) &#123; prefab = this.bulletPropS; &#125; else &#123; prefab = this.bulletPropM; &#125; // 实例化子弹道具预览 const prop = instantiate(prefab); prop.setParent(this.node); // const prop = PoolManager.instance().getNode(prefab, this.node); prop.setPosition(15, 0, -50); // 道具的起始位置 const propComp = prop.getComponent(BulletProp); propComp.show(this, -this.bulletPropSpeed); &#125; public returnMain() &#123; this._currShootTime = 0; this._currCreateEnemyTiime = 0; // 当前敌机的生成时间 this._combinationInterval = Constant.Combination.PLAN1; // 组合的间隔状态 this._bulletType = Constant.BulletPropType.BULLET_M; this.playerPlane.node.setPosition(0, 0, 15); this._score = 0; &#125; public gameReStart() &#123; this.gameStart(); this._currShootTime = 0; this._currCreateEnemyTiime = 0; // 当前敌机的生成时间 this._combinationInterval = Constant.Combination.PLAN1; // 组合的间隔状态 this._bulletType = Constant.BulletPropType.BULLET_M; this.playerPlane.node.setPosition(0, 0, 15); &#125; public gameStart() &#123; this.isGameStart = true; this.playerPlane.init(); this._changePlaneModel(); this._score = 0; this.gameScore.string = this._score.toString(); &#125; public gameOver() &#123; this._isShooting = false; this.isGameStart = false; this.gamePage.active = false; this.gameOverPage.active = true; this.gameOverScore.string = this._score.toString(); this.overAnimation.play(); // 播放游戏结束的动画 this.gameScore.string = &quot;0&quot;; // this.playerPlane.init(); this.unschedule(this._modeChanged); // 取消定时器 this._destoryAll(); &#125; public addScore() &#123; this._score++; this.gameScore.string = this._score.toString(); &#125; public playAudioEffect(name: string) &#123; this.audioEffect.play(name); &#125; private _destoryAll() &#123; let children = this.node.children; let length = children.length; // 销毁对象时要从后往前，不能从前往后 for (let index = length - 1; index &gt;= 0; index--) &#123; const child = children[index]; child.destroy(); &#125; children = this.bulletRoot.children; length = children.length; // 销毁对象时要从后往前，不能从前往后 for (let index = length - 1; index &gt;= 0; index--) &#123; const child = children[index]; child.destroy(); &#125; &#125; private _init() &#123; // 用于按下的时候即发射第一颗子弹 this._currShootTime = this.shootTime; this._changePlaneModel(); &#125; // 定时器函数 private _changePlaneModel() &#123; // this.schedule()四个参数：回调， 间隔时间，重复次数， 延迟时间 this.schedule(this._modeChanged, 10, macro.REPEAT_FOREVER); &#125; // 改变组合状态 private _modeChanged() &#123; this._combinationInterval++; this.createBulletProp(); // 创建子弹道具 &#125;&#125; 编辑 EnemyPlane 脚本， 添加敌人飞机 销毁 的音效 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576import &#123; _decorator, Component, Node, Collider, ITriggerEvent &#125; from &#x27;cc&#x27;;import &#123; Constant &#125; from &#x27;../framework/Constant&#x27;;import &#123; GameManager &#125; from &#x27;../framework/GameManager&#x27;;const &#123; ccclass, property &#125; = _decorator;// 敌机被销毁的位置(超出屏幕下边沿后的Z轴坐标值)const OUTOFBOUNCE = 50;@ccclass(&#x27;EnemyPlane&#x27;)export class EnemyPlane extends Component &#123; @property public createBulletTime = 0.5; // 敌机子弹发射周期 private _enemySpeed = 0; private _needBullet = false; // 敌机是否发射子弹 private _currCreateBulletTime = 0; // 敌机当前子弹发射周期 private _gameManager: GameManager = null; onEnable() &#123; // 获取碰撞组件 const collider = this.getComponent(Collider); // 监听触发事件 collider.on(&#x27;onTriggerEnter&#x27;, this._onTriggerEnter, this); &#125; onDisable() &#123; // 获取碰撞组件 const collider = this.getComponent(Collider); // 停止监听触发事件 collider.off(&#x27;onTriggerEnter&#x27;, this._onTriggerEnter, this); &#125; private _onTriggerEnter(event: ITriggerEvent) &#123; // 获取分组 const collisionGroup = event.otherCollider.getGroup(); // 遇到玩家飞机或子弹，敌人飞机销毁 if (collisionGroup === Constant.CollistionType.PLAYER_PLANE || collisionGroup === Constant.CollistionType.PLAYER_BULLET) &#123; console.log(&#x27;trigger enemy destroy&#x27;); this._gameManager.playAudioEffect(&#x27;enemy&#x27;); // 播放声音 this.node.destroy(); this._gameManager.addScore(); // 分数增加 &#125; &#125; update(deltaTime: number) &#123; const pos = this.node.position; // 敌机向下飞 pos.z 值要增加 let movePos = pos.z + this._enemySpeed; // 增加用于判断是否要发射子弹 if (this._needBullet) &#123; this._currCreateBulletTime += deltaTime; if (this._currCreateBulletTime &gt; this.createBulletTime) &#123; // 敌机发射子弹，需要在 GameManager 添加相应函数 // this.node.position 是发射子弹时敌机的位置 this._gameManager.createEnemyBullet(this.node.position); this._currCreateBulletTime = 0; &#125; &#125; this.node.setPosition(pos.x, pos.y, movePos); if (movePos &gt; OUTOFBOUNCE) &#123; this.node.destroy(); &#125; &#125; show(gameManager: GameManager, speed: number, needBullet: boolean = false) &#123; this._gameManager = gameManager; this._enemySpeed = speed; this._needBullet = needBullet; &#125;&#125; 编辑 PlayerPlane 脚本， 添加玩家飞机的音效 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import &#123; _decorator, Component, Node, Collider, ITriggerEvent, AudioSource &#125; from &#x27;cc&#x27;;import &#123; Constant &#125; from &#x27;../framework/Constant&#x27;;const &#123; ccclass, property &#125; = _decorator;@ccclass(&#x27;PlayerPlane&#x27;)export class PlayerPlane extends Component &#123; public lifeValue = 5; //玩家飞机生命 public isDie = false; private _currLife = 0; private _audioSource: AudioSource = null; onEnable() &#123; // 获取碰撞组件 const collider = this.getComponent(Collider); // 监听触发事件 collider.on(&#x27;onTriggerEnter&#x27;, this._onTriggerEnter, this); &#125; onDisable() &#123; const collider = this.getComponent(Collider); // 停止监听触发事件 collider.off(&#x27;onTriggerEnter&#x27;, this._onTriggerEnter, this); &#125; start() &#123; this._audioSource = this.getComponent(AudioSource); &#125; public init() &#123; this._currLife = this.lifeValue; this.isDie = false; &#125; private _onTriggerEnter(event: ITriggerEvent) &#123; // 获取分组 const collisionGroup = event.otherCollider.getGroup(); // 遇到敌方飞机或敌方子弹，玩家飞机掉血 if (collisionGroup === Constant.CollistionType.ENEMY_PLANE || collisionGroup === Constant.CollistionType.ENEMY_BULLET) &#123; // 现在玩家飞机发生碰撞只在控制台输出文件 this._currLife--; console.log(&#x27;player plane reduce blood:&#x27;, this._currLife); if (this._currLife &lt;= 0) &#123; this.isDie = true; this._audioSource.play(); &#125; &#125; &#125;&#125; 编辑 UIManager 脚本，添加按钮音效 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283import &#123; _decorator, Component, Node, Touch, EventTouch, Input &#125; from &#x27;cc&#x27;;import &#123; GameManager &#125; from &#x27;../framework/GameManager&#x27;;const &#123; ccclass, property &#125; = _decorator;@ccclass(&#x27;UIManager&#x27;)export class UIManager extends Component &#123; @property public playerPlaneSpeed = 1; @property(Node) public playerPlane: Node = null; // 添加游戏控制脚本 @property(GameManager) public gameManager: GameManager = null; @property(Node) public gameStart: Node = null; @property(Node) public game: Node = null; @property(Node) public gameOver: Node = null; start() &#123; this.node.on(Input.EventType.TOUCH_START, this._touchStart, this); this.node.on(Input.EventType.TOUCH_MOVE, this._touchMove, this); this.node.on(Input.EventType.TOUCH_END, this._touchEnd, this); this.gameStart.active = true; // 显示开始界面 &#125; // 重新开始按钮对应代码 public reStart() &#123; this.gameOver.active = false; this.game.active = true; this.gameManager.audioEffect.play(&#x27;button&#x27;); this.gameManager.gameReStart(); &#125; // 返回主页按钮代码 public returnMain() &#123; this.gameOver.active = false; this.gameStart.active = true; this.gameManager.audioEffect.play(&#x27;button&#x27;); this.gameManager.returnMain(); &#125; private _touchMove(touch: Touch, event: EventTouch) &#123; if(!this.gameManager.isGameStart)&#123; return; &#125; // touch.getDelta() 获取当前触点值与上一次触点值的差值 let delta = touch.getDelta(); let pos = this.playerPlane.position; // 获取当前节点的位置 // 在速度前乘以 0.01 是用于调整移动的速度 this.playerPlane.setPosition( pos.x + 0.01 * this.playerPlaneSpeed * delta.x, pos.y, pos.z - 0.01 * this.playerPlaneSpeed * delta.y); &#125; // 开始触摸屏幕的回调方法 private _touchStart(touch: Touch, event: EventTouch) &#123; if (this.gameManager.isGameStart) &#123; this.gameManager.isShooting(true); // 触摸屏幕时玩家飞机开始射击 &#125; else &#123; this.gameStart.active = false; this.game.active = true; this.gameManager.audioEffect.play(&#x27;button&#x27;); this.gameManager.gameStart(); &#125; &#125; private _touchEnd(touch: Touch, event: EventTouch) &#123; if (!this.gameManager.isGameStart) &#123; return; &#125; // 停止触摸时玩家飞机结束射击 this.gameManager.isShooting(false); &#125;&#125; 在 层级管理器 点击选中 audio/effect 节点, 其 AudioList 属性的值改为 4, 点击名字左边的 三角符号, 依次将 bullet1、bullet2、button、enemy 四个音效拖进去。 在 层级管理器 中将 audio/effect 节点关联到 gameManager 节点的属性 AudioEfect 。 保存场景, 运行预览。 &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"cocos creator","slug":"cocos-creator","permalink":"https://hujiyi.github.io/categories/cocos-creator/"}],"tags":[{"name":"cocos creator","slug":"cocos-creator","permalink":"https://hujiyi.github.io/tags/cocos-creator/"},{"name":"game","slug":"game","permalink":"https://hujiyi.github.io/tags/game/"}]},{"title":"学习笔记：使用 Cocos Creator 3.4.0 开发空战游戏 06——游戏界面","slug":"develop-an-airplane-game-in-cocos-creator-06","date":"2022-02-03T01:55:32.000Z","updated":"2022-10-11T01:40:13.094Z","comments":true,"path":"2022/02/03/develop-an-airplane-game-in-cocos-creator-06/","permalink":"https://hujiyi.github.io/2022/02/03/develop-an-airplane-game-in-cocos-creator-06/","excerpt":"","text":"开发工具 Cocos Dashboard 1.0.20 Cocos Creator 3.4.0 Visual Studio Code 1.63 Microsoft Edge 97.0.1072.69 界面宽度和高度 当前游戏只有一个场景: 主场景。界面则分为三个部分：主界面(gameStart), 游戏界面(game)和结算界面(gameOver)。 在 主菜单 选择 项目 -&gt; 项目设置, 在弹出的 项目设置 窗口 左侧 选中 项目数据, 右侧 窗格中的 设计宽度 改为 640, 设计高度 改为 960, 关闭窗口。 游戏主界面(开始界面) 在 资源管理器 中点击选中图片 assets/res/texture/logo, 在 属性检查器 中将图片 logo.png 的属性 Type(图片类型) 更改为 sprite-frame, 保存更改。 点击 场景编辑器 上方 3D 按钮，切换为 2D 模式。 在 层级管理器 点击选中 Canvas 节点，右键 -&gt; 创建 -&gt; 空节点, 命名为 gameStart。 在 层级管理器 点击选中 Canvas/gameStart 节点，在 属性检查器 中点击 添加组件 -&gt; UI -&gt; Widget。 Canvas/gameStart/Widget 的属性 Horizontal Alignment 设为 Horizontal Stretch, Left 的值设为 0, Right 的值设为 0; 属性 Vertical Alignment 设为 Vertical Stretch, Top 的值设为 0, Bottom 的值设为 0。 将 资源管理器 中 图片类型 已经更改为 sprite-frame 的图片 assets/res/texture/logo 拖动到 层级管理器 下的 Canvas/gameStart 节点。将 logo 节点沿 Y轴 向上拖动到界面上方(例如此处Position, Y:225) 在 层级管理器 点击选中 Canvas/gameStart 节点, 右键 -&gt; 创建 -&gt; 2D对象 -&gt; Label(文本), 命名为 tip, 在其 属性检查器 中将 String 属性的值改为 滑动开始游戏, FontSize 属性的值改为 40。并沿 Y轴 向下拖动到合适的位置, 保存场景。 游戏界面 在 层级管理器 点击选中 Canvas/gameStart 节点, Ctrl+D 复制节点后命名为 game。 删除 game 节点原有的 logo 和 tip 节点。 在 资源管理器 中点击选中图片 assets/res/texture/fightBoxScore, 在 属性检查器 中将图片 fightBoxScore.png 的属性 Type 更改为 sprite-frame, 保存更改。 将更改后的 assets/res/texture/fightBoxScore 拖到 game 节点, 再将它拖到显示区域的左方角。 在 层级管理器 点击选中 Canvas/game/fightBoxScore 节点，在 属性检查器 中点击 添加组件 -&gt; UI -&gt; Widget, Horizontal Alignment 设为 Lef, Left 的值设为 20px; Vertical Alignment 设为 Top, Top 的值设为 20px。 在 资源管理器 中点击选中图片 assets/res/texture/fightIconGold, 在 属性检查器 中将图片 fightIconGold.png 的属性 Type 更改为 sprite-frame, 保存更改。 将更改后的 assets/res/texture/fightIconGold 拖到 game/fightBoxScore 节点, 然后将其沿 X轴 向左拖动到 fightBoxScore 图片左边的圆形区域内。 在 层级管理器 点击选中 Canvas/game/fightBoxScore 节点, 右键 -&gt; 创建 -&gt; 2D对象 -&gt; Label(文本), 命名为 score, 将 HorizontalAlign 属性设为 Left, String 属性的值设为 0, FontSize 属性的值设为 30, Overflow 属性的值设为 CLAMP。 将 cc.UITransform 下的 ContentSize 属性的 W 值改为 150, 最后将这个 score 节点拖动到屏幕合适的位置。 游戏结算界面 在 层级管理器 点击选中 game 节点, Ctrl+D 复制节点后命名为 gameOver。 删除 gameOver 节点原有的 fightBoxScore 节点。 在 层级管理器 点击选中 Canvas/gameOver 节点，右键 -&gt; 创建 -&gt; UI组件 -&gt; Button(按钮), 命名为 reStart, SizeMode 属性的值改为 RAW, Transition 属性的值改为 SCALE。 将 资源管理器 中的图片 assets/res/texture/fightBtn01 转为 sprite-frame 后，拖到 reStart 节点的 SpriteFrame 属性中。 在 层级管理器 点击选中 Canvas/gameOver/reStart/Label 节点, String 属性的值改为 再来一局, FontSize 属性的值改为 50, LineHeight 属性的值改为 60, OverFlow 属性的值改为 None, Color 改为 白色。 在 层级管理器 点击选中 Canvas/gameOver/reStart 节点, Ctrl+D 复制节点后命名为 returnMain。 将 资源管理器 中的图片 assets/res/texture/fightBtn02 转为 sprite-frame 后，拖到 returnMain 节点的 SpriteFrame 属性中。 在 层级管理器 点击选中 Canvas/gameOver/returnMain/Label 节点, String 属性的值改为 返回主页, FontSize 属性的值改为 40。 分别移动 reStart 节点和 returnMain 节点到合适的位置, 如下图所示: 在 层级管理器 点击选中 Canvas/gameOver 节点，右键 -&gt; 创建 -&gt; 2D对象 -&gt; Label(文本), 命名为 scoreTitle, String 属性的值改为 本局得分, FontSize 属性的值改为 40, 向上移动本节点到合适的位置。 在 层级管理器 点击选中 Canvas/gameOver/scoreTitle 节点，右键 -&gt; 创建 -&gt; 2D对象 -&gt; Label(文本), 命名为 score, String 属性的值改为 999999, FontSize 属性的值改为 80, LineHeight 属性的值改为 90。 将 资源管理器 中的图片 assets/res/effect/uiAni/fightBoxSettlement 转为 sprite-frame 后，拖到 Canvas/gameOver 节点, 调整层级排到 Canvas/gameOver/scoreTitle 节点的前面。 在 层级管理器 点击选中 Canvas/gameOver/fightBoxSettlement 节点，点击窗口下方的 动画编辑器 选项卡, 然后点击 新建动画剪辑资源 按钮， 在弹出的 创建资源 对话框中输入文件名 fightBoxSettlement.anim, 选择保存位置和图片相同, 点 保存 按钮。 在 动画编辑器 选项卡中点击 进入动画编辑模式 按钮, 点击 属性列表 右侧的 + 按钮，选 position, 点击 position 右侧的 菱形 图标, 然后拖动 时间轴 到 0-30 位置, 在 场景编辑器 中拖动 fightBoxSettlement 图片向上移动， 形成一个向上移动的动画效果。 在 动画编辑器 选项卡中点击 进入动画编辑 按钮, 点击 属性列表 右侧的 + 按钮，选 cc.Sprite -&gt; color, cc.Sprite.color 在 0-00 位置处的 alpha 值为 0, 在 0-30 位置处的 alpha 值为 255, alpha 的值在 Color 属性中设置, 可以在 0-00和 0-30 之间多增加几个关键帧并设置不同的 alpah 值实现闪烁效果(例如交替显示和隐藏)。 双击 资源管理器 中的 assets/scene/airPlane.scene 返回场景，将 gameStart、 game 和 gameOver 三个节点隐藏(在 属性检查器 中将三个名字前面的 ✓ 去掉), 保存场景。 面板控制逻辑 编辑玩家飞机脚本 PlayerPlane, 添加 玩家生命 和 游戏结束 控制, 代码如下所示： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import &#123; _decorator, Component, Node, Collider, ITriggerEvent &#125; from &#x27;cc&#x27;;import &#123; Constant &#125; from &#x27;../framework/Constant&#x27;;const &#123; ccclass, property &#125; = _decorator;@ccclass(&#x27;PlayerPlane&#x27;)export class PlayerPlane extends Component &#123; public lifeValue = 5; //玩家飞机生命 public isDie = false; private _currLife = 0; onEnable() &#123; // 获取碰撞组件 const collider = this.getComponent(Collider); // 监听触发事件 collider.on(&#x27;onTriggerEnter&#x27;, this._onTriggerEnter, this); &#125; onDisable() &#123; const collider = this.getComponent(Collider); // 停止监听触发事件 collider.off(&#x27;onTriggerEnter&#x27;, this._onTriggerEnter, this); &#125; public init() &#123; this._currLife = this.lifeValue; this.isDie = false; &#125; private _onTriggerEnter(event: ITriggerEvent) &#123; // 获取分组 const collisionGroup = event.otherCollider.getGroup(); // 遇到敌方飞机或敌方子弹，玩家飞机掉血 if (collisionGroup === Constant.CollistionType.ENEMY_PLANE || collisionGroup === Constant.CollistionType.ENEMY_BULLET) &#123; // 现在玩家飞机发生碰撞只在控制台输出文件 this._currLife--; console.log(&#x27;player plane reduce blood:&#x27;, this._currLife); if (this._currLife &lt;= 0) &#123; this.isDie = true; &#125; &#125; &#125;&#125; 编辑 gameManager 脚本, 添加用于界面控制的代码, Animation 需要手动添加引用 首先: 12@property(Node)public playerPlane: Node = null; // 玩家飞机 改为 12@property(SelfPlane)public playerPlane: SelfPlane = null; // 玩家飞机 然后 this.playerPlane 改为 this.playerPlane.node 编辑后的 gameManager 脚本代码如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416import &#123; _decorator, Component, Node, Prefab, instantiate, math, Vec3, BoxCollider, Label, Animation, macro &#125; from &#x27;cc&#x27;;import &#123; Bullet &#125; from &#x27;../bullet/Bullet&#x27;;import &#123; BulletProp &#125; from &#x27;../bullet/BulletProp&#x27;;import &#123; EnemyPlane &#125; from &#x27;../plane/EnemyPlane&#x27;;import &#123; PlayerPlane &#125; from &#x27;../plane/PlayerPlane&#x27;;import &#123; Constant &#125; from &#x27;./Constant&#x27;;const &#123; ccclass, property &#125; = _decorator;@ccclass(&#x27;GameManager&#x27;)export class GameManager extends Component &#123; @property(PlayerPlane) public playerPlane: PlayerPlane = null; // 玩家飞机 @property(Prefab) public bullet01: Prefab = null; // 子弹1 @property(Prefab) public bullet02: Prefab = null; // 子弹2 @property(Prefab) public bullet03: Prefab = null; // 子弹3 @property(Prefab) public bullet04: Prefab = null; // 子弹4 @property(Prefab) public bullet05: Prefab = null; // 子弹5 @property public shootTime = 0.3; // 射击周期（间隔时间） @property public bulletSpeed = 1; // 子弹速度 @property(Node) public bulletRoot: Node = null; // 子弹管理节点 // 敌机 @property(Prefab) public enemy01: Prefab = null; // 敌机1 @property(Prefab) public enemy02: Prefab = null; // 敌机2 @property public createEnemyTime = 1; // 敌机生成时间 @property public enemy01Speed = 0.5; // 敌机1速度 @property public enemy02Speed = 0.7; // 敌机2速度 // 子弹类型道具 @property(Prefab) public bulletPropM: Prefab = null; @property(Prefab) public bulletPropH: Prefab = null; @property(Prefab) public bulletPropS: Prefab = null; @property public bulletPropSpeed = 0.3; // 子弹类型道具速度 // ui @property(Node) public gamePage: Node = null; @property(Node) public gameOverPage: Node = null; @property(Label) public gameScore: Label = null; @property(Label) public gameOverScore: Label = null; @property(Animation) public overAnimation: Animation = null; // Animation 要手工添加导入 public isGameStart = false; private _currShootTime = 0; private _isShooting = false; private _currCreateEnemyTiime = 0; // 当前敌机的生成时间 private _combinationInterval = Constant.Combination.PLAN1; // 组合的间隔状态 private _bulletType = Constant.BulletPropType.BULLET_M; // 子弹道具类型 private _score: number = 0; start() &#123; this._init(); &#125; update(deltaTime: number) &#123; if (!this.isGameStart) &#123; return; &#125; if (this.playerPlane.isDie) &#123; this.gameOver(); return; &#125; this._currShootTime += deltaTime; if (this._isShooting &amp;&amp; this._currShootTime &gt; this.shootTime) &#123; // 判断子弹道具的类型 if (this._bulletType === Constant.BulletPropType.BULLET_H) &#123; this.createPlayerBulletH(); &#125; else if (this._bulletType === Constant.BulletPropType.BULLET_S) &#123; this.createPlayerBulletS(); &#125; else &#123; this.createPlayerBulletM(); &#125; this._currShootTime = 0; &#125; this._currCreateEnemyTiime += deltaTime; // 判断组合方式创建相应的敌机 if (this._combinationInterval === Constant.Combination.PLAN1) &#123; if (this._currCreateEnemyTiime &gt; this.createEnemyTime) &#123; this.createEnemyPlane(); this._currCreateEnemyTiime = 0; &#125; &#125; else if (this._combinationInterval === Constant.Combination.PLAN2) &#123; // 第二阶段，前两种组合随机出现 // 这里乘以 0.9 是缩短敌机出现的间隔时间 if (this._currCreateEnemyTiime &gt; this.createEnemyTime * 0.9) &#123; // 用于随机出现组合1或组合2 const randomCombination = math.randomRangeInt(1, 6); if (randomCombination === Constant.Combination.PLAN2) &#123; this.createCombination01(); &#125; else &#123; this.createEnemyPlane(); &#125; this._currCreateEnemyTiime = 0; &#125; &#125; else &#123; // 第三阶段，三个组合随机出现 // 这里乘以 0.9 是缩短敌机出现的间隔时间 if (this._currCreateEnemyTiime &gt; this.createEnemyTime * 0.8) &#123; // 用于随机出现组合1或组合2 const randomCombination = math.randomRangeInt(1, 7); if (randomCombination === Constant.Combination.PLAN2) &#123; this.createCombination01(); &#125; else if (randomCombination === Constant.Combination.PLAN3) &#123; this.createCombination02(); &#125; else &#123; this.createEnemyPlane(); &#125; this._currCreateEnemyTiime = 0; &#125; &#125; &#125; //创建玩家飞机的子弹 public createPlayerBulletM() &#123; // 实例材质类型的子弹, 实例出来的对象不在场景中 const bullet = instantiate(this.bullet01); bullet.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 let pos = this.playerPlane.node.position; // 获取玩家飞机位置 // 子弹出现的位置为飞机 Z轴 -7 bullet.setPosition(pos.x, pos.y, pos.z - 7); // 获取 Bullet类 （子弹预制根节点添加 Bullet 脚本） const bulletComp = bullet.getComponent(Bullet); bulletComp.show(this.bulletSpeed, false); // 设置子弹速度 &#125; // S型子弹为前方同时发射两颗 public createPlayerBulletH() &#123; let pos = this.playerPlane.node.position; // 获取玩家飞机位置 // 左边的子弹 const bullet1 = instantiate(this.bullet03); bullet1.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 // 子弹出现的位置为飞机 Z轴 -7 bullet1.setPosition(pos.x - 2.5, pos.y, pos.z - 7); // 获取 Bullet 组件 （脚本类） const bulletComp1 = bullet1.getComponent(Bullet); // bulletComp.bulletSpeed = this.bulletSpeed; // 设置子弹速度 bulletComp1.show(this.bulletSpeed, false); // 玩家飞机的子弹速度 // 右边的子弹 const bullet2 = instantiate(this.bullet03); bullet2.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 // 子弹出现的位置为飞机 Z轴 -7 bullet2.setPosition(pos.x + 2.5, pos.y, pos.z - 7); // 获取 Bullet 组件 （脚本类） const bulletComp2 = bullet2.getComponent(Bullet); // bulletComp.bulletSpeed = this.bulletSpeed; // 设置子弹速度 bulletComp2.show(this.bulletSpeed, false); // 玩家飞机的子弹速度 &#125; // S型子弹为三发 public createPlayerBulletS() &#123; let pos = this.playerPlane.node.position; // 获取玩家飞机位置 // 中间子弹 const bullet1 = instantiate(this.bullet05); bullet1.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 // 子弹出现的位置为飞机 Z轴 -7 bullet1.setPosition(pos.x, pos.y, pos.z - 7); // 获取 Bullet 组件 （脚本类） const bulletComp1 = bullet1.getComponent(Bullet); // bulletComp.bulletSpeed = this.bulletSpeed; // 设置子弹速度 bulletComp1.show(this.bulletSpeed, false); // 玩家飞机的子弹速度 // 左边子弹 const bullet2 = instantiate(this.bullet05); bullet2.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 // 子弹出现的位置为飞机 Z轴 -7 bullet2.setPosition(pos.x - 4, pos.y, pos.z - 7); // 获取 Bullet 组件 （脚本类） const bulletComp2 = bullet2.getComponent(Bullet); // bulletComp.bulletSpeed = this.bulletSpeed; // 设置子弹速度 bulletComp2.show(this.bulletSpeed, false, Constant.Direction.LEFT); // 玩家飞机的子弹速度 // 右边子弹 const bullet3 = instantiate(this.bullet05); bullet3.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 // 子弹出现的位置为飞机 Z轴 -7 bullet3.setPosition(pos.x + 4, pos.y, pos.z - 7); // 获取 Bullet 组件 （脚本类） const bulletComp3 = bullet3.getComponent(Bullet); // bulletComp.bulletSpeed = this.bulletSpeed; // 设置子弹速度 bulletComp3.show(this.bulletSpeed, false, Constant.Direction.RIGHT); // 玩家飞机的子弹速度 &#125; // 是否处理触摸状态，触摸才发射子弹 public isShooting(value: boolean) &#123; this._isShooting = value; &#125; public createEnemyPlane() &#123; // math 是 cc 带的数字模块 const whichEnemy = math.randomRangeInt(1, 3); let prefab: Prefab = null; let speed = 0; if (whichEnemy === Constant.EnemyType.TYPE1) &#123; prefab = this.enemy01; speed = this.enemy01Speed; &#125; else &#123; prefab = this.enemy02; speed = this.enemy02Speed; &#125; // 实例化预制 const enemy = instantiate(prefab); enemy.setParent(this.node); // 预制挂载到组件中 const enemyComp = enemy.getComponent(EnemyPlane); enemyComp.show(this, speed, true); // 敌机随机出现的X轴(左右)坐标范围 const randomPos = math.randomRangeInt(-25, 26); enemy.setPosition(randomPos, 0, -50); &#125; // 敌机出现组合1：5架飞机一字型同时出现 public createCombination01() &#123; const enemyArray = new Array&lt;Node&gt;(5); for (let i = 0; i &lt; enemyArray.length; i++) &#123; enemyArray[i] = instantiate(this.enemy01); const element = enemyArray[i]; element.parent = this.node; element.setPosition(-20 + i * 10, 0, -50); const enemyComp = element.getComponent(EnemyPlane); enemyComp.show(this, this.enemy01Speed, false); &#125; &#125; // 敌机出现组合1, 7架飞机V字型出现 public createCombination02() &#123; const enemyArray = new Array&lt;Node&gt;(7); // 7 架敌机的初始坐标 const combinationPos = [ -21, 0, -60, -14, 0, -55, -7, 0, -50, 0, 0, -45, 7, 0, -50, 14, 0, -55, 21, 0, -60, ]; for (let i = 0; i &lt; enemyArray.length; i++) &#123; enemyArray[i] = instantiate(this.enemy02); const element = enemyArray[i]; element.parent = this.node; const startIndex = i * 3; element.setPosition(combinationPos[startIndex], combinationPos[startIndex + 1], combinationPos[startIndex + 2]); const enemyComp = element.getComponent(EnemyPlane); enemyComp.show(this, this.enemy02Speed, false); &#125; &#125; // 敌机发射子弹 public createEnemyBullet(targetPos: Vec3) &#123; // 实例材质类型的子弹, 实例出来的对象不在场景中 const bullet = instantiate(this.bullet01); bullet.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 // 子弹出现的位置为飞机 Z轴 -7 bullet.setPosition(targetPos.x, targetPos.y, targetPos.z + 6); const bulletComp = bullet.getComponent(Bullet); // 敌机的子弹速度 要比敌机大一些 bulletComp.show(1, true); // 获取子弹的碰撞器组件 const colliderComp = bullet.getComponent(BoxCollider); // 设置敌机子弹的碰撞矩阵 colliderComp.setGroup(Constant.CollistionType.ENEMY_BULLET); // 设置碰撞掩码 与 玩家飞机 碰撞 colliderComp.setMask(Constant.CollistionType.PLAYER_PLANE); &#125; // 更换玩家子弹类型 public changeBulletType(type: number) &#123; this._bulletType = type; &#125; // 创建子弹道具 public createBulletProp() &#123; const randomProp = math.randomRangeInt(1, 4); console.log(&#x27;create bullet prop:&#x27;, randomProp); let prefab: Prefab = null; if (randomProp === Constant.BulletPropType.BULLET_H) &#123; prefab = this.bulletPropH; &#125; else if (randomProp === Constant.BulletPropType.BULLET_S) &#123; prefab = this.bulletPropS; &#125; else &#123; prefab = this.bulletPropM; &#125; // 实例化子弹道具预览 const prop = instantiate(prefab); prop.setParent(this.node); // const prop = PoolManager.instance().getNode(prefab, this.node); prop.setPosition(15, 0, -50); // 道具的起始位置 const propComp = prop.getComponent(BulletProp); propComp.show(this, -this.bulletPropSpeed); &#125; public returnMain() &#123; this._currShootTime = 0; this._currCreateEnemyTiime = 0; // 当前敌机的生成时间 this._combinationInterval = Constant.Combination.PLAN1; // 组合的间隔状态 this._bulletType = Constant.BulletPropType.BULLET_M; this.playerPlane.node.setPosition(0, 0, 15); this._score = 0; &#125; public gameReStart() &#123; this.gameStart(); this._currShootTime = 0; this._currCreateEnemyTiime = 0; // 当前敌机的生成时间 this._combinationInterval = Constant.Combination.PLAN1; // 组合的间隔状态 this._bulletType = Constant.BulletPropType.BULLET_M; this.playerPlane.node.setPosition(0, 0, 15); &#125; public gameStart() &#123; this.isGameStart = true; this.playerPlane.init(); this._changePlaneModel(); this._score = 0; this.gameScore.string = this._score.toString(); &#125; public gameOver() &#123; this._isShooting = false; this.isGameStart = false; this.gamePage.active = false; this.gameOverPage.active = true; this.gameOverScore.string = this._score.toString(); this.overAnimation.play(); // 播放游戏结束的动画 this.gameScore.string = &quot;0&quot;; // this.playerPlane.init(); this.unschedule(this._modeChanged); // 取消定时器 this._destoryAll(); &#125; public addScore() &#123; this._score++; this.gameScore.string = this._score.toString(); &#125; private _destoryAll() &#123; let children = this.node.children; let length = children.length; // 销毁对象时要从后往前，不能从前往后 for (let index = length - 1; index &gt;= 0; index--) &#123; const child = children[index]; child.destroy(); &#125; children = this.bulletRoot.children; length = children.length; // 销毁对象时要从后往前，不能从前往后 for (let index = length - 1; index &gt;= 0; index--) &#123; const child = children[index]; child.destroy(); &#125; &#125; private _init() &#123; // 用于按下的时候即发射第一颗子弹 this._currShootTime = this.shootTime; this._changePlaneModel(); &#125; // 定时器函数 private _changePlaneModel() &#123; // this.schedule()四个参数：回调， 间隔时间，重复次数， 延迟时间 this.schedule(this._modeChanged, 10, macro.REPEAT_FOREVER); &#125; // 改变组合状态 private _modeChanged() &#123; this._combinationInterval++; this.createBulletProp(); // 创建子弹道具 &#125;&#125; 编辑 assets/script/ui/UIManager 脚本, 添加 三个界面 节点 和 两个按钮 的方法, 以及修改原来的其他方法添加控制代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980import &#123; _decorator, Component, Node, Touch, EventTouch, Input &#125; from &#x27;cc&#x27;;import &#123; GameManager &#125; from &#x27;../framework/GameManager&#x27;;const &#123; ccclass, property &#125; = _decorator;@ccclass(&#x27;UIManager&#x27;)export class UIManager extends Component &#123; @property public playerPlaneSpeed = 1; @property(Node) public playerPlane: Node = null; // 添加游戏控制脚本 @property(GameManager) public gameManager: GameManager = null; @property(Node) public gameStart: Node = null; @property(Node) public game: Node = null; @property(Node) public gameOver: Node = null; start() &#123; this.node.on(Input.EventType.TOUCH_START, this._touchStart, this); this.node.on(Input.EventType.TOUCH_MOVE, this._touchMove, this); this.node.on(Input.EventType.TOUCH_END, this._touchEnd, this); this.gameStart.active = true; // 显示开始界面 &#125; // 重新开始按钮对应代码 public reStart() &#123; this.gameOver.active = false; this.game.active = true; this.gameManager.gameReStart(); &#125; // 返回主页按钮代码 public returnMain() &#123; this.gameOver.active = false; this.gameStart.active = true; this.gameManager.returnMain(); &#125; private _touchMove(touch: Touch, event: EventTouch) &#123; if(!this.gameManager.isGameStart)&#123; return; &#125; // touch.getDelta() 获取当前触点值与上一次触点值的差值 let delta = touch.getDelta(); let pos = this.playerPlane.position; // 获取当前节点的位置 // 在速度前乘以 0.01 是用于调整移动的速度 this.playerPlane.setPosition( pos.x + 0.01 * this.playerPlaneSpeed * delta.x, pos.y, pos.z - 0.01 * this.playerPlaneSpeed * delta.y); &#125; // 开始触摸屏幕的回调方法 private _touchStart(touch: Touch, event: EventTouch) &#123; if (this.gameManager.isGameStart) &#123; this.gameManager.isShooting(true); // 触摸屏幕时玩家飞机开始射击 &#125; else &#123; this.gameStart.active = false; this.game.active = true; this.gameManager.gameStart(); &#125; &#125; private _touchEnd(touch: Touch, event: EventTouch) &#123; if (!this.gameManager.isGameStart) &#123; return; &#125; // 停止触摸时玩家飞机结束射击 this.gameManager.isShooting(false); &#125;&#125; 在 层级管理器 点击选中 Canvas/gameOver 节点，在其 属性检查器 中名字前 打勾 设为显示。 在 层级管理器 点击选中 Canvas/gameOver/reStart 节点，ClickEvents 属性的值改为 1, 点击 ClickEvents 左边的 三角形 符号展开， 把 Canvas 节点拖动到 cc.Node 处，右边第一个下拉项选择 UIMain, 第二个下拉项选择 reStart, 实现按钮与脚本中方法的绑定。 同样的方法完成 returnMain 按钮与对应方法的绑定。 给 gameOver 节点添加组件 Event -&gt; BlockInputEvents, 阻止结束后还能控制玩家飞机。 再次将 Canvas/gameOver 节点设为不显示, 保存场景。 在 层级管理器 点击选中 Canvas 节点, 绑定三个界面到相应属性中。 在 层级管理器 点击选中 gameManager 节点, 绑定对象到相应节点( PlayerPlane 因为在代码中修改了类型, 也要重新绑定)。 保存场景, 运行预览。 &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"cocos creator","slug":"cocos-creator","permalink":"https://hujiyi.github.io/categories/cocos-creator/"}],"tags":[{"name":"cocos creator","slug":"cocos-creator","permalink":"https://hujiyi.github.io/tags/cocos-creator/"},{"name":"game","slug":"game","permalink":"https://hujiyi.github.io/tags/game/"}]},{"title":"学习笔记：使用 Cocos Creator 3.4.0 开发空战游戏 05——玩家飞机获取道具更换子弹","slug":"develop-an-airplane-game-in-cocos-creator-05","date":"2022-01-31T08:05:25.000Z","updated":"2022-10-11T01:40:13.062Z","comments":true,"path":"2022/01/31/develop-an-airplane-game-in-cocos-creator-05/","permalink":"https://hujiyi.github.io/2022/01/31/develop-an-airplane-game-in-cocos-creator-05/","excerpt":"","text":"开发工具 Cocos Dashboard 1.0.20 Cocos Creator 3.4.0 Visual Studio Code 1.63 Microsoft Edge 97.0.1072.69 提供给玩家飞机的子弹道具玩家飞家可以发射的子弹类型分为三种： M型：直线发射 1发 白色小子弹(默认) H型：直线发射 2发 红色小子弹 S型：扇形发射 3发 月牙型子弹，夹角为45度(或根据实际情况调整) 更换子弹的道具类型和出现方式： 道具每10秒出现一个，类型为 HSM 其中一种 收集到与当前不一样的道具时切换子弹类型 使用S型道具时玩家飞机比敌人飞机速度慢 创建子弹切换道具材质 在 资源管理器 的 assets/res/model/fightIconBullet/ 文件夹创建 材质, 命名为 bulletS。材质 Effect 属性的值设为 builltin-unlit, Technique 属性的值设为 03-alpha-blend， USE-TEXTURE 打勾, 将图片 assets/res/model/fightIconBullet/fightIconBullet01 拖动到 MainTexture， 在 属性检查器 右上角点击 ✓ 图标的按钮 保存 材质。 在 资源管理器 中选中 bulletS 材质， 按两次 Ctrl+D 快速复制材质，并分别重命名为 bulletH 和 bulletM。 将材质 bulletH 的图片分别修改为 fightIconBullet02, 保存材质。 将材质 bulletM 的图片分别修改为 fightIconBullet03, 保存材质。 添加子弹切换道具 在 主菜单 上选择 项目 -&gt; 项目设置, 在弹出对话框的左侧列表选择 物理, 在其 碰撞矩阵 添加分组 BULLET_PROP， 设置掩码： PLAYER_PLANE - BULLET_PROP。 在 资源管理器 的 assets/script/bullet/ 文件夹 右键 -&gt; 创建 -&gt; 脚本(TypeScript), 命名为 BulletProp(暂时不用编辑脚本)。 在 层级管理器 中添加 空节点，命名为 bulletM; 点击选中 bulletM 节点, 右键 -&gt; 创建 -&gt; 3D对象 -&gt; Quad四方形, 命名为 body; 将 资源管理器 中的材质 bulletM 拖动到 body 的 Materials 属性; 将 bulletM 节点 body 属性 Rotation 的值修改为 X:-90, Y:0, Z:0, 使其旋转为图案向上; 将 Scale 的值修改为 X:10, Y:6, Z:1, 将它放大。 在 层级管理器 中点击选中 bulletM 节点, 在 属性检查器 中点击 添加组件 -&gt; Physics -&gt; BoxCollider, 将属性 Size 的值修改为 x:7, Y:1, Z:3, isTrigger 属性 打勾。 继续在 bulletM 节点的 属性检查器 中点击 添加组件 -&gt; Physics -&gt; RigidBody, cc.RigidBody 的 Group 属性值选为 BULLET_PROP (如果没有这一项，则重选一次 bulletM 节点刷新 属性检查器 面板即可), Type 属性的值改为 KINEMATIC, 保存场景。 在 层级管理器 中点击选中 bulletM 节点，添加组件 -&gt; 自定义脚本 -&gt; BulletProp。保存场景。 在 层级管理器 中点击选中 bulletM 节点, 拖动到 资源管理器 的 assets/res/model/fightIconBullet/ 文件夹，添加为 预制。 重复以上步骤 3-8 ，使用材质 bulletH 和 bulletS 制作 另外两个 道具的 预制。 完成 三个子弹道具 预制的制作, 在 层级管理器 中删除 bulletM、 bulletH 和 bulletS 三个节点。 编辑子弹道具脚本 修改 Constant, 添加 子弹道具类型, 并添加一个 碰撞类型。 12345678910111213141516171819202122232425262728293031export class Constant &#123; // 敌机类型 public static EnemyType = &#123; TYPE1: 1, TYPE2: 2, &#125; // 敌机组合类型 public static Combination = &#123; PLAN1: 1, // 组合1, 每次随机1架敌机, 发射子弹 PLAN2: 2, // 组合2, 每次5架敌机，一 字型, 不发射子弹 PLAN3: 3, // 组合3, 每次7架敌机，V 字型, 不发射子弹 &#125; // 碰撞组合类型, 要和碰撞矩阵的顺序一致 public static CollistionType = &#123; // 使用左移符号设置为二进制值, 右边数字与碰撞矩阵序号一致 PLAYER_PLANE: 1 &lt;&lt; 1, ENEMY_PLANE: 1 &lt;&lt; 2, PLAYER_BULLET: 1 &lt;&lt; 3, ENEMY_BULLET: 1 &lt;&lt; 4, &#125; // 子弹道具类型 public static BulletPropType = &#123; BULLET_M: 1, BULLET_H: 2, BULLET_S: 3, &#125;&#125; 修改 GameManager, 增加用于更换玩家子弹类型的公共属性, 私有变量和方法, (以下代码只包含添加及修改的部分) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647// 子弹类型道具@property(Prefab)public bulletPropM: Prefab = null;@property(Prefab)public bulletPropH: Prefab = null;@property(Prefab)public bulletPropS: Prefab = null;@propertypublic bulletPropSpeed = 0.3; // 子弹类型道具速度private _bulletType = Constant.BulletPropType.BULLET_M; // 子弹道具类型// 更换玩家子弹类型 public changeBulletType(type: number) &#123; this._bulletType = type;&#125;// 创建子弹道具 public createBulletProp() &#123; const randomProp = math.randomRangeInt(1, 4); console.log(&#x27;create bullet prop:&#x27;, randomProp); let prefab: Prefab = null; if (randomProp === Constant.BulletPropType.BULLET_H) &#123; prefab = this.bulletPropH; &#125; else if (randomProp === Constant.BulletPropType.BULLET_S) &#123; prefab = this.bulletPropS; &#125; else &#123; prefab = this.bulletPropM; &#125; // 实例化子弹道具预览 const prop = instantiate(prefab); prop.setParent(this.node); // const prop = PoolManager.instance().getNode(prefab, this.node); prop.setPosition(15, 0, -50); // 道具的起始位置 const propComp = prop.getComponent(BulletProp); propComp.show(this, -this.bulletPropSpeed);&#125;// 改变组合状态private _modeChanged() &#123; this._combinationInterval++; this.createBulletProp(); // 增加这一行用于创建子弹道具&#125; 编辑子弹道具脚本 BulletProp 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667import &#123; _decorator, Component, Node, Collider, ITriggerEvent &#125; from &#x27;cc&#x27;;import &#123; Constant &#125; from &#x27;../framework/Constant&#x27;;import &#123; GameManager &#125; from &#x27;../framework/GameManager&#x27;;const &#123; ccclass, property &#125; = _decorator; @ccclass(&#x27;BulletProp&#x27;)export class BulletProp extends Component &#123; private _propSpeed = 0.3; // 道具移动速度 // 用于控制道具 S 型在屏幕上移动，从左往右正值，从右往右负值 private _propXSpeed = 0.3; private _gameManager: GameManager = null; onEnable() &#123; // 获取碰撞组件 const collider = this.getComponent(Collider); // 监听触发事件 collider.on(&#x27;onTriggerEnter&#x27;, this._onTriggerEnter, this); &#125; onDisable() &#123; // 获取碰撞组件 const collider = this.getComponent(Collider); // 停止监听触发事件 collider.off(&#x27;onTriggerEnter&#x27;, this._onTriggerEnter, this); &#125; update(deltaTime: number) &#123; let pos = this.node.position; if (pos.x &gt;= 15) &#123; this._propXSpeed = this._propSpeed; &#125; else if (pos.x &lt;= -15) &#123; this._propXSpeed = -this._propSpeed; &#125; this.node.setPosition( pos.x + this._propXSpeed, pos.y, pos.z - this._propSpeed); pos = this.node.position; // 移动后重新获取道具位置 if (pos.z &gt; 50) &#123; this.node.destroy(); &#125; &#125; show(gameManager: GameManager, speed: number) &#123; this._gameManager = gameManager; this._propSpeed = speed; &#125; private _onTriggerEnter(event: ITriggerEvent) &#123; // 获取道具的名字 const name = event.selfCollider.node.name; if (name === &#x27;bulletH&#x27;) &#123; this._gameManager.changeBulletType(Constant.BulletPropType.BULLET_H); console.log(&#x27;bullet type changed&#x27;); &#125; else if (name === &#x27;bulletS&#x27;) &#123; this._gameManager.changeBulletType(Constant.BulletPropType.BULLET_S); console.log(&#x27;bullet type changed&#x27;); &#125; else &#123; this._gameManager.changeBulletType(Constant.BulletPropType.BULLET_M); &#125; this.node.destroy(); // 销毁道具 &#125;&#125; 在 层级管理器 中点击选中 gameManager 节点, 将三个 子弹道具预制 挂载到对应的属性。 保存场景，运行、预览效果(10秒后出现第一个子弹类型道具)。 玩家飞机切换子弹类型 打开 GameManager 脚本， 将 createPlayerBullet 重命名为 createPlayerBulletM, 可以在 VS Code 选中 createPlayerBullet, 右键 -&gt; 重命名符号, 在弹出的重命名框中输入新名字 createPlayerBulletM, 则原来所有引用 createPlayerBullet 的地方都会改为 createPlayerBulletM (不要手动修改)。 在 GameManager 脚本中将 createPlayerBulletM 方法复制为 createPlayerBulletH 和 createPlayerBulletS。 修改 createPlayerBulletH 方法: 12345678910111213141516171819202122232425// H型子弹为前方同时发射两颗public createPlayerBulletH() &#123; let pos = this.playerPlane.position; // 获取玩家飞机位置 // 左边的子弹 const bullet1 = instantiate(this.bullet03); bullet1.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 // 子弹出现的位置为飞机 Z轴 -7 bullet1.setPosition(pos.x - 2.5, pos.y, pos.z - 7); // 获取 Bullet 组件 （脚本类） const bulletComp1 = bullet1.getComponent(Bullet); // bulletComp.bulletSpeed = this.bulletSpeed; // 设置子弹速度 bulletComp1.show(this.bulletSpeed, false); // 玩家飞机的子弹速度 // 右边的子弹 const bullet2 = instantiate(this.bullet03); bullet2.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 // 子弹出现的位置为飞机 Z轴 -7 bullet2.setPosition(pos.x + 2.5, pos.y, pos.z - 7); // 获取 Bullet 组件 （脚本类） const bulletComp2 = bullet2.getComponent(Bullet); // bulletComp.bulletSpeed = this.bulletSpeed; // 设置子弹速度 bulletComp2.show(this.bulletSpeed, false); // 玩家飞机的子弹速度&#125; 修改 createPlayerBulletS 方法: 12345678910111213141516171819202122232425262728293031323334// S型子弹为三发扇形public createPlayerBulletS() &#123; let pos = this.playerPlane.position; // 获取玩家飞机位置 // 中间子弹 const bullet1 = instantiate(this.bullet05); bullet1.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 // 子弹出现的位置为飞机 Z轴 -7 bullet1.setPosition(pos.x, pos.y, pos.z - 7); // 获取 Bullet 组件 （脚本类） const bulletComp1 = bullet1.getComponent(Bullet); // bulletComp.bulletSpeed = this.bulletSpeed; // 设置子弹速度 bulletComp1.show(this.bulletSpeed, false); // 玩家飞机的子弹速度 // 左边子弹 const bullet2 = instantiate(this.bullet05); bullet2.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 // 子弹出现的位置为飞机 Z轴 -7 bullet2.setPosition(pos.x - 4, pos.y, pos.z - 7); // 获取 Bullet 组件 （脚本类） const bulletComp2 = bullet2.getComponent(Bullet); // bulletComp.bulletSpeed = this.bulletSpeed; // 设置子弹速度 bulletComp2.show(this.bulletSpeed, false); // 玩家飞机的子弹速度 // 右边子弹 const bullet3 = instantiate(this.bullet05); bullet3.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 // 子弹出现的位置为飞机 Z轴 -7 bullet3.setPosition(pos.x + 4, pos.y, pos.z - 7); // 获取 Bullet 组件 （脚本类） const bulletComp3 = bullet3.getComponent(Bullet); // bulletComp.bulletSpeed = this.bulletSpeed; // 设置子弹速度 bulletComp3.show(this.bulletSpeed, false); // 玩家飞机的子弹速度&#125; 编辑 Constant 脚本，添加不同类型子弹的运动方向: 1234567891011121314151617181920212223242526272829303132333435363738export class Constant &#123; // 敌机类型 public static EnemyType = &#123; TYPE1: 1, TYPE2: 2, &#125; // 敌机组合类型 public static Combination = &#123; PLAN1: 1, // 组合1, 每次随机1架敌机, 发射子弹 PLAN2: 2, // 组合2, 每次5架敌机，一 字型, 不发射子弹 PLAN3: 3, // 组合3, 每次7架敌机，V 字型, 不发射子弹 &#125; // 碰撞组合类型, 要和碰撞矩阵的顺序一致 public static CollistionType = &#123; // 使用左移符号设置为二进制值, 右边数字与碰撞矩阵序号一致 PLAYER_PLANE: 1 &lt;&lt; 1, ENEMY_PLANE: 1 &lt;&lt; 2, PLAYER_BULLET: 1 &lt;&lt; 3, ENEMY_BULLET: 1 &lt;&lt; 4, &#125; // 子弹道具类型 public static BulletPropType = &#123; BULLET_M: 1, BULLET_H: 2, BULLET_S: 3, &#125; // 子弹运动方向 public static Direction = &#123; LEFT: 1, MIDDLE: 2, RIGHT: 3, &#125;&#125; 编辑 Bullet 脚本，更改不同类型子弹的运动轨迹: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677import &#123; _decorator, Component, Node, Collider, ITriggerEvent &#125; from &#x27;cc&#x27;;import &#123; Constant &#125; from &#x27;../framework/Constant&#x27;;const &#123; ccclass, property &#125; = _decorator;@ccclass(&#x27;Bullet&#x27;)export class Bullet extends Component &#123; private _bulletSpeed = 0; //子弹速度改为私有变量 private _isEnemyBullet = false; // 判断是否为敌机子弹 private _direction = Constant.Direction.MIDDLE; // 子弹运行方向 update(deltaTime: number) &#123; let pos = this.node.position; // 获取子弹的位置 let moveLength = 0; // 计算每一帧子弹要移动的位置 // 计算每一帧子弹要移动的位置, 玩家和敌机子弹方向不同 if (this._isEnemyBullet) &#123; moveLength = pos.z + this._bulletSpeed; this.node.setPosition(pos.x, pos.y, moveLength); if (moveLength &gt; 50) &#123; this.node.destroy(); console.log(`enemy bullet destory`); &#125; &#125; else &#123; moveLength = pos.z - this._bulletSpeed; // 判断子弹运动方向, 只有扇形子弹才需要左右方向 if (this._direction === Constant.Direction.LEFT) &#123; // 乘以 0.2 用于缩小扇形的角度 this.node.setPosition(pos.x - this._bulletSpeed * 0.2, pos.y, moveLength); &#125; else if (this._direction === Constant.Direction.RIGHT) &#123; this.node.setPosition(pos.x + this._bulletSpeed * 0.2, pos.y, moveLength); &#125; else &#123; this.node.setPosition(pos.x, pos.y, moveLength); &#125; if (moveLength &lt; -50) &#123; this.node.destroy(); console.log(`player bullet destory`); &#125; &#125; &#125; // 从 GameManager 脚本接收子弹速度和是否为敌机子弹 show(speed: number, isEnemyBullet: boolean = false, direction: number = Constant.Direction.MIDDLE) &#123; this._bulletSpeed = speed; this._isEnemyBullet = isEnemyBullet; this._direction = direction; &#125; onEnable() &#123; // 获取碰撞组件 const collider = this.getComponent(Collider); // 监听触发事件 collider.on(&#x27;onTriggerEnter&#x27;, this._onTriggerEnter, this); &#125; onDisable() &#123; // 获取碰撞组件 const collider = this.getComponent(Collider); // 停止监听触发事件 collider.off(&#x27;onTriggerEnter&#x27;, this._onTriggerEnter, this); &#125; private _onTriggerEnter(event: ITriggerEvent) &#123; console.log(&#x27;trigger bullet destroy&#x27;); // 子弹碰到玩家飞机都销毁 this.node.destroy(); &#125;&#125; 编辑 GameManager 脚本, 更改 createPlayerBulletS() 和 update(deltaTime: number) 方法, 控制子弹发射的方向。GameManager 脚本 完整代码如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333import &#123; _decorator, Component, Node, Prefab, instantiate, math, Vec3, BoxCollider &#125; from &#x27;cc&#x27;;import &#123; Bullet &#125; from &#x27;../bullet/Bullet&#x27;;import &#123; BulletProp &#125; from &#x27;../bullet/BulletProp&#x27;;import &#123; EnemyPlane &#125; from &#x27;../plane/EnemyPlane&#x27;;import &#123; Constant &#125; from &#x27;./Constant&#x27;;const &#123; ccclass, property &#125; = _decorator;@ccclass(&#x27;GameManager&#x27;)export class GameManager extends Component &#123; @property(Node) public playerPlane: Node = null; // 玩家飞机 @property(Prefab) public bullet01: Prefab = null; // 子弹1 @property(Prefab) public bullet02: Prefab = null; // 子弹2 @property(Prefab) public bullet03: Prefab = null; // 子弹3 @property(Prefab) public bullet04: Prefab = null; // 子弹4 @property(Prefab) public bullet05: Prefab = null; // 子弹5 @property public shootTime = 0.3; // 射击周期（间隔时间） @property public bulletSpeed = 1; // 子弹速度 @property(Node) public bulletRoot: Node = null; // 子弹管理节点 // 敌机 @property(Prefab) public enemy01: Prefab = null; // 敌机1 @property(Prefab) public enemy02: Prefab = null; // 敌机2 @property public createEnemyTime = 1; // 敌机生成时间 @property public enemy01Speed = 0.5; // 敌机1速度 @property public enemy02Speed = 0.7; // 敌机2速度 // 子弹类型道具 @property(Prefab) public bulletPropM: Prefab = null; @property(Prefab) public bulletPropH: Prefab = null; @property(Prefab) public bulletPropS: Prefab = null; @property public bulletPropSpeed = 0.3; // 子弹类型道具速度 private _currShootTime = 0; private _isShooting = false; private _currCreateEnemyTiime = 0; // 当前敌机的生成时间 private _combinationInterval = Constant.Combination.PLAN1; // 组合的间隔状态 private _bulletType = Constant.BulletPropType.BULLET_M; // 子弹道具类型 start() &#123; this._init(); &#125; update(deltaTime: number) &#123; this._currShootTime += deltaTime; if (this._isShooting &amp;&amp; this._currShootTime &gt; this.shootTime) &#123; // 判断子弹道具的类型 if (this._bulletType === Constant.BulletPropType.BULLET_H) &#123; this.createPlayerBulletH(); &#125; else if (this._bulletType === Constant.BulletPropType.BULLET_S) &#123; this.createPlayerBulletS(); &#125; else &#123; this.createPlayerBulletM(); &#125; this._currShootTime = 0; &#125; this._currCreateEnemyTiime += deltaTime; // 判断组合方式创建相应的敌机 if (this._combinationInterval === Constant.Combination.PLAN1) &#123; if (this._currCreateEnemyTiime &gt; this.createEnemyTime) &#123; this.createEnemyPlane(); this._currCreateEnemyTiime = 0; &#125; &#125; else if (this._combinationInterval === Constant.Combination.PLAN2) &#123; // 第二阶段，前两种组合随机出现 // 这里乘以 0.9 是缩短敌机出现的间隔时间 if (this._currCreateEnemyTiime &gt; this.createEnemyTime * 0.9) &#123; // 用于随机出现组合1或组合2 const randomCombination = math.randomRangeInt(1, 6); if (randomCombination === Constant.Combination.PLAN2) &#123; this.createCombination01(); &#125; else &#123; this.createEnemyPlane(); &#125; this._currCreateEnemyTiime = 0; &#125; &#125; else &#123; // 第三阶段，三个组合随机出现 // 这里乘以 0.9 是缩短敌机出现的间隔时间 if (this._currCreateEnemyTiime &gt; this.createEnemyTime * 0.8) &#123; // 用于随机出现组合1或组合2 const randomCombination = math.randomRangeInt(1, 7); if (randomCombination === Constant.Combination.PLAN2) &#123; this.createCombination01(); &#125; else if (randomCombination === Constant.Combination.PLAN3) &#123; this.createCombination02(); &#125; else &#123; this.createEnemyPlane(); &#125; this._currCreateEnemyTiime = 0; &#125; &#125; &#125; //创建玩家飞机的子弹 public createPlayerBulletM() &#123; // 实例材质类型的子弹, 实例出来的对象不在场景中 const bullet = instantiate(this.bullet01); bullet.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 let pos = this.playerPlane.position; // 获取玩家飞机位置 // 子弹出现的位置为飞机 Z轴 -7 bullet.setPosition(pos.x, pos.y, pos.z - 7); // 获取 Bullet类 （子弹预制根节点添加 Bullet 脚本） const bulletComp = bullet.getComponent(Bullet); bulletComp.show(this.bulletSpeed, false); // 设置子弹速度 &#125; // S型子弹为前方同时发射两颗 public createPlayerBulletH() &#123; let pos = this.playerPlane.position; // 获取玩家飞机位置 // 左边的子弹 const bullet1 = instantiate(this.bullet03); bullet1.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 // 子弹出现的位置为飞机 Z轴 -7 bullet1.setPosition(pos.x - 2.5, pos.y, pos.z - 7); // 获取 Bullet 组件 （脚本类） const bulletComp1 = bullet1.getComponent(Bullet); // bulletComp.bulletSpeed = this.bulletSpeed; // 设置子弹速度 bulletComp1.show(this.bulletSpeed, false); // 玩家飞机的子弹速度 // 右边的子弹 const bullet2 = instantiate(this.bullet03); bullet2.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 // 子弹出现的位置为飞机 Z轴 -7 bullet2.setPosition(pos.x + 2.5, pos.y, pos.z - 7); // 获取 Bullet 组件 （脚本类） const bulletComp2 = bullet2.getComponent(Bullet); // bulletComp.bulletSpeed = this.bulletSpeed; // 设置子弹速度 bulletComp2.show(this.bulletSpeed, false); // 玩家飞机的子弹速度 &#125; // S型子弹为三发 public createPlayerBulletS() &#123; let pos = this.playerPlane.position; // 获取玩家飞机位置 // 中间子弹 const bullet1 = instantiate(this.bullet05); bullet1.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 // 子弹出现的位置为飞机 Z轴 -7 bullet1.setPosition(pos.x, pos.y, pos.z - 7); // 获取 Bullet 组件 （脚本类） const bulletComp1 = bullet1.getComponent(Bullet); // bulletComp.bulletSpeed = this.bulletSpeed; // 设置子弹速度 bulletComp1.show(this.bulletSpeed, false); // 玩家飞机的子弹速度 // 左边子弹 const bullet2 = instantiate(this.bullet05); bullet2.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 // 子弹出现的位置为飞机 Z轴 -7 bullet2.setPosition(pos.x - 4, pos.y, pos.z - 7); // 获取 Bullet 组件 （脚本类） const bulletComp2 = bullet2.getComponent(Bullet); // bulletComp.bulletSpeed = this.bulletSpeed; // 设置子弹速度 bulletComp2.show(this.bulletSpeed, false, Constant.Direction.LEFT); // 玩家飞机的子弹速度 // 右边子弹 const bullet3 = instantiate(this.bullet05); bullet3.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 // 子弹出现的位置为飞机 Z轴 -7 bullet3.setPosition(pos.x + 4, pos.y, pos.z - 7); // 获取 Bullet 组件 （脚本类） const bulletComp3 = bullet3.getComponent(Bullet); // bulletComp.bulletSpeed = this.bulletSpeed; // 设置子弹速度 bulletComp3.show(this.bulletSpeed, false, Constant.Direction.RIGHT); // 玩家飞机的子弹速度 &#125; // 是否处理触摸状态，触摸才发射子弹 public isShooting(value: boolean) &#123; this._isShooting = value; &#125; public createEnemyPlane() &#123; // math 是 cc 带的数字模块 const whichEnemy = math.randomRangeInt(1, 3); let prefab: Prefab = null; let speed = 0; if (whichEnemy === Constant.EnemyType.TYPE1) &#123; prefab = this.enemy01; speed = this.enemy01Speed; &#125; else &#123; prefab = this.enemy02; speed = this.enemy02Speed; &#125; // 实例化预制 const enemy = instantiate(prefab); enemy.setParent(this.node); // 预制挂载到组件中 const enemyComp = enemy.getComponent(EnemyPlane); enemyComp.show(this, speed, true); // 敌机随机出现的X轴(左右)坐标范围 const randomPos = math.randomRangeInt(-25, 26); enemy.setPosition(randomPos, 0, -50); &#125; // 敌机出现组合1：5架飞机一字型同时出现 public createCombination01() &#123; const enemyArray = new Array&lt;Node&gt;(5); for (let i = 0; i &lt; enemyArray.length; i++) &#123; enemyArray[i] = instantiate(this.enemy01); const element = enemyArray[i]; element.parent = this.node; element.setPosition(-20 + i * 10, 0, -50); const enemyComp = element.getComponent(EnemyPlane); enemyComp.show(this, this.enemy01Speed, false); &#125; &#125; // 敌机出现组合1, 7架飞机V字型出现 public createCombination02() &#123; const enemyArray = new Array&lt;Node&gt;(7); // 7 架敌机的初始坐标 const combinationPos = [ -21, 0, -60, -14, 0, -55, -7, 0, -50, 0, 0, -45, 7, 0, -50, 14, 0, -55, 21, 0, -60, ]; for (let i = 0; i &lt; enemyArray.length; i++) &#123; enemyArray[i] = instantiate(this.enemy02); const element = enemyArray[i]; element.parent = this.node; const startIndex = i * 3; element.setPosition(combinationPos[startIndex], combinationPos[startIndex + 1], combinationPos[startIndex + 2]); const enemyComp = element.getComponent(EnemyPlane); enemyComp.show(this, this.enemy02Speed, false); &#125; &#125; // 敌机发射子弹 public createEnemyBullet(targetPos: Vec3) &#123; // 实例材质类型的子弹, 实例出来的对象不在场景中 const bullet = instantiate(this.bullet01); bullet.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 // 子弹出现的位置为飞机 Z轴 -7 bullet.setPosition(targetPos.x, targetPos.y, targetPos.z + 6); const bulletComp = bullet.getComponent(Bullet); // 敌机的子弹速度 要比敌机大一些 bulletComp.show(1, true); // 获取子弹的碰撞器组件 const colliderComp = bullet.getComponent(BoxCollider); // 设置敌机子弹的碰撞矩阵 colliderComp.setGroup(Constant.CollistionType.ENEMY_BULLET); // 设置碰撞掩码 与 玩家飞机 碰撞 colliderComp.setMask(Constant.CollistionType.PLAYER_PLANE); &#125; // 计分 public addScore() &#123; &#125; // 更换玩家子弹类型 public changeBulletType(type: number) &#123; this._bulletType = type; &#125; // 创建子弹道具 public createBulletProp() &#123; const randomProp = math.randomRangeInt(1, 4); console.log(&#x27;create bullet prop:&#x27;, randomProp); let prefab: Prefab = null; if (randomProp === Constant.BulletPropType.BULLET_H) &#123; prefab = this.bulletPropH; &#125; else if (randomProp === Constant.BulletPropType.BULLET_S) &#123; prefab = this.bulletPropS; &#125; else &#123; prefab = this.bulletPropM; &#125; // 实例化子弹道具预览 const prop = instantiate(prefab); prop.setParent(this.node); // const prop = PoolManager.instance().getNode(prefab, this.node); prop.setPosition(15, 0, -50); // 道具的起始位置 const propComp = prop.getComponent(BulletProp); propComp.show(this, -this.bulletPropSpeed); &#125; private _init() &#123; // 用于按下的时候即发射第一颗子弹 this._currShootTime = this.shootTime; this._changePlaneModel(); &#125; // 定时器函数 private _changePlaneModel() &#123; // this.schedule()四个参数：回调， 间隔时间，重复次数， 延迟时间 this.schedule(this._modeChanged, 10, 3); &#125; // 改变组合状态 private _modeChanged() &#123; this._combinationInterval++; this.createBulletProp(); // 创建子弹道具 &#125;&#125; 保存场景，运行预览。 &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"cocos creator","slug":"cocos-creator","permalink":"https://hujiyi.github.io/categories/cocos-creator/"}],"tags":[{"name":"cocos creator","slug":"cocos-creator","permalink":"https://hujiyi.github.io/tags/cocos-creator/"},{"name":"game","slug":"game","permalink":"https://hujiyi.github.io/tags/game/"}]},{"title":"学习笔记：使用 Cocos Creator 3.4.0 开发空战游戏 04——飞机与子弹的碰撞","slug":"develop-an-airplane-game-in-cocos-creator-04","date":"2022-01-31T02:40:00.000Z","updated":"2022-10-11T01:40:13.046Z","comments":true,"path":"2022/01/31/develop-an-airplane-game-in-cocos-creator-04/","permalink":"https://hujiyi.github.io/2022/01/31/develop-an-airplane-game-in-cocos-creator-04/","excerpt":"","text":"开发工具 Cocos Dashboard 1.0.20 Cocos Creator 3.4.0 Visual Studio Code 1.63 Microsoft Edge 97.0.1072.69 添加碰撞分组 在 主菜单 点击 项目 -&gt; 项目设置, 打开 项目设置 窗口。 在 物理 选项最下方的 碰撞矩阵 点 + 添加四个分组：PLAYER_PLANE, ENEMY_PLANE, PLAYER_BULLET, ENEMY_BULLET 。 设置分组的掩码： 123PLAYER_PLANE - ENEMY_BULLETPLAYER_PLANE - ENEMY_PLANEENEMY_PLANE - PLAYER_BULLET 设置完毕，关闭对话框。 设置碰撞组件和分组 在 层级管理器 点击选中 playerPlane 节点, 在其 属性检查器 中点 添加组件 -&gt; Physics -&gt; BoxCollider。 将 playerPlane 节点 属性检查器 中的 cc.BoxCollider+ 属性 Size 的值改为大一些的整数，例如：Size, X:11, Y:1, Z:10; 或是直接在 场景编辑器 中拉伸飞机 淡绿色边框 的 碰撞包围盒 包围玩家飞机, 刚添加 BoxCollider 的时候 碰撞包围盒 很小, 并且可能和 playerPlane 节点的坐标轴箭头重叠在一起，可以先修改 Size 的值后将其变大再进行拉伸; 将 cc.BoxCollider+ 的 isTrigger(触发器) 打勾。。 继续在 playerPlane 节点的 属性检查器 中点 添加组件 -&gt; Physics -&gt; RigidBody, 选择分组 Group 的值为 PLAYER_PLANE, Type 属性的值改为 KINEMATIC (运动学刚体)。 点击 playerPlane 节点的 属性检查器 右上角的 应用 按钮更新修改到对应的 预制 中。 分别双击打开 资源管理器 中的敌方飞机预制 plane02 和 plane03, 重做与玩家飞机相似的设置, RigidBody 分组 Group 的值选择为 ENEMY_PLANE, 保存预制 。 在 资源管理器 中双击打开 子弹1 - 子弹5 的预制 bullet01 - bullet05, 重做与玩家飞机相似的设置, RigidBody 分组 Group 的值选择为 PLAYER_BULLET (先设置为玩家子弹) 。 注册玩家飞机触发事件回调 修改 Constant, 添加 碰撞类型 123456789101112131415161718192021222324export class Constant &#123; // 敌机类型 public static EnemyType = &#123; TYPE1: 1, TYPE2: 2, &#125; // 敌机组合类型 public static Combination = &#123; PLAN1: 1, // 组合1, 每次随机1架敌机, 发射子弹 PLAN2: 2, // 组合2, 每次5架敌机，一 字型, 不发射子弹 PLAN3: 3, // 组合3, 每次7架敌机，V 字型, 不发射子弹 &#125; // 碰撞组合类型, 要和碰撞矩阵的顺序一致 public static CollistionType = &#123; // 使用左移符号设置为二进制值, 右边数字与碰撞矩阵序号一致 PLAYER_PLANE: 1 &lt;&lt; 1, ENEMY_PLANE: 1 &lt;&lt; 2, PLAYER_BULLET: 1 &lt;&lt; 3, ENEMY_BULLET: 1 &lt;&lt; 4, &#125;&#125; 在 资源管理器 点击选中 plane 文件夹, 添加名为 PlayerPlane 的脚本, 添加用于检测 玩家飞机 是否碰到 敌人子弹 或 敌机 。 12345678910111213141516171819202122232425262728293031import &#123; _decorator, Component, Node, Collider, ITriggerEvent &#125; from &#x27;cc&#x27;;import &#123; Constant &#125; from &#x27;../framework/Constant&#x27;;const &#123; ccclass, property &#125; = _decorator;@ccclass(&#x27;PlayerPlane&#x27;)export class PlayerPlane extends Component &#123; onEnable() &#123; // 获取碰撞组件 const collider = this.getComponent(Collider); // 监听触发事件 collider.on(&#x27;onTriggerEnter&#x27;, this._onTriggerEnter, this); &#125; onDisable() &#123; const collider = this.getComponent(Collider); // 停止监听触发事件 collider.off(&#x27;onTriggerEnter&#x27;, this._onTriggerEnter, this); &#125; private _onTriggerEnter(event: ITriggerEvent) &#123; // 获取分组 const collisionGroup = event.otherCollider.getGroup(); // 遇到敌方飞机或敌方子弹，玩家飞机掉血 if (collisionGroup === Constant.CollistionType.ENEMY_PLANE || collisionGroup === Constant.CollistionType.ENEMY_BULLET) &#123; // 现在玩家飞机发生碰撞只在控制台输出文件 console.log(&#x27;player plane reduce blood&#x27;); &#125; &#125;&#125; 在 层级管理器 点击选中 playerPlane 节点, 在其 属性检查器 中点 添加组件 -&gt; 自定义脚本 -&gt; PlayerPlane, 将玩家飞机脚本绑定到 playerPlane 根节点, 保存场景。 修改 敌人飞机 脚本 EnemyPlane, 添加 onEnable() 和 onDisable() 及 回调函数 检测 敌人飞机 是否碰到 玩家子弹。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576import &#123; _decorator, Component, Node, Collider, ITriggerEvent &#125; from &#x27;cc&#x27;;import &#123; Constant &#125; from &#x27;../framework/Constant&#x27;;import &#123; GameManager &#125; from &#x27;../framework/GameManager&#x27;;const &#123; ccclass, property &#125; = _decorator;// 敌机被销毁的位置(超出屏幕下边沿后的Z轴坐标值)const OUTOFBOUNCE = 50;@ccclass(&#x27;EnemyPlane&#x27;)export class EnemyPlane extends Component &#123; @property public createBulletTime = 0.5; // 敌机子弹发射周期 private _enemySpeed = 0; private _needBullet = false; // 敌机是否发射子弹 private _currCreateBulletTime = 0; // 敌机当前子弹发射周期 private _gameManager: GameManager = null; onEnable() &#123; // 获取碰撞组件 const collider = this.getComponent(Collider); // 监听触发事件 collider.on(&#x27;onTriggerEnter&#x27;, this._onTriggerEnter, this); &#125; onDisable() &#123; // 获取碰撞组件 const collider = this.getComponent(Collider); // 停止监听触发事件 collider.off(&#x27;onTriggerEnter&#x27;, this._onTriggerEnter, this); &#125; private _onTriggerEnter(event: ITriggerEvent) &#123; // 获取分组 const collisionGroup = event.otherCollider.getGroup(); // 遇到玩家飞机或子弹，敌人飞机销毁 if (collisionGroup === Constant.CollistionType.PLAYER_PLANE || collisionGroup === Constant.CollistionType.PLAYER_BULLET) &#123; console.log(&#x27;trigger enemy destroy&#x27;); this.node.destroy(); this._gameManager.addScore(); // 分数增加 console.log(&#x27;reduce blood&#x27;); &#125; &#125; update(deltaTime: number) &#123; const pos = this.node.position; // 敌机向下飞 pos.z 值要增加 let movePos = pos.z + this._enemySpeed; // 增加用于判断是否要发射子弹 if (this._needBullet) &#123; this._currCreateBulletTime += deltaTime; if (this._currCreateBulletTime &gt; this.createBulletTime) &#123; // 敌机发射子弹，需要在 GameManager 添加相应函数 // this.node.position 是发射子弹时敌机的位置 this._gameManager.createEnemyBullet(this.node.position); this._currCreateBulletTime = 0; &#125; &#125; this.node.setPosition(pos.x, pos.y, movePos); if (movePos &gt; OUTOFBOUNCE) &#123; this.node.destroy(); &#125; &#125; show(gameManager: GameManager, speed: number, needBullet: boolean = false) &#123; this._gameManager = gameManager; this._enemySpeed = speed; this._needBullet = needBullet; &#125;&#125; 修改子弹脚本 Bullet, 添加 onEnable() 和 onDisable() 及 回调函数 检测 子弹 是否与 飞机 发生 碰撞。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061import &#123; _decorator, Component, Node, Collider, ITriggerEvent &#125; from &#x27;cc&#x27;;const &#123; ccclass, property &#125; = _decorator;@ccclass(&#x27;Bullet&#x27;)export class Bullet extends Component &#123; // @property // public bulletSpeed = 0; private _bulletSpeed = 0; //子弹速度改为私有变量 private _isEnemyBullet = false; // 判断是否为敌机子弹 update(deltaTime: number) &#123; let pos = this.node.position; // 获取子弹的位置 let moveLength = pos.z - this._bulletSpeed; // 计算每一帧子弹要移动的位置 // 计算每一帧子弹要移动的位置, 玩家和敌机子弹方向不同 if (this._isEnemyBullet) &#123; moveLength = pos.z + this._bulletSpeed; this.node.setPosition(pos.x, pos.y, moveLength); if (moveLength &gt; 50) &#123; this.node.destroy(); console.log(`enemy bullet destory`); &#125; &#125; else &#123; moveLength = pos.z - this._bulletSpeed; this.node.setPosition(pos.x, pos.y, moveLength); if (moveLength &lt; -50) &#123; this.node.destroy(); console.log(`player bullet destory`); &#125; &#125; &#125; // 从 GameManager 脚本接收子弹速度和是否为敌机子弹 show(speed: number, isEnemyBullet: boolean = false) &#123; this._bulletSpeed = speed; this._isEnemyBullet = isEnemyBullet; &#125; onEnable() &#123; // 获取碰撞组件 const collider = this.getComponent(Collider); // 监听触发事件 collider.on(&#x27;onTriggerEnter&#x27;, this._onTriggerEnter, this); &#125; onDisable() &#123; // 获取碰撞组件 const collider = this.getComponent(Collider); // 停止监听触发事件 collider.off(&#x27;onTriggerEnter&#x27;, this._onTriggerEnter, this); &#125; private _onTriggerEnter(event: ITriggerEvent) &#123; console.log(&#x27;trigger bullet destroy&#x27;); // 子弹碰到任意飞机都销毁 this.node.destroy(); &#125;&#125; 修改游戏控制脚本 GameManager 的 createEnemyBullet 函数, 给敌机发射的子弹设置 碰撞矩阵分组 和 碰撞掩码, 这两项在之前的 设置窗口 中 没有设置; 添加 计分函数(暂时为空函数) 。import &#123; _decorator, Component, Node, Prefab, instantiate, math, Vec3, BoxCollider &#125; from &#x27;cc&#x27;;import &#123; Bullet &#125; from &#x27;../bullet/Bullet&#x27;;import &#123; EnemyPlane &#125; from &#x27;../plane/EnemyPlane&#x27;;import &#123; Constant &#125; from &#x27;./Constant&#x27;;const &#123; ccclass, property &#125; = _decorator;@ccclass(&#x27;GameManager&#x27;)export class GameManager extends Component &#123; @property(Node) public playerPlane: Node = null; // 玩家飞机 @property(Prefab) public bullet01: Prefab = null; // 子弹1 @property(Prefab) public bullet02: Prefab = null; // 子弹2 @property(Prefab) public bullet03: Prefab = null; // 子弹3 @property(Prefab) public bullet04: Prefab = null; // 子弹4 @property(Prefab) public bullet05: Prefab = null; // 子弹5 @property public shootTime = 0.3; // 射击周期（间隔时间） @property public bulletSpeed = 1; // 子弹速度 @property(Node) public bulletRoot: Node = null; // 子弹管理节点 // 敌机 @property(Prefab) public enemy01: Prefab = null; // 敌机1 @property(Prefab) public enemy02: Prefab = null; // 敌机2 @property public createEnemyTime = 1; // 敌机生成时间 @property public enemy01Speed = 0.5; // 敌机1速度 @property public enemy02Speed = 0.7; // 敌机2速度 private _currShootTime = 0; private _isShooting = false; private _currCreateEnemyTiime = 0; // 当前敌机的生成时间 private _combinationInterval = Constant.Combination.PLAN1; // 组合的间隔状态 start() &#123; this._init(); &#125; update(deltaTime: number) &#123; this._currShootTime += deltaTime; if (this._isShooting &amp;&amp; this._currShootTime &gt; this.shootTime) &#123; this.createPlayerBullet(); this._currShootTime = 0; &#125; this._currCreateEnemyTiime += deltaTime; // 判断组合方式创建相应的敌机 if (this._combinationInterval === Constant.Combination.PLAN1) &#123; if (this._currCreateEnemyTiime &gt; this.createEnemyTime) &#123; this.createEnemyPlane(); this._currCreateEnemyTiime = 0; &#125; &#125; else if (this._combinationInterval === Constant.Combination.PLAN2) &#123; // 第二阶段，前两种组合随机出现 // 这里乘以 0.9 是缩短敌机出现的间隔时间 if (this._currCreateEnemyTiime &gt; this.createEnemyTime * 0.9) &#123; // 用于随机出现组合1或组合2 const randomCombination = math.randomRangeInt(1, 6); if (randomCombination === Constant.Combination.PLAN2) &#123; this.createCombination01(); &#125; else &#123; this.createEnemyPlane(); &#125; this._currCreateEnemyTiime = 0; &#125; &#125; else &#123; // 第三阶段，三个组合随机出现 // 这里乘以 0.9 是缩短敌机出现的间隔时间 if (this._currCreateEnemyTiime &gt; this.createEnemyTime * 0.8) &#123; // 用于随机出现组合1或组合2 const randomCombination = math.randomRangeInt(1, 7); if (randomCombination === Constant.Combination.PLAN2) &#123; this.createCombination01(); &#125; else if (randomCombination === Constant.Combination.PLAN3) &#123; this.createCombination02(); &#125; else &#123; this.createEnemyPlane(); &#125; this._currCreateEnemyTiime = 0; &#125; &#125; &#125; //创建玩家飞机的子弹 public createPlayerBullet() &#123; // 实例材质类型的子弹, 实例出来的对象不在场景中 const bullet = instantiate(this.bullet01); bullet.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 let pos = this.playerPlane.position; // 获取玩家飞机位置 // 子弹出现的位置为飞机 Z轴 -7 bullet.setPosition(pos.x, pos.y, pos.z - 7); // 获取 Bullet类 （子弹预制根节点添加 Bullet 脚本） const bulletComp = bullet.getComponent(Bullet); bulletComp.show(this.bulletSpeed, false); // 设置子弹速度 &#125; // 是否处理触摸状态，触摸才发射子弹 public isShooting(value: boolean) &#123; this._isShooting = value; &#125; public createEnemyPlane() &#123; // math 是 cc 带的数字模块 const whichEnemy = math.randomRangeInt(1, 3); let prefab: Prefab = null; let speed = 0; if (whichEnemy === Constant.EnemyType.TYPE1) &#123; prefab = this.enemy01; speed = this.enemy01Speed; &#125; else &#123; prefab = this.enemy02; speed = this.enemy02Speed; &#125; // 实例化预制 const enemy = instantiate(prefab); enemy.setParent(this.node); // 预制挂载到组件中 const enemyComp = enemy.getComponent(EnemyPlane); enemyComp.show(this, speed, true); // 敌机随机出现的X轴(左右)坐标范围 const randomPos = math.randomRangeInt(-25, 26); enemy.setPosition(randomPos, 0, -50); &#125; // 敌机出现组合1：5架飞机一字型同时出现 public createCombination01() &#123; const enemyArray = new Array&lt;Node&gt;(5); for (let i = 0; i &lt; enemyArray.length; i++) &#123; enemyArray[i] = instantiate(this.enemy01); const element = enemyArray[i]; element.parent = this.node; element.setPosition(-20 + i * 10, 0, -50); const enemyComp = element.getComponent(EnemyPlane); enemyComp.show(this, this.enemy01Speed, false); &#125; &#125; // 敌机出现组合1, 7架飞机V字型出现 public createCombination02() &#123; const enemyArray = new Array&lt;Node&gt;(7); // 7 架敌机的初始坐标 const combinationPos = [ -21, 0, -60, -14, 0, -55, -7, 0, -50, 0, 0, -45, 7, 0, -50, 14, 0, -55, 21, 0, -60, ]; for (let i = 0; i &lt; enemyArray.length; i++) &#123; enemyArray[i] = instantiate(this.enemy02); const element = enemyArray[i]; element.parent = this.node; const startIndex = i * 3; element.setPosition(combinationPos[startIndex], combinationPos[startIndex + 1], combinationPos[startIndex + 2]); const enemyComp = element.getComponent(EnemyPlane); enemyComp.show(this, this.enemy02Speed, false); &#125; &#125; // 敌机发射子弹 public createEnemyBullet(targetPos: Vec3) &#123; // 实例材质类型的子弹, 实例出来的对象不在场景中 const bullet = instantiate(this.bullet01); bullet.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 // 子弹出现的位置为飞机 Z轴 -7 bullet.setPosition(targetPos.x, targetPos.y, targetPos.z + 6); const bulletComp = bullet.getComponent(Bullet); // 敌机的子弹速度 要比敌机大一些 bulletComp.show(1, true); // 获取子弹的碰撞器组件 const colliderComp = bullet.getComponent(BoxCollider); // 设置敌机子弹的碰撞矩阵 colliderComp.setGroup(Constant.CollistionType.ENEMY_BULLET); // 设置碰撞掩码 与 玩家飞机 碰撞 colliderComp.setMask(Constant.CollistionType.PLAYER_PLANE); &#125; // 计分 public addScore() &#123; &#125; private _init() &#123; // 用于按下的时候即发射第一颗子弹 this._currShootTime = this.shootTime; this._changePlaneModel(); &#125; // 定时器函数 private _changePlaneModel() &#123; // this.schedule()四个参数：回调， 间隔时间，重复次数， 延迟时间 this.schedule(this._modeChanged, 10, 3); &#125; // 改变组合状态 private _modeChanged() &#123; this._combinationInterval++; &#125;&#125; 保存场景, 预览。 敌人飞机 或 子弹 碰到 玩家飞机 或 玩家子弹 会消失, 玩家飞机 目前还处于 无敌 状态。 &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"cocos creator","slug":"cocos-creator","permalink":"https://hujiyi.github.io/categories/cocos-creator/"}],"tags":[{"name":"cocos creator","slug":"cocos-creator","permalink":"https://hujiyi.github.io/tags/cocos-creator/"},{"name":"game","slug":"game","permalink":"https://hujiyi.github.io/tags/game/"}]},{"title":"学习笔记：使用 Cocos Creator 3.4.0 开发空战游戏 03——敌机出现","slug":"develop-an-airplane-game-in-cocos-creator-03","date":"2022-01-29T12:34:39.000Z","updated":"2022-10-11T01:40:13.015Z","comments":true,"path":"2022/01/29/develop-an-airplane-game-in-cocos-creator-03/","permalink":"https://hujiyi.github.io/2022/01/29/develop-an-airplane-game-in-cocos-creator-03/","excerpt":"","text":"开发工具 Cocos Dashboard 1.0.20 Cocos Creator 3.4.0 Visual Studio Code 1.63 Microsoft Edge 97.0.1072.69 制作敌人飞机 在 资源管理器 的 assets/script/ 创建名为 plane 的文件夹, 在 assets/script/plane/ 文件夹下创建脚本，命名为 EnemyPlane, 暂时不用编辑脚本内容。 在 资源管理器 的 assets/res/model/plane02 文件夹添加 材质，命名为 plane02, 修改 Effect 属性为 bulitin-unlit, 选中 USE TEXTURE, MainTexture 拖入图片 plane02, 保存材质。 复制上一步的材质到 assets/res/model/plane03 文件夹， 更改材质名为：plane03， 修改其 MainTexture 为图片plane03， 保存材质。 在 层级管理器 中创建一个 空节点，命名为 plane02, 将 资源管理器 中的 FBX 模型 plane02 拖到该节点，将模型名称改名为 body, 展开 body， 选中下面的 plane02, 把 Materials 中的材质替换为 plane02。 在 层级管理器 点击选中 plane02/body 节点, 修改属性 Rotation 的三个值改为 X:5, Y:5, Z:5， 放大 5倍。 在 层级管理器 点击选中 plane02 节点， 在 属性检查器 选择 添加组件 -&gt; 自定义脚本 -&gt; EnemyPlane, 把敌人飞机的脚本挂载到 plane02 根节点上。 将 层级管理器 中的 plane02 节点拖动到 资源管理器 的 assets/res/model/plane02 文件夹，做成 预制。 重复上面的步骤，制作 plane03 的 预制。 在 层级管理器 中删除 plane02 和 plane03 两个节点 敌机的管理 在 资源管理器 的 assets/script/framework/ 文件夹添加脚本 Constant 用于存放游戏里常用的类型, 比如 飞机类型、子弹类型 以及 飞机组合 等。Constant 类不需要继承自 Component, 编辑代码如以下所示： 123456789101112131415export class Constant &#123; // 敌机类型 public static EnemyType = &#123; TYPE1: 1, TYPE2: 2, &#125; // 敌机组合类型 public static Combination = &#123; PLAN1: 1, // 组合1, 每次随机1架敌机, 发射子弹 PLAN2: 2, // 组合2, 每次5架敌机，一 字型, 不发射子弹 PLAN3: 3, // 组合3, 每次7架敌机，V 字型, 不发射子弹 &#125;&#125; 编辑敌机脚本 EnemyPlane, 内容如以下代码所示： 12345678910111213141516171819202122232425262728293031import &#123; _decorator, Component, Node &#125; from &#x27;cc&#x27;;import &#123; GameManager &#125; from &#x27;../framework/GameManager&#x27;;const &#123; ccclass, property &#125; = _decorator;// 敌机被销毁的位置(超出屏幕下边沿后的Z轴坐标值)const OUTOFBOUNCE = 50;@ccclass(&#x27;EnemyPlane&#x27;)export class EnemyPlane extends Component &#123; private _enemySpeed = 0; private _gameManager: GameManager = null; update(deltaTime: number) &#123; const pos = this.node.position; // 敌机向下飞 pos.z 值要增加 let movePos = pos.z + this._enemySpeed; this.node.setPosition(pos.x, pos.y, movePos); if (movePos &gt; OUTOFBOUNCE) &#123; this.node.destroy(); &#125; &#125; show(gameManager: GameManager, speed: number) &#123; this._gameManager = gameManager; this._enemySpeed = speed; &#125;&#125; 修改 GameManager 脚本, 添加用于管理敌机的属性, 以及控制敌机 第一阶段 (前10秒)的出现。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136import &#123; _decorator, Component, Node, Prefab, instantiate, math &#125; from &#x27;cc&#x27;;import &#123; Bullet &#125; from &#x27;../bullet/Bullet&#x27;;import &#123; EnemyPlane &#125; from &#x27;../plane/EnemyPlane&#x27;;import &#123; Constant &#125; from &#x27;./Constant&#x27;;const &#123; ccclass, property &#125; = _decorator;@ccclass(&#x27;GameManager&#x27;)export class GameManager extends Component &#123; @property(Node) public playerPlane: Node = null; // 玩家飞机 @property(Prefab) public bullet01: Prefab = null; // 子弹1 @property(Prefab) public bullet02: Prefab = null; // 子弹2 @property(Prefab) public bullet03: Prefab = null; // 子弹3 @property(Prefab) public bullet04: Prefab = null; // 子弹4 @property(Prefab) public bullet05: Prefab = null; // 子弹5 @property public shootTime = 0.3; // 射击周期（间隔时间） @property public bulletSpeed = 1; // 子弹速度 @property(Node) public bulletRoot: Node = null; // 子弹管理节点 // 敌机 @property(Prefab) public enemy01: Prefab = null; // 敌机1 @property(Prefab) public enemy02: Prefab = null; // 敌机2 @property public createEnemyTime = 1; // 敌机生成时间 @property public enemy01Speed = 0.5; // 敌机1速度 @property public enemy02Speed = 0.7; // 敌机2速度 private _currShootTime = 0; private _isShooting = false; private _currCreateEnemyTiime = 0; // 当前敌机的生成时间 private _combinationInterval = Constant.Combination.PLAN1; // 组合的间隔状态 start() &#123; this._init(); &#125; update(deltaTime: number) &#123; this._currShootTime += deltaTime; if (this._isShooting &amp;&amp; this._currShootTime &gt; this.shootTime) &#123; this.createPlayerBullet(); this._currShootTime = 0; &#125; this._currCreateEnemyTiime += deltaTime; // 判断组合方式创建相应的敌机 if (this._combinationInterval === Constant.Combination.PLAN1) &#123; if (this._currCreateEnemyTiime &gt; this.createEnemyTime) &#123; this.createEnemyPlane(); this._currCreateEnemyTiime = 0; &#125; &#125; else if (this._combinationInterval === Constant.Combination.PLAN2) &#123; &#125; else &#123; &#125; &#125; //创建玩家飞机的子弹 public createPlayerBullet() &#123; // 实例材质类型的子弹, 实例出来的对象不在场景中 const bullet = instantiate(this.bullet01); bullet.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 let pos = this.playerPlane.position; // 获取玩家飞机位置 // 子弹出现的位置为飞机 Z轴 -7 bullet.setPosition(pos.x, pos.y, pos.z - 7); // 获取 Bullet类 （子弹预制根节点添加 Bullet 脚本） const bulletComp = bullet.getComponent(Bullet); bulletComp.bulletSpeed = this.bulletSpeed; // 设置子弹速度 &#125; // 是否处理触摸状态，触摸才发射子弹 public isShooting(value: boolean) &#123; this._isShooting = value; &#125; public createEnemyPlane() &#123; // math 是 cc 带的数字模块 const whichEnemy = math.randomRangeInt(1, 3); let prefab: Prefab = null; let speed = 0; if (whichEnemy === Constant.EnemyType.TYPE1) &#123; prefab = this.enemy01; speed = this.enemy01Speed; &#125; else &#123; prefab = this.enemy02; speed = this.enemy02Speed; &#125; // 实例化预制 const enemy = instantiate(prefab); enemy.setParent(this.node); // 预制挂载到组件中 const enemyComp = enemy.getComponent(EnemyPlane); enemyComp.show(this, speed); // 敌机随机出现的X轴(左右)坐标范围 const randomPos = math.randomRangeInt(-25, 26); enemy.setPosition(randomPos, 0, -50); &#125; private _init() &#123; // 用于按下的时候即发射第一颗子弹 this._currShootTime = this.shootTime; this._changePlaneModel(); &#125; // 定时器函数 private _changePlaneModel() &#123; // this.schedule()四个参数：回调， 间隔时间，重复次数， 延迟时间 this.schedule(this._modeChanged, 10, 3); &#125; // 改变组合状态 private _modeChanged() &#123; this._combinationInterval ++; &#125;&#125; 将 资源管理器 中的两个预制 plane02 和plane03 分别挂载到 层级管理器 中 gameManager 节点对应的位置。 保存场景, 预览，可以看到单架敌机出现。 继续编辑 GameManager 脚本, 控制敌机 第二阶段 (10-20秒) 组合1、组合2 随机出机 和 第三阶段 (20秒后)组合1、组合2、组合3 随机出现。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198import &#123; _decorator, Component, Node, Prefab, instantiate, math &#125; from &#x27;cc&#x27;;import &#123; Bullet &#125; from &#x27;../bullet/Bullet&#x27;;import &#123; EnemyPlane &#125; from &#x27;../plane/EnemyPlane&#x27;;import &#123; Constant &#125; from &#x27;./Constant&#x27;;const &#123; ccclass, property &#125; = _decorator;@ccclass(&#x27;GameManager&#x27;)export class GameManager extends Component &#123; @property(Node) public playerPlane: Node = null; // 玩家飞机 @property(Prefab) public bullet01: Prefab = null; // 子弹1 @property(Prefab) public bullet02: Prefab = null; // 子弹2 @property(Prefab) public bullet03: Prefab = null; // 子弹3 @property(Prefab) public bullet04: Prefab = null; // 子弹4 @property(Prefab) public bullet05: Prefab = null; // 子弹5 @property public shootTime = 0.3; // 射击周期（间隔时间） @property public bulletSpeed = 1; // 子弹速度 @property(Node) public bulletRoot: Node = null; // 子弹管理节点 // 敌机 @property(Prefab) public enemy01: Prefab = null; // 敌机1 @property(Prefab) public enemy02: Prefab = null; // 敌机2 @property public createEnemyTime = 1; // 敌机生成时间 @property public enemy01Speed = 0.5; // 敌机1速度 @property public enemy02Speed = 0.7; // 敌机2速度 private _currShootTime = 0; private _isShooting = false; private _currCreateEnemyTiime = 0; // 当前敌机的生成时间 private _combinationInterval = Constant.Combination.PLAN1; // 组合的间隔状态 start() &#123; this._init(); &#125; update(deltaTime: number) &#123; this._currShootTime += deltaTime; if (this._isShooting &amp;&amp; this._currShootTime &gt; this.shootTime) &#123; this.createPlayerBullet(); this._currShootTime = 0; &#125; this._currCreateEnemyTiime += deltaTime; // 判断组合方式创建相应的敌机 if (this._combinationInterval === Constant.Combination.PLAN1) &#123; if (this._currCreateEnemyTiime &gt; this.createEnemyTime) &#123; this.createEnemyPlane(); this._currCreateEnemyTiime = 0; &#125; &#125; else if (this._combinationInterval === Constant.Combination.PLAN2) &#123; // 第二阶段，前两种组合随机出现 // 这里乘以 0.9 是缩短敌机出现的间隔时间 if (this._currCreateEnemyTiime &gt; this.createEnemyTime * 0.9) &#123; // 用于随机出现组合1或组合2 const randomCombination = math.randomRangeInt(1, 6); if (randomCombination === Constant.Combination.PLAN2) &#123; this.createCombination01(); &#125; else &#123; this.createEnemyPlane(); &#125; this._currCreateEnemyTiime = 0; &#125; &#125; else &#123; // 第三阶段，三个组合随机出现 // 这里乘以 0.9 是缩短敌机出现的间隔时间 if (this._currCreateEnemyTiime &gt; this.createEnemyTime * 0.8) &#123; // 用于随机出现组合1或组合2 const randomCombination = math.randomRangeInt(1, 7); if (randomCombination === Constant.Combination.PLAN2) &#123; this.createCombination01(); &#125; else if (randomCombination === Constant.Combination.PLAN3) &#123; this.createCombination02(); &#125; else &#123; this.createEnemyPlane(); &#125; this._currCreateEnemyTiime = 0; &#125; &#125; &#125; //创建玩家飞机的子弹 public createPlayerBullet() &#123; // 实例材质类型的子弹, 实例出来的对象不在场景中 const bullet = instantiate(this.bullet01); bullet.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 let pos = this.playerPlane.position; // 获取玩家飞机位置 // 子弹出现的位置为飞机 Z轴 -7 bullet.setPosition(pos.x, pos.y, pos.z - 7); // 获取 Bullet类 （子弹预制根节点添加 Bullet 脚本） const bulletComp = bullet.getComponent(Bullet); bulletComp.bulletSpeed = this.bulletSpeed; // 设置子弹速度 &#125; // 是否处理触摸状态，触摸才发射子弹 public isShooting(value: boolean) &#123; this._isShooting = value; &#125; public createEnemyPlane() &#123; // math 是 cc 带的数字模块 const whichEnemy = math.randomRangeInt(1, 3); let prefab: Prefab = null; let speed = 0; if (whichEnemy === Constant.EnemyType.TYPE1) &#123; prefab = this.enemy01; speed = this.enemy01Speed; &#125; else &#123; prefab = this.enemy02; speed = this.enemy02Speed; &#125; // 实例化预制 const enemy = instantiate(prefab); enemy.setParent(this.node); // 预制挂载到组件中 const enemyComp = enemy.getComponent(EnemyPlane); enemyComp.show(this, speed); // 敌机随机出现的X轴(左右)坐标范围 const randomPos = math.randomRangeInt(-25, 26); enemy.setPosition(randomPos, 0, -50); &#125; // 敌机出现组合1：5架飞机一字型同时出现 public createCombination01() &#123; const enemyArray = new Array&lt;Node&gt;(5); for (let i = 0; i &lt; enemyArray.length; i++) &#123; enemyArray[i] = instantiate(this.enemy01); const element = enemyArray[i]; element.parent = this.node; element.setPosition(-20 + i * 10, 0, -50); const enemyComp = element.getComponent(EnemyPlane); enemyComp.show(this, this.enemy01Speed); &#125; &#125; // 敌机出现组合1, 7架飞机V字型出现 public createCombination02() &#123; const enemyArray = new Array&lt;Node&gt;(7); // 7 架敌机的初始坐标 const combinationPos = [ -21, 0, -60, -14, 0, -55, -7, 0, -50, 0, 0, -45, 7, 0, -50, 14, 0, -55, 21, 0, -60, ]; for (let i = 0; i &lt; enemyArray.length; i++) &#123; enemyArray[i] = instantiate(this.enemy02); const element = enemyArray[i]; element.parent = this.node; const startIndex = i * 3; element.setPosition(combinationPos[startIndex], combinationPos[startIndex + 1], combinationPos[startIndex + 2]); const enemyComp = element.getComponent(EnemyPlane); enemyComp.show(this, this.enemy02Speed); &#125; &#125; private _init() &#123; // 用于按下的时候即发射第一颗子弹 this._currShootTime = this.shootTime; this._changePlaneModel(); &#125; // 定时器函数 private _changePlaneModel() &#123; // this.schedule()四个参数：回调， 间隔时间，重复次数， 延迟时间 this.schedule(this._modeChanged, 10, 3); &#125; // 改变组合状态 private _modeChanged() &#123; this._combinationInterval++; &#125;&#125; 保存场景, 预览，20秒 后可以看到三种组合的敌机出现。 敌机发射子弹 修改 Bullet 脚本, 增加判断 敌机子弹 的逻辑。 1234567891011121314151617181920212223242526272829303132333435363738394041import &#123; _decorator, Component, Node &#125; from &#x27;cc&#x27;;const &#123; ccclass, property &#125; = _decorator;@ccclass(&#x27;Bullet&#x27;)export class Bullet extends Component &#123; // @property // public bulletSpeed = 0; private _bulletSpeed = 0; //子弹速度改为私有变量 private _isEnemyBullet = false; // 判断是否为敌机子弹 update(deltaTime: number) &#123; let pos = this.node.position; // 获取子弹的位置 let moveLength = pos.z - this._bulletSpeed; // 计算每一帧子弹要移动的位置 // 计算每一帧子弹要移动的位置, 玩家和敌机子弹方向不同 if (this._isEnemyBullet) &#123; moveLength = pos.z + this._bulletSpeed; this.node.setPosition(pos.x, pos.y, moveLength); if (moveLength &gt; 50) &#123; this.node.destroy(); console.log(`enemy bullet destory`); &#125; &#125; else &#123; moveLength = pos.z - this._bulletSpeed; this.node.setPosition(pos.x, pos.y, moveLength); if (moveLength &lt; -50) &#123; this.node.destroy(); console.log(`player bullet destory`); &#125; &#125; &#125; // 从 GameManager 脚本接收子弹速度和是否为敌机子弹 show(speed: number, isEnemyBullet: boolean = false) &#123; this._bulletSpeed = speed; this._isEnemyBullet = isEnemyBullet; &#125;&#125; 修改 EnemyPlane 脚本，增加 敌机发射子弹 逻辑。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748import &#123; _decorator, Component, Node &#125; from &#x27;cc&#x27;;import &#123; GameManager &#125; from &#x27;../framework/GameManager&#x27;;const &#123; ccclass, property &#125; = _decorator;// 敌机被销毁的位置(超出屏幕下边沿后的Z轴坐标值)const OUTOFBOUNCE = 50;@ccclass(&#x27;EnemyPlane&#x27;)export class EnemyPlane extends Component &#123; @property public createBulletTime = 0.5; // 敌机子弹发射周期 private _enemySpeed = 0; private _needBullet = false; // 敌机是否发射子弹 private _currCreateBulletTime = 0; // 敌机当前子弹发射周期 private _gameManager: GameManager = null; update(deltaTime: number) &#123; const pos = this.node.position; // 敌机向下飞 pos.z 值要增加 let movePos = pos.z + this._enemySpeed; // 增加用于判断是否要发射子弹 if (this._needBullet) &#123; this._currCreateBulletTime += deltaTime; if (this._currCreateBulletTime &gt; this.createBulletTime) &#123; // 敌机发射子弹，需要在 GameManager 添加相应函数 // this.node.position 是发射子弹时敌机的位置 this._gameManager.createEnemyBullet(this.node.position); this._currCreateBulletTime = 0; &#125; &#125; this.node.setPosition(pos.x, pos.y, movePos); if (movePos &gt; OUTOFBOUNCE) &#123; this.node.destroy(); &#125; &#125; show(gameManager: GameManager, speed: number, needBullet: boolean = false) &#123; this._gameManager = gameManager; this._enemySpeed = speed; this._needBullet = needBullet; &#125;&#125; 修改 GameManager 脚本控制敌机子弹发射, 添加 createEnemyBullet 方法, 修改所有 show 方法, 调整参数个数 。import &#123; _decorator, Component, Node, Prefab, instantiate, math, Vec3 &#125; from &#x27;cc&#x27;;import &#123; Bullet &#125; from &#x27;../bullet/Bullet&#x27;;import &#123; EnemyPlane &#125; from &#x27;../plane/EnemyPlane&#x27;;import &#123; Constant &#125; from &#x27;./Constant&#x27;;const &#123; ccclass, property &#125; = _decorator;@ccclass(&#x27;GameManager&#x27;)export class GameManager extends Component &#123; @property(Node) public playerPlane: Node = null; // 玩家飞机 @property(Prefab) public bullet01: Prefab = null; // 子弹1 @property(Prefab) public bullet02: Prefab = null; // 子弹2 @property(Prefab) public bullet03: Prefab = null; // 子弹3 @property(Prefab) public bullet04: Prefab = null; // 子弹4 @property(Prefab) public bullet05: Prefab = null; // 子弹5 @property public shootTime = 0.3; // 射击周期（间隔时间） @property public bulletSpeed = 1; // 子弹速度 @property(Node) public bulletRoot: Node = null; // 子弹管理节点 // 敌机 @property(Prefab) public enemy01: Prefab = null; // 敌机1 @property(Prefab) public enemy02: Prefab = null; // 敌机2 @property public createEnemyTime = 1; // 敌机生成时间 @property public enemy01Speed = 0.5; // 敌机1速度 @property public enemy02Speed = 0.7; // 敌机2速度 private _currShootTime = 0; private _isShooting = false; private _currCreateEnemyTiime = 0; // 当前敌机的生成时间 private _combinationInterval = Constant.Combination.PLAN1; // 组合的间隔状态 start() &#123; this._init(); &#125; update(deltaTime: number) &#123; this._currShootTime += deltaTime; if (this._isShooting &amp;&amp; this._currShootTime &gt; this.shootTime) &#123; this.createPlayerBullet(); this._currShootTime = 0; &#125; this._currCreateEnemyTiime += deltaTime; // 判断组合方式创建相应的敌机 if (this._combinationInterval === Constant.Combination.PLAN1) &#123; if (this._currCreateEnemyTiime &gt; this.createEnemyTime) &#123; this.createEnemyPlane(); this._currCreateEnemyTiime = 0; &#125; &#125; else if (this._combinationInterval === Constant.Combination.PLAN2) &#123; // 第二阶段，前两种组合随机出现 // 这里乘以 0.9 是缩短敌机出现的间隔时间 if (this._currCreateEnemyTiime &gt; this.createEnemyTime * 0.9) &#123; // 用于随机出现组合1或组合2 const randomCombination = math.randomRangeInt(1, 6); if (randomCombination === Constant.Combination.PLAN2) &#123; this.createCombination01(); &#125; else &#123; this.createEnemyPlane(); &#125; this._currCreateEnemyTiime = 0; &#125; &#125; else &#123; // 第三阶段，三个组合随机出现 // 这里乘以 0.9 是缩短敌机出现的间隔时间 if (this._currCreateEnemyTiime &gt; this.createEnemyTime * 0.8) &#123; // 用于随机出现组合1或组合2 const randomCombination = math.randomRangeInt(1, 7); if (randomCombination === Constant.Combination.PLAN2) &#123; this.createCombination01(); &#125; else if (randomCombination === Constant.Combination.PLAN3) &#123; this.createCombination02(); &#125; else &#123; this.createEnemyPlane(); &#125; this._currCreateEnemyTiime = 0; &#125; &#125; &#125; //创建玩家飞机的子弹 public createPlayerBullet() &#123; // 实例材质类型的子弹, 实例出来的对象不在场景中 const bullet = instantiate(this.bullet01); bullet.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 let pos = this.playerPlane.position; // 获取玩家飞机位置 // 子弹出现的位置为飞机 Z轴 -7 bullet.setPosition(pos.x, pos.y, pos.z - 7); // 获取 Bullet类 （子弹预制根节点添加 Bullet 脚本） const bulletComp = bullet.getComponent(Bullet); bulletComp.show(this.bulletSpeed, false); // 设置子弹速度 &#125; // 是否处理触摸状态，触摸才发射子弹 public isShooting(value: boolean) &#123; this._isShooting = value; &#125; public createEnemyPlane() &#123; // math 是 cc 带的数字模块 const whichEnemy = math.randomRangeInt(1, 3); let prefab: Prefab = null; let speed = 0; if (whichEnemy === Constant.EnemyType.TYPE1) &#123; prefab = this.enemy01; speed = this.enemy01Speed; &#125; else &#123; prefab = this.enemy02; speed = this.enemy02Speed; &#125; // 实例化预制 const enemy = instantiate(prefab); enemy.setParent(this.node); // 预制挂载到组件中 const enemyComp = enemy.getComponent(EnemyPlane); enemyComp.show(this, speed, true); // 敌机随机出现的X轴(左右)坐标范围 const randomPos = math.randomRangeInt(-25, 26); enemy.setPosition(randomPos, 0, -50); &#125; // 敌机出现组合1：5架飞机一字型同时出现 public createCombination01() &#123; const enemyArray = new Array&lt;Node&gt;(5); for (let i = 0; i &lt; enemyArray.length; i++) &#123; enemyArray[i] = instantiate(this.enemy01); const element = enemyArray[i]; element.parent = this.node; element.setPosition(-20 + i * 10, 0, -50); const enemyComp = element.getComponent(EnemyPlane); enemyComp.show(this, this.enemy01Speed, false); &#125; &#125; // 敌机出现组合1, 7架飞机V字型出现 public createCombination02() &#123; const enemyArray = new Array&lt;Node&gt;(7); // 7 架敌机的初始坐标 const combinationPos = [ -21, 0, -60, -14, 0, -55, -7, 0, -50, 0, 0, -45, 7, 0, -50, 14, 0, -55, 21, 0, -60, ]; for (let i = 0; i &lt; enemyArray.length; i++) &#123; enemyArray[i] = instantiate(this.enemy02); const element = enemyArray[i]; element.parent = this.node; const startIndex = i * 3; element.setPosition(combinationPos[startIndex], combinationPos[startIndex + 1], combinationPos[startIndex + 2]); const enemyComp = element.getComponent(EnemyPlane); enemyComp.show(this, this.enemy02Speed, false); &#125; &#125; // 敌机发射子弹 public createEnemyBullet(targetPos: Vec3) &#123; // 实例材质类型的子弹, 实例出来的对象不在场景中 const bullet = instantiate(this.bullet01); bullet.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 // 子弹出现的位置为飞机 Z轴 -7 bullet.setPosition(targetPos.x, targetPos.y, targetPos.z + 6); const bulletComp = bullet.getComponent(Bullet); // 敌机的子弹速度 要比敌机大一些 bulletComp.show(1, true); &#125; private _init() &#123; // 用于按下的时候即发射第一颗子弹 this._currShootTime = this.shootTime; this._changePlaneModel(); &#125; // 定时器函数 private _changePlaneModel() &#123; // this.schedule()四个参数：回调， 间隔时间，重复次数， 延迟时间 this.schedule(this._modeChanged, 10, 3); &#125; // 改变组合状态 private _modeChanged() &#123; this._combinationInterval++; &#125;&#125; 重新预览, 单架出现的敌机向玩家方向发射子弹 &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"cocos creator","slug":"cocos-creator","permalink":"https://hujiyi.github.io/categories/cocos-creator/"}],"tags":[{"name":"cocos creator","slug":"cocos-creator","permalink":"https://hujiyi.github.io/tags/cocos-creator/"},{"name":"game","slug":"game","permalink":"https://hujiyi.github.io/tags/game/"}]},{"title":"学习笔记：使用 Cocos Creator 3.4.0 开发空战游戏 02——玩家飞机","slug":"develop-an-airplane-game-in-cocos-creator-02","date":"2022-01-24T10:59:51.000Z","updated":"2022-10-11T01:40:12.999Z","comments":true,"path":"2022/01/24/develop-an-airplane-game-in-cocos-creator-02/","permalink":"https://hujiyi.github.io/2022/01/24/develop-an-airplane-game-in-cocos-creator-02/","excerpt":"","text":"开发工具 Cocos Dashboard 1.0.20 Cocos Creator 3.4.0 Visual Studio Code 1.63 Microsoft Edge 97.0.1072.69 创建玩家飞机 在 层级管理器 中 创建一个空节点, 命名为 playerPlane, 在 资源管理器 中拖动的 FBX 模型 assets/res/model/plane01/plane01 到 playerPlane 节点中, 并将节点 playerPlane 下的模型名称 plane01(模型根节点) 改名为 body。 在 资源管理器 中点击选中 assets/res/model/plane01 文件夹, 右键 -&gt; 创建 -&gt; 材质, 命名为 playerPlane。 将材质 playerPlane 的属性 Effect 更改为 builtin-unlit; 属性 USE TEXTURE 打勾, 飞机图片 plane01 拖动到 MainTexture, 保存材质。 在 层级管理器 中, 点击选中 playerPlane/body/plane01 节点, 将上一步创建的材质 playerPlane 拖动到其 属性检查器 中的 Materials[0], 保存场景。 在 层级管理器 中点击选中 playerPlane/body 节点, 修改缩放属性 Scale 的值为：X:8, Y:8, Z:8 (放大8倍)。 此时飞机与背景板重叠，在 层级管理器 中点击选中 movingSceneBg, 将其 Position 的 Y轴 修改为: -20 (背景往下移)。 在 层级管理器 中点击选中 playerPlane 节点，将其拖动到 资源管理器 中的 assets/res/model/plane01 文件夹 制作 成 预制, 保存场景。 控制飞机移动 在 资源管理器 点击选中 assets/script/ 文件夹, 右键 -&gt; 创建 -&gt; 文件夹, 命名为 ui, 在该文件夹中添加脚本 UIManager, 双击打开该脚本进行编辑。 1234567891011121314151617181920212223242526272829import &#123; _decorator, Component, Node, Touch, EventTouch, Input &#125; from &#x27;cc&#x27;;const &#123; ccclass, property &#125; = _decorator;@ccclass(&#x27;UIManager&#x27;)export class UIManager extends Component &#123; @property public playerPlaneSpeed = 1; @property(Node) public playerPlane: Node = null; start() &#123; this.node.on(Input.EventType.TOUCH_MOVE, this._touchMove, this); &#125; private _touchMove(touch: Touch, event: EventTouch) &#123; // touch.getDelta() 获取当前触点值与上一次触点值的差值 let delta = touch.getDelta(); let pos = this.playerPlane.position; // 获取当前节点的位置 // 在速度前乘以 0.01 是用于调整移动的速度 this.playerPlane.setPosition( pos.x + 0.01 * this.playerPlaneSpeed * delta.x, pos.y, pos.z - 0.01 * this.playerPlaneSpeed * delta.y); &#125;&#125; 在 层级管理器 中点击选中场景 airplane, 右键 -&gt; 创建 -&gt; UI组件 -&gt; Canvas(画布), 名字默认。 在 层级管理器 中点击选中 Canvas 节点, 在 属性检查器 点 添加组件 -&gt; 自定义脚本 -&gt; UIManager, 将上一步编辑好的脚本 UIManager 挂载到 Canvas 根节点。 将 层级管理器 中的 playerPlane 节点拖到 Canvas 节点 属性检查器 的 playerPlane 属性中, 修改 playerPlaneSpeed 值为 8，保存场景，预览。 玩家飞机子弹 在 资源管理器 点击选中 assets/res/effect/bullet/ 文件夹, 右键 -&gt; 创建 -&gt; 材质, 命名为 bullet01, 修改 Effect 为 bulitin-unlit, 此处子弹模型包含透明外环效果, 将 Technique 修改为 3-alpha-blend 模式; 选中 USE TEXTURE, 将图片 bullet01 拖动到 属性检查器 中的属性 MainTexture, 在 属性检查器 右上角点 保存。 选中已经制作好的子弹材质 bullet01, Ctrl+D 快速复制为 4 个(bullet02 - bullet05), 分别将各个新材质的属性 MainTexture 更改为对应的图片, 保存。 在 层级管理器 中创建一个名为 bullet01 的空节点， 点击选中 bullet01 节点, 右键 -&gt; 创建 -&gt; 3D对象 -&gt; Quad(四方形), 将其改名为 body。 创建好的 Quad(四方形) 垂直于背景， 将其 Rotation 的 X轴 改为 -90, 摆正其位置, 修改其 Materials 为 材质 bullet01; 缩放属性 Scale(缩放) 调整为 5倍 大小，Scale: X:5, Y:5, Z:5 。 在 资源管理器 的 script 文件夹中创建 bullet 文件夹, 并创建子弹脚本 Bullet 处理子弹的运行逻辑和子弹的销毁。 123456789101112131415161718192021222324import &#123; _decorator, Component, Node &#125; from &#x27;cc&#x27;;const &#123; ccclass, property &#125; = _decorator;const OUTOFRANGE = 50; // 子弹移动的最大范围@ccclass(&#x27;Bullet&#x27;)export class Bullet extends Component &#123; @property public bulletSpeed = 0; update(deltaTime: number) &#123; let pos = this.node.position; // 获取子弹的位置 let moveLength = pos.z - this.bulletSpeed; // 计算每一帧子弹要移动的位置 this.node.setPosition(pos.x, pos.y, moveLength); if (moveLength &gt; OUTOFRANGE) &#123; this.node.destroy(); console.log(`bullet destory`); &#125; &#125;&#125; 在 层级管理器 点击选中 bullet01 节点, 在 属性检查器 中点击 添加组件 -&gt; 自定义脚本 -&gt; Bullet, 将脚本绑定到子弹根节点上; 然后将 层级管理器 中 bullet01 的节点拖动到 资源管理器 的 assets/res/effect/bullet/ 文件夹中，变成预制。 在 资源管理器 中点击选中 assets/res/effect/bullet/bullet01 预制, Ctrl+D 快速复制为 4 个(bullet02 - bullet05)。 在 资源管理器 中分别双击 assets/res/effect/bullet/ 文件夹中的预制 bullet02 - bullet05, 将 body 中的 Materials 替换为对应的 子弹材质, 保存场景。 在 层级管理器 中 删除 或 不显示 (否则子弹会一直出现在屏幕上)子弹节点 bullet01, 并保存。 控制子弹发射 在 资源管理器 创建 assets/script/framework 文件夹, 然后创建名为 GameManager 的脚本。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970import &#123; _decorator, Component, Node, Prefab, instantiate &#125; from &#x27;cc&#x27;;import &#123; Bullet &#125; from &#x27;../bullet/Bullet&#x27;;const &#123; ccclass, property &#125; = _decorator;@ccclass(&#x27;GameManager&#x27;)export class GameManager extends Component &#123; @property(Node) public playerPlane: Node = null; // 玩家飞机 @property(Prefab) public bullet01: Prefab = null; // 子弹1 @property(Prefab) public bullet02: Prefab = null; // 子弹2 @property(Prefab) public bullet03: Prefab = null; // 子弹3 @property(Prefab) public bullet04: Prefab = null; // 子弹4 @property(Prefab) public bullet05: Prefab = null; // 子弹5 @property public shootTime = 0.3; // 射击周期（间隔时间） @property public bulletSpeed = 1; // 子弹速度 @property(Node) public bulletRoot: Node = null; // 子弹管理节点 private _currShootTime = 0; private _isShooting = false; start() &#123; this._init(); &#125; update(deltaTime: number) &#123; this._currShootTime += deltaTime; if (this._isShooting &amp;&amp; this._currShootTime &gt; this.shootTime) &#123; this.createPlayerBullet(); this._currShootTime = 0; &#125; &#125; //创建玩家飞机的子弹 public createPlayerBullet() &#123; // 实例材质类型的子弹, 实例出来的对象不在场景中 const bullet = instantiate(this.bullet01); bullet.setParent(this.bulletRoot); // 子弹挂载到子弹管理节点中 let pos = this.playerPlane.position; // 获取玩家飞机位置 // 子弹出现的位置为飞机 Z轴 -7 bullet.setPosition(pos.x, pos.y, pos.z - 7); // 获取 Bullet类 （子弹预制根节点添加 Bullet 脚本） const bulletComp = bullet.getComponent(Bullet); bulletComp.bulletSpeed = this.bulletSpeed; // 设置子弹速度 &#125; // 是否处理触摸状态，触摸才发射子弹 public isShooting(value: boolean) &#123; this._isShooting = value; &#125; private _init() &#123; // 用于按下的时候即发射第一颗子弹 this._currShootTime = this.shootTime; &#125;&#125; 修改 UIManager 脚本本以更配合 GameManager 脚本使用 123456789101112131415161718192021222324252627282930313233343536373839404142434445import &#123; _decorator, Component, Node, Touch, EventTouch, Input &#125; from &#x27;cc&#x27;;import &#123; GameManager &#125; from &#x27;../framework/GameManager&#x27;;const &#123; ccclass, property &#125; = _decorator;@ccclass(&#x27;UIManager&#x27;)export class UIManager extends Component &#123; @property public playerPlaneSpeed = 1; @property(Node) public playerPlane: Node = null; // 添加游戏控制脚本 @property(GameManager) public gameManager:GameManager = null; start() &#123; this.node.on(Input.EventType.TOUCH_START, this._touchStart, this); this.node.on(Input.EventType.TOUCH_MOVE, this._touchMove, this); this.node.on(Input.EventType.TOUCH_END, this._touchEnd, this); &#125; private _touchMove(touch: Touch, event: EventTouch) &#123; // touch.getDelta() 获取当前触点值与上一次触点值的差值 let delta = touch.getDelta(); let pos = this.playerPlane.position; // 获取当前节点的位置 // 在速度前乘以 0.01 是用于调整移动的速度 this.playerPlane.setPosition( pos.x + 0.01 * this.playerPlaneSpeed * delta.x, pos.y, pos.z - 0.01 * this.playerPlaneSpeed * delta.y); &#125; // 开始触摸屏幕的回调方法 private _touchStart(touch: Touch, event: EventTouch) &#123; this.gameManager.isShooting(true); // 触摸屏幕时玩家飞机开始射击 &#125; private _touchEnd(touch: Touch, event: EventTouch) &#123; // 停止触摸时玩家飞机结束射击 this.gameManager.isShooting(false); &#125;&#125; 在 层级管理器 中点击选中场景 airplane, 右键-&gt; 空节点，命名为 bulletManager, 创建子弹管理节点。 在 层级管理器 中点击选中场景 airplane, 右键-&gt; 空节点，命名为 gameManager, 在其 属性检查器 中分别添加玩家飞机节点 playerPlane, 子弹预制：bullet01 - bullet05, 子弹管理节点BulletRoot: bulletManager。 在 层级管理器 点击选中 Canvas节点， 将 gameManager 节点拖动到其 UIManamet 中 GameManager 的属性。 保存场景，预览。子弹速度慢，可以将 gameManager 节点 的 shootTime 改为 0.1 ， 缩短子弹发射间隔，提高速度，或是将 bulletSpeed 值改大。 &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"cocos creator","slug":"cocos-creator","permalink":"https://hujiyi.github.io/categories/cocos-creator/"}],"tags":[{"name":"cocos creator","slug":"cocos-creator","permalink":"https://hujiyi.github.io/tags/cocos-creator/"},{"name":"game","slug":"game","permalink":"https://hujiyi.github.io/tags/game/"}]},{"title":"学习笔记：使用 Cocos Creator 3.4.0 开发空战游戏 01——无限滚动的背景","slug":"develop-an-airplane-game-in-cocos-creator-01","date":"2022-01-23T06:32:40.000Z","updated":"2022-10-11T01:40:12.919Z","comments":true,"path":"2022/01/23/develop-an-airplane-game-in-cocos-creator-01/","permalink":"https://hujiyi.github.io/2022/01/23/develop-an-airplane-game-in-cocos-creator-01/","excerpt":"","text":"开发工具 Cocos Dashboard 1.0.20 Cocos Creator 3.4.0 Visual Studio Code 1.63 Microsoft Edge 97.0.1072.69 游戏配套素材资源下载：游戏开发配套素材资源 项目准备 启动 Cocos Dashboard, 点 新建 按钮， 项目类型选择 Empty(3D), 输入 项目名称， 选择项目保存 位置，点 创建并打开 按钮，完成项目的创建。 下载 游戏开发配套素材资源 并解压缩到 当前文件夹, 将解压后的 res文件夹 拖动到当前项目的 资源管理器 的 assets 文件夹中。如下图所示： 创建场景 在 资源管理器 中点击选中 assets/ 文件夹， 右键 -&gt; 创建 -&gt; 文件夹, 将文件夹命名为 scene。 在 资源管理器 中点击选中 assets/scene/ 文件夹, 右键 -&gt; 创建 -&gt; 场景, 将场景命名为 airplane。 双击打开 airplane 场景 创建背景材质 在 资源管理器 中点击选中 assets/res/ 文件夹, 右键 -&gt; 创建 -&gt; 文件夹, 将文件夹命名为 background。 点击选中 background/ 文件夹, 右键 -&gt; 创建 -&gt; 材质, 材质文件命名为 bg。 编辑材质 bg 的属性，Effect 的值更改为 builtin-unlit， USE TEXTURE 打勾, 将背景图片 assets/res/texture/bg01.png 拖动到 MainTexture。 在 属性检查器 右上角选 保存 (打勾图标), 完成背景材质的创建 。 创建背景节点 在 层级管理器 点击选中场景 airPlane， 右键 -&gt; 创建 -&gt; 空节点, 新节点命名为 movingSceneBg。 点击选中 movingSceneBg 节点, 右键 -&gt; 创建 -&gt; 3D对象 -&gt; Plane平面, 命名为 bg01。 将上一步创建的材质 bg 拖动到 bg01 的属性 cc.MeshRenderer -&gt; Materials 中, 修改缩放属性 Scale 的值为: X:6, Y:1, Z:9 。 调整主相机视角 在 主菜单 选择 Cocos Creator -&gt; 偏好设置, 打开 偏好设置 对话框 。 在 偏好设置 对话框的右侧列表选择 设置管理器， 在右侧窗格输入设置名称 develop, 点 新增 按钮添加新设备 新设备的 宽高 设置为 720 X 1280, 点 修改 保存设备信息, 关闭对话框。 在 场景编辑器 中更改 渲染输出目标分辨率, 将 目标设备 更改为刚才添加的 develop(720x1280) 。 在 层级管理器 中选中相机 Main Camera, 在 场景编辑器 中点击相机向上的坐标轴，并向上拉动以在 场景编辑器 右下角的预览窗口中看到背景图片(下图中 数字6 的位置)。 继续修改相机属性(如上图所示)，让相机能完全显示整个背景图片： 位置 Position: X:0, Y:30, Z:0 旋转 Rotation: X:-90, Y:0, Z:0 缩放 Scale：X:1, Y:1, Z:1 投影方式 Projection: ORTHO (正交相机) 视距框大小 OrthoHeight: 45 背景无限滚动 在 层级管理器 点击选中 movingSceneBg 下的 bg01 背景节点, Ctrl+D 复制背景节点为 bg02 。 选中复制好的 bg02， 通过 Z轴 将其拖动到定位值约 -90 处，bg01 与 bg02 无明显黑边即可, 保存场景。 在 资源管理器 中点击选中 assets/ 文件夹, 右键 -&gt; 创建 -&gt; 文件夹, 将文件夹命名为 script。 在 资源管理器 中点击选中 assets/script/ 文件夹, 右键 -&gt; 创建 -&gt; 脚本(TypeScript), 脚本命名为MovingSceneBg。 在 资源管理器 中双击脚本文件 assets/script/MovingSceneBg，在打开的 VS Code 中编辑脚本文件。 如果无法关联脚本，可以在 主菜单 -&gt; 偏好设置，手动设置 默认脚本编辑器 。 编辑脚本文件 MovingSceneBg 内容如以下代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445import &#123; _decorator, Component, Node &#125; from &#x27;cc&#x27;;const &#123; ccclass, property &#125; = _decorator;@ccclass(&#x27;movingSceneBg&#x27;)export class movingSceneBg extends Component &#123; @property(Node) bg01: Node = null; @property(Node) bg02: Node = null; // 移动速度 private _bgSpeed = 10; // 移动的范围， 90 为背景的长度 private _bgMovingRange = 90; start() &#123; this._init(); &#125; update(deltaTime: number) &#123; this._moveBackground(deltaTime); &#125; private _init() &#123; // 两个背景的初始化位置 this.bg01.setPosition(0, 0, 0); this.bg02.setPosition(0, 0, -this._bgMovingRange); &#125; private _moveBackground(deltaTime: number) &#123; // 设置每一帧移动后到的本地坐标，此处只需要移动 Z 轴 this.bg01.setPosition(0, 0, this.bg01.position.z + this._bgSpeed * deltaTime); this.bg02.setPosition(0, 0, this.bg02.position.z + this._bgSpeed * deltaTime); // 是否超出移动范围 if (this.bg01.position.z &gt; this._bgMovingRange) &#123; this.bg01.setPosition(0, 0, this.bg02.position.z - this._bgMovingRange); &#125; else if (this.bg02.position.z &gt; this._bgMovingRange) &#123; this.bg02.setPosition(0, 0, this.bg01.position.z - this._bgMovingRange); &#125; &#125;&#125; 在 层级管理器 选中 movingSceneBg 节点, 在右侧的 属性检查器 点 添加组件 按钮，在弹出的下拉框中选择 自定义脚本 -&gt; MovingSceneBg。 将 层级管理器 中 movingSceneBg 节点下的背景 bg01 和 bg02 分别拖到右侧 属性检查器 内由 MovingSceneBg 脚本定义的两个属性 Bg01 和Bg02 中, 如下图所示: 保存场景， 运行预览, 无限滚动背景完成 。 小结使用脚本控制游戏对象的基本操作步骤： 创建空节点并添加对象 创建材质，并添加到上一步骤创建的节点的对象中 添加控制节点的脚本 把脚本挂载到节点 添加脚本需要的公共属性(如果在脚本中定义有的话) &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"cocos creator","slug":"cocos-creator","permalink":"https://hujiyi.github.io/categories/cocos-creator/"}],"tags":[{"name":"cocos creator","slug":"cocos-creator","permalink":"https://hujiyi.github.io/tags/cocos-creator/"},{"name":"game","slug":"game","permalink":"https://hujiyi.github.io/tags/game/"}]},{"title":"Python pip 使用国内镜像源","slug":"pip-config-sources","date":"2021-12-21T08:41:14.000Z","updated":"2022-10-11T01:40:13.267Z","comments":true,"path":"2021/12/21/pip-config-sources/","permalink":"https://hujiyi.github.io/2021/12/21/pip-config-sources/","excerpt":"","text":"1、执行以下两个命令，设置全局使用国内源（中科大） 123pip config set global.index-url https://mirrors.ustc.edu.cn/pypi/web/simplepip config set global.trusted-host https://mirrors.ustc.edu.cn/pypi/web/simple 2、输出（查看）现有的pip源： 1pip config list","categories":[{"name":"python","slug":"python","permalink":"https://hujiyi.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://hujiyi.github.io/tags/python/"},{"name":"pip","slug":"pip","permalink":"https://hujiyi.github.io/tags/pip/"}]},{"title":"使用 Flask 编写 RESTful API","slug":"flask-webapi","date":"2021-12-09T12:59:24.000Z","updated":"2022-10-11T01:40:13.219Z","comments":true,"path":"2021/12/09/flask-webapi/","permalink":"https://hujiyi.github.io/2021/12/09/flask-webapi/","excerpt":"","text":"HTTP 的常用请求方法如下: HTTP 方法 行为 示例 GET 获取资源的信息 http://example.com/api/orders GET 获取某个特定资源的信息 http://example.com/api/orders/123 POST 创建新资源 http://example.com/api/orders PUT 更新资源 http://example.com/api/orders/123 PATCH 对 PUT 方法的补充，用来对已知资源进行局部更新 http://example.com/api/orders/123 DELETE 删除资源 http://example.com/api/orders/123 REST 设计不需要特定的数据格式。在请求中数据可以以 JSON 形式, 或者有时候作为 url 中查询参数项。 RESTful API规划 HTTP 方法 URL 动作 GET http://127.0.0.1:5000/api/v1/books 查询图书列表，支持分页查询，分页的参数为JSON格式数据：&#123;&quot;limit&quot;:10, &quot;offset&quot;:0&#125; POST http://127.0.0.1:5000/api/v1/books 添加新图书 GET http://127.0.0.1:5000/api/v1/books/[book_id] 查询指定 id 的一本图书 PUT http://127.0.0.1:5000/api/v1/books/[book_id] 更新指定 id 的图书 PATCH http://127.0.0.1:5000/api/v1/books/[book_id] 更新指定 id 的图书, 与 PUT 方法相同 DELETE http://127.0.0.1:5000/api/v1/books/[book_id] 删除指定 id 的图书 添加、修改 图书时，图书信息为 JSON 数据， 数据格式示例：&#123;&quot;title&quot;:&quot;Python Web&quot;,&quot;author&quot;:&quot;Tony John&quot;,&quot;summary&quot;:&quot;This is a good book&quot;,&quot;published&quot;:&quot;2020&quot;&#125; 实际部署时，将 URL 中的 127.0.0.1:5000 替换为相应的 主机名 或 IP地址 创建项目创建名为 flask-book-app 的 flask 项目(步骤略) 项目中需要的包： flask： Python 编写的 Web 应用程序框架 python-dotenv: 从文件中读取键值对，并将其设置为环境变量 flask-sqlalchemy： 数据库 ORM flask-restful: 快速构建 REST APIs 的 Flask 扩展 flask-marshmallow：序列化和反序列化模块, 用来将复杂的 orm 对象 与 python 原生数据类型之间相互转换的库 flask-cors： 跨域请求配置模块 marshmallow-sqlalchemy: 用于 flask-marshmallow 与 flask-sqlalchemy 的集成 添加配置文件 .flaskenv, 内容如以下代码： 12FLASK_ENV=developmentFLASK_APP=bookapp 使用包组织项目代码Flask 对项目结构没有固定要求，可以将所有代码放在 app.py 文件中, 但是这样会导致代码难以阅读和修改，因此这里使用包来组织整个项目的代码。 项目的最终结构如以下图所示： 12345678.|-- bookapp --- 包名| |-- __init__.py --- 包构造文件，创建程序实例| |-- command.py --- 命令函数| |-- models.py --- 模型类| `-- views.py --- 视图函数，编写 RESTful API 的方法|-- venv --- 虚拟环境文件夹`-- data.db --- Sqlite 数据库文件 添加文件夹 bookapp, 并在该文件夹中添加两个文件： __init__.py, views.py 编辑文件 bookapp\\__init__.py, 内容如以下代码： 123456from flask import Flaskapp = Flask(__name__)from bookapp import views 编辑 bookapp\\views.py, 内容如以下代码： 123456from bookapp import app@app.route(&#x27;/&#x27;)def index(): return &#x27;Hello world&#x27; 运行项目, 效果如下图: 使用数据库编辑 bookapp\\__init__.py, 内容如以下代码： 123456789101112131415import osfrom flask import Flaskfrom flask_sqlalchemy import SQLAlchemyapp = Flask(__name__)app.config[&#x27;SQLALCHEMY_DATABASE_URI&#x27;] = &#x27;sqlite:///&#x27; + \\ os.path.join(os.path.dirname(app.root_path), &#x27;data.db&#x27;)app.config[&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;] = Falsedb = SQLAlchemy(app)# 确保这一行放在最后面from bookapp import views, models 添加数据模型类在 bookapp 文件夹中添加文件 models.py, 编辑代码如以下： 123456789from bookapp import dbclass Book(db.Model): id = db.Column(db.Integer, primary_key=True) title = db.Column(db.String(50)) # 标题 author = db.Column(db.String(50)) # 作者 summary = db.Column(db.String(250)) # 摘要 published = db.Column(db.String(4)) # 发行年份 添加的命令实现数据库初始化在 bookapp 文件夹中添加文件 command.py, 编辑代码如以下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354import clickfrom bookapp import app, dbfrom bookapp.models import Book@app.cli.command()def forge(): &#x27;&#x27;&#x27; 用于初始化数据库的指令， 在虚拟环境下运行： flask forge &#x27;&#x27;&#x27; db.create_all() books = [ &#123; &#x27;title&#x27;: &#x27;A Fire Upon the Deep&#x27;, &#x27;author&#x27;: &#x27;Vernor Vinge&#x27;, &#x27;summary&#x27;: &#x27;The coldsleep itself was dreamless.&#x27;, &#x27;published&#x27;: &#x27;1992&#x27; &#125;, &#123; &#x27;title&#x27;: &#x27;The Ones Who Walk Away From Omelas&#x27;, &#x27;author&#x27;: &#x27;Ursula K. Le Guin&#x27;, &#x27;summary&#x27;: &#x27;With a clamor of bells that set the swallows soaring, the Festival of Summer came to the city Omelas, bright-towered by the sea.&#x27;, &#x27;published&#x27;: &#x27;1973&#x27; &#125;, &#123; &#x27;title&#x27;: &#x27;Dhalgren&#x27;, &#x27;author&#x27;: &#x27;Samuel R. Delany&#x27;, &#x27;summary&#x27;: &#x27;to wound the autumnal city.&#x27;, &#x27;published&#x27;: &#x27;1975&#x27; &#125;, &#123; &#x27;title&#x27;: &#x27;JavaScript Programming&#x27;, &#x27;author&#x27;: &#x27;Samuel R. Delany&#x27;, &#x27;summary&#x27;: &#x27;to wound the autumnal city.&#x27;, &#x27;published&#x27;: &#x27;2015&#x27; &#125;, &#123; &#x27;title&#x27;: &#x27;Flask Web Development&#x27;, &#x27;author&#x27;: &#x27;Ursula K. Le Guin&#x27;, &#x27;summary&#x27;: &#x27;With a clamor of bells that set the swallows soaring, the Festival of Summer came to the city Omelas, bright-towered by the sea.&#x27;, &#x27;published&#x27;: &#x27;2018&#x27; &#125;, ] for item in books: book = Book( title=item[&#x27;title&#x27;], author=item[&#x27;author&#x27;], summary=item[&#x27;summary&#x27;], published=item[&#x27;published&#x27;] ) db.session.add(book) db.session.commit() click.echo(&#x27;database initialized.&#x27;) 编辑 bookapp\\__init__.py, 在最后一行添加 command 模块的导入, 如以下代码: 123456789101112131415import osfrom flask import Flaskfrom flask_sqlalchemy import SQLAlchemyapp = Flask(__name__)app.config[&#x27;SQLALCHEMY_DATABASE_URI&#x27;] = &#x27;sqlite:///&#x27; + \\ os.path.join(os.path.dirname(app.root_path), &#x27;data.db&#x27;)app.config[&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;] = Falsedb = SQLAlchemy(app)# 确保这一行放在最后面, from bookapp import views, models, command # 这里多了一个 command 模块 在项目的虚拟环境下执行 flask forge 命令初始化数据，并添加数据到数据库中： 12(venv) PS D:\\sources\\python_repos\\flask-book-app&gt; flask forgedatabase initialized. 编写 API 方法 ( 组织 Flask-RESTful 资源对象)编辑 bookapp\\views.py, 内容如以下代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120from bookapp import app, db, ma, apifrom bookapp.models import Bookfrom flask import jsonify, redirect, requestfrom flask_restful import Resourceclass BookSchema(ma.Schema): class Meta: # 需要序列化的字段, 只有在这里列出的字段名才会转为 json 数据 fields = (&#x27;id&#x27;, &#x27;title&#x27;, &#x27;author&#x27;, &#x27;summary&#x27;, &#x27;published&#x27;)# 单个模型数据的序列化book_schema = BookSchema()# 多个模型数据的序列化books_schema = BookSchema(many=True)class BookListResource(Resource): def get(self): &#x27;&#x27;&#x27; 查询图书，分页参数的请求格式：http://127.0.0.1:5000/api/v1/books?limit=3&amp;offset=3 使用默认参数的访问路径：http://127.0.0.1:5000/api/v1/books &#x27;&#x27;&#x27; # 分页的默认值 limit = 10 # 每页大小（返回记录数） offset = 0 # 跳过记录数 ##### 接收 json 格式的参数 开始 , 这个方式不支持 url 地址传递的参数 # 如果要从URL中接收参数，请导入 from flask_restful.reqparse import RequestParser try: # 加入异常处理，以防接收不到正确参数时程序崩溃 if(request.json): limit = request.json[&#x27;limit&#x27;] offset = request.json[&#x27;offset&#x27;] except Exception as e: pass ##### 接收 json 格式的参数 结束 query = Book.query.offset(offset).limit(limit) # 分页查询 total = Book.query.count() # 记录总数 books = books_schema.dump(query) # 将查询结果由对象类型转为 python 数据 return jsonify(&#123; # 以JSON格式数据返回查询结果 &quot;offset&quot;: offset, &quot;limit&quot;: limit, &quot;total_count&quot;: total, &quot;books&quot;: books &#125;) def post(self): &#x27;&#x27;&#x27; 添加一本图书, 每本图书四个属性，不能为缺少 访问路径：http://127.0.0.1:5000/api/v1/books &#x27;&#x27;&#x27; try: new_book = Book( # 创建新图书 title=request.json[&#x27;title&#x27;], author=request.json[&#x27;author&#x27;], summary=request.json[&#x27;summary&#x27;], published=request.json[&#x27;published&#x27;] ) db.session.add(new_book) # 添加图书 db.session.commit() # 提交会话 return book_schema.dump(new_book) # 将查询结果由对象类型转为 python 数据 except Exception as e: return None # return request.json[&#x27;title&#x27;]class BookResource(Resource): def get(self, book_id): &#x27;&#x27;&#x27; 查询指定 id 的图书, 访问路径：http://127.0.0.1:5000/api/v1/books/2 &#x27;&#x27;&#x27; book = Book.query.get_or_404(book_id) # 查询指定id的图书 return book_schema.dump(book) def patch(self, book_id): &#x27;&#x27;&#x27; 修改指定 id 的图书 patch 指令是 put 指令的升级，允许局部更新 访问路径：http://127.0.0.1:5000/api/v1/books/2 (同时带上要修改的属性值 ) &#x27;&#x27;&#x27; try: book = Book.query.get_or_404(book_id) # 查询指定id的图书 if &#x27;title&#x27; in request.json: # 修改数据 book.title = request.json[&#x27;title&#x27;] if &#x27;author&#x27; in request.json: book.author = request.json[&#x27;author&#x27;] if &#x27;summary&#x27; in request.json: book.summary = request.json[&#x27;summary&#x27;] if &#x27;published&#x27; in request.json: book.published = request.json[&#x27;published&#x27;] db.session.commit() # 提交会话 return book_schema.dump(book) # 返回修改成功后的图书信息 except Exception as e: return None def put(self, book_id): &#x27;&#x27;&#x27; put 指令 和 patch 指令是一样的 &#x27;&#x27;&#x27; return self.patch(book_id) def delete(self, book_id): &#x27;&#x27;&#x27; 删除指定 id 的图书 访问路径：http://127.0.0.1:5000/api/v1/books/2 &#x27;&#x27;&#x27; book = Book.query.get_or_404(book_id) # 查询指定id的图书 db.session.delete(book) # 删除图书 db.session.commit() # 提交会话 return &#x27;&#x27;, 204@app.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;])def index(): # 跳转到 api对应的地址 return redirect(&#x27;/api/v1/books&#x27;) 绑定资源与URI编辑 bookapp\\__init__.py, 加入跨域配置 和 序列化模块, 代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import osfrom flask import Flaskfrom flask_sqlalchemy import SQLAlchemy # 导入数据库 ORM 模块from flask_cors import CORS # 导入跨域配置模块# flask_marshmallow 序列化和反序列化模块，# 用于将复杂的orm模型对象与python原生数据类型之间相互转换from flask_marshmallow import Marshmallow# flask_restful 快速构建 REST APIs 的Flask 扩展# http://www.pythondoc.com/Flask-RESTful/from flask_restful import Apiapp = Flask(__name__) # 创建Flask实例# 跨域允许CORS(app, resources=&#123;r&#x27;/*&#x27;: &#123;&#x27;origins&#x27;: &#x27;*&#x27;&#125;&#125;)# 配置数据库连接app.config[&#x27;SQLALCHEMY_DATABASE_URI&#x27;] = &#x27;sqlite:///&#x27; + \\ os.path.join(os.path.dirname(app.root_path), &#x27;data.db&#x27;)# 关闭数据库对象修改的跟踪app.config[&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;] = Falsedb = SQLAlchemy(app) # 初始化扩展 SQLAlchemy， 传入程序实例 appma = Marshmallow(app) # 初始化扩展 Marshmallow， 传入程序实例 appapi = Api(app) # 初始化扩展 Api， 传入程序实例 appfrom bookapp import views, models, command # 确保这一行放在最后面from bookapp.views import BookListResource, BookResource # 导入资源类# 从 BookListResource 添加 api 资源,# 对应分页查询 和 添加图书 这两个不需要 id 的操作# 使用默认参数分页查询数据的地址：http://127.0.0.1:5000/api/v1/books# 指定参数的分页查询数据的地址和参数示例：http://127.0.0.1:5000/api/v1/books?limit=3&amp;offset=3# 添加数据的访问路径：http://127.0.0.1:5000/api/v1/booksapi.add_resource(BookListResource, &#x27;/api/v1/books&#x27;) # 添加资源及访问路径# 从 BookResource 添加 api 资源，# 对应 单个对图书查询， 删除、修改这三个 要指定 id 的操作# 删除、修改和查询的访问路径：http://127.0.0.1:5000/api/v1/books/2api.add_resource(BookResource, &#x27;/api/v1/books/&lt;int:book_id&gt;&#x27;) # 添加资源及访问路径 测试 RESTful API运行项目在虚拟环境下执行命令： flask run 运行项目，运行结果如下所示： 12345678(venv) PS D:\\sources\\python_repos\\flask-book-app&gt; flask run * Serving Flask app &#x27;bookapp&#x27; (lazy loading) * Environment: development * Debug mode: on * Restarting with stat * Debugger is active! * Debugger PIN: 129-008-647 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit) 安装扩展在 Visual Studio Code 中使用安装名为 PostCode 的扩展, 如下图所示： 无参数的默认分页查询图书测试 带参数的分页查询图书测试 查询指定 id 的图书测试 添加新图书测试 修改图书测试 删除图书测试","categories":[{"name":"flask","slug":"flask","permalink":"https://hujiyi.github.io/categories/flask/"}],"tags":[{"name":"python","slug":"python","permalink":"https://hujiyi.github.io/tags/python/"},{"name":"flask","slug":"flask","permalink":"https://hujiyi.github.io/tags/flask/"},{"name":"webapi","slug":"webapi","permalink":"https://hujiyi.github.io/tags/webapi/"}]},{"title":"在 Windows 10/11 配置 Flutter 开发环境","slug":"flutter-development-environment-configuration","date":"2021-12-04T11:33:44.000Z","updated":"2024-02-16T10:51:43.474Z","comments":true,"path":"2021/12/04/flutter-development-environment-configuration/","permalink":"https://hujiyi.github.io/2021/12/04/flutter-development-environment-configuration/","excerpt":"","text":"关联文章 在 Windows 中同时安装多个 JDK 使用 Android SDK 命令行工具搭建 Flutter 开发环境 安装 Flutter SDKFlutter 到现在为止, 还处于高速发展的初始阶段, Flutter SDK 的各个大版本之间, 存在一些不兼容的情况, 所以建议选择使用 stable 发行通道的 Flutter SDK 最新版本。 下载 Flutter SDKFlutter SDK 下载地址： Flutter 官方网站：https://docs.flutter.dev/development/tools/sdk/releases 清华大学镜像：https://mirrors.tuna.tsinghua.edu.cn/flutter/flutter_infra_release/releases/stable/windows/ 解压 Flutter SDK将压缩包解压, 然后把其中的 flutter 目录整个放在你想放置 Flutter SDK 的路径中（例如 D:\\AppData, 解压后路径为: D:\\AppData\\flutter）, 如下图所示: (直接将压缩包 `解压到当前位置`) 请勿将 Flutter 有特殊字符或空格的路径下。 请勿将 Flutter 安装在需要高权限的文件夹内，例如 C:\\Program Files\\, 电脑只有单个硬盘的可以考虑解压到C:\\Users\\&lt;用户名&gt;\\AppData\\Local\\ 文件夹下。 为 Flutter 设定镜像配置在国内使用 Flutter, 需要找一个与官方同步的可信的镜像站点, 让 Flutter 命令行工具到该镜像站点下载其所需的资源。为此设置两个环境变量：PUB_HOSTED_URL 和 FLUTTER_STORAGE_BASE_URL, 然后再运行 Flutter 命令行工具。 可以使用 setx 命令添加 系统环境变量, 命令格式为: setx &quot;&lt;环境变量名&gt;&quot; &quot;&lt;环境变量对应的完整路径&gt;&quot; 使用 管理员权限 运行 CMD窗口 或 PowerShell窗口, 执行以下命令： 12setx &quot;PUB_HOSTED_URL&quot; &quot;https://pub.flutter-io.cn&quot; /msetx &quot;FLUTTER_STORAGE_BASE_URL&quot; &quot;https://storage.flutter-io.cn&quot; /m setx 命令用于添加环境变量, 结尾的 /m 选项表示添加为 系统环境变量, 没有该选项则添加为 用户环境变量 运行成功后, 系统变量 中将添加 PUB_HOSTED_URL 和 FLUTTER_STORAGE_BASE_URL 两个环境变量, 如下图所示: 更新 path 环境变量在 Windows 控制台中运行 Flutter 命令，需要将 Flutter 的运行文件路径加入到 PATH 环境变量。 打开 环境变量 设置窗口 选中 用户变量 或 系统变量 的 Path 变量名, 加入 flutter\\bin 目录的完整路径(此处完整路径为: D:\\AppData\\flutter\\bin), 如下图所示: 运行开发环境检测程序更新 Path 环境变量后, 打开一个新的控制台窗口, 执行 flutter doctor(可以添加参数 -v显示详细信息) 命令检测当前的 Flutter 运行环境, 第一次运行过程如下所示: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160PS D:\\AppData&gt; flutter doctor -v ╔════════════════════════════════════════════════════════════════════════════╗ ║ Welcome to Flutter! - https://flutter.dev ║ ║ ║ ║ The Flutter tool uses Google Analytics to anonymously report feature usage ║ ║ statistics and basic crash reports. This data is used to help improve ║ ║ Flutter tools over time. ║ ║ ║ ║ Flutter tool analytics are not sent on the very first run. To disable ║ ║ reporting, type &#x27;flutter config --no-analytics&#x27;. To display the current ║ ║ setting, type &#x27;flutter config&#x27;. If you opt out of analytics, an opt-out ║ ║ event will be sent, and then no further information will be sent by the ║ ║ Flutter tool. ║ ║ ║ ║ By downloading the Flutter SDK, you agree to the Google Terms of Service. ║ ║ Note: The Google Privacy Policy describes how data is handled in this ║ ║ service. ║ ║ ║ ║ Moreover, Flutter includes the Dart SDK, which may send usage metrics and ║ ║ crash reports to Google. ║ ║ ║ ║ Read about data we send with crash reports: ║ ║ https://flutter.dev/docs/reference/crash-reporting ║ ║ ║ ║ See Google s privacy policy: ║ ║ https://policies.google.com/privacy ║ ╚════════════════════════════════════════════════════════════════════════════╝Flutter assets will be downloaded from https://storage.flutter-io.cn. Make sure you trust this source!Running &quot;flutter pub get&quot; in flutter_tools...Resolving dependencies in flutter\\packages\\flutter_tools...* _fe_analyzer_shared 50.0.0 (was 50.0.0) (52.0.0 available)* analyzer 5.2.0 (was 5.2.0) (5.4.0 available)* archive 3.3.2 (was 3.3.2) (3.3.6 available)* args 2.3.1 (was 2.3.1) (2.3.2 available)* async 2.10.0 (was 2.10.0)* boolean_selector 2.1.1 (was 2.1.1)* browser_launcher 1.1.1 (was 1.1.1)* built_collection 5.1.1 (was 5.1.1)* built_value 8.4.2 (was 8.4.2) (8.4.3 available)* checked_yaml 2.0.1 (was 2.0.1) (2.0.2 available)* clock 1.1.1 (was 1.1.1)* collection 1.17.0 (was 1.17.0) (1.17.1 available)* completion 1.0.0 (was 1.0.0) (1.0.1 available)* convert 3.1.1 (was 3.1.1)* coverage 1.6.1 (was 1.6.1) (1.6.2 available)* crypto 3.0.2 (was 3.0.2)* csslib 0.17.2 (was 0.17.2)* dds 2.5.0 (was 2.5.0) (2.7.4 available)* dds_service_extensions 1.3.1 (was 1.3.1) (1.3.2 available)* devtools_shared 2.18.0 (was 2.18.0) (2.20.1 available)* dwds 16.0.2 (was 16.0.2) (17.0.0 available)* fake_async 1.3.1 (was 1.3.1)* file 6.1.4 (was 6.1.4)* file_testing 3.0.0 (was 3.0.0)* fixnum 1.0.1 (was 1.0.1) (1.1.0 available)* flutter_template_images 4.2.0 (was 4.2.0)* frontend_server_client 3.1.0 (was 3.1.0) (3.2.0 available)* glob 2.1.1 (was 2.1.1)* html 0.15.1 (was 0.15.1)* http 0.13.5 (was 0.13.5)* http_multi_server 3.2.1 (was 3.2.1)* http_parser 4.0.2 (was 4.0.2)* intl 0.17.0 (was 0.17.0) (0.18.0 available)* io 1.0.3 (was 1.0.3) (1.0.4 available)* js 0.6.5 (was 0.6.5) (0.6.7 available)* json_annotation 4.7.0 (was 4.7.0) (4.8.0 available)* json_rpc_2 3.0.2 (was 3.0.2)* logging 1.1.0 (was 1.1.0) (1.1.1 available)* matcher 0.12.13 (was 0.12.13) (0.12.14 available)* meta 1.8.0 (was 1.8.0) (1.9.0 available)* mime 1.0.2 (was 1.0.2) (1.0.4 available)* multicast_dns 0.3.2+2 (was 0.3.2+2) (0.3.2+3 available)* mustache_template 2.0.0 (was 2.0.0)* native_stack_traces 0.5.2 (was 0.5.2) (0.5.5 available)* node_preamble 2.0.1 (was 2.0.1)* package_config 2.1.0 (was 2.1.0)* path 1.8.2 (was 1.8.2) (1.8.3 available)* petitparser 5.1.0 (was 5.1.0)* platform 3.1.0 (was 3.1.0)* pool 1.5.1 (was 1.5.1)* process 4.2.4 (was 4.2.4)* pub_semver 2.1.3 (was 2.1.3)* pubspec_parse 1.2.1 (was 1.2.1)* shelf 1.4.0 (was 1.4.0)* shelf_packages_handler 3.0.1 (was 3.0.1)* shelf_proxy 1.0.2 (was 1.0.2)* shelf_static 1.1.1 (was 1.1.1)* shelf_web_socket 1.0.3 (was 1.0.3)* source_map_stack_trace 2.1.1 (was 2.1.1)* source_maps 0.10.11 (was 0.10.11)* source_span 1.9.1 (was 1.9.1)* sse 4.1.1 (was 4.1.1) (4.1.2 available)* stack_trace 1.11.0 (was 1.11.0)* stream_channel 2.1.1 (was 2.1.1)* string_scanner 1.2.0 (was 1.2.0)* sync_http 0.3.1 (was 0.3.1)* term_glyph 1.2.1 (was 1.2.1)* test 1.22.0 (was 1.22.0) (1.22.2 available)* test_api 0.4.16 (was 0.4.16) (0.4.18 available)* test_core 0.4.20 (was 0.4.20) (0.4.22 available)* typed_data 1.3.1 (was 1.3.1)* usage 4.1.0 (was 4.1.0)* uuid 3.0.7 (was 3.0.7)* vm_service 9.4.0 (was 9.4.0) (10.1.2 available)* vm_snapshot_analysis 0.7.2 (was 0.7.2)* watcher 1.0.2 (was 1.0.2)* web_socket_channel 2.2.0 (was 2.2.0) (2.3.0 available)* webdriver 3.0.1 (was 3.0.1) (3.0.2 available)* webkit_inspection_protocol 1.2.0 (was 1.2.0)* xml 6.2.2 (was 6.2.2)* yaml 3.1.1 (was 3.1.1)Changed 81 dependencies in flutter\\packages\\flutter_tools![✓] Flutter (Channel stable, 3.19.0, on Microsoft Windows [版本 10.0.22631.3155], locale zh-CN) • Flutter version 3.19.0 on channel stable at D:\\AppData\\flutter • Upstream repository https://github.com/flutter/flutter.git • Framework revision bae5e49bc2 (2 days ago), 2024-02-13 17:46:18 -0800 • Engine revision 04817c99c9 • Dart version 3.3.0 • DevTools version 2.31.1[✗] Windows Version (Unable to confirm if installed Windows version is 10 or greater)[✗] Android toolchain - develop for Android devices ✗ Unable to locate Android SDK. Install Android Studio from: https://developer.android.com/studio/index.html On first launch it will assist you in installing the Android SDK components. (or visit https://flutter.dev/docs/get-started/install/windows#android-setup for detailed instructions). If the Android SDK has been installed to a custom location, please use `flutter config --android-sdk` to update to that location.[✗] Chrome - develop for the web (Cannot find Chrome executable at .\\Google\\Chrome\\Application\\chrome.exe) ! Cannot find Chrome. Try setting CHROME_EXECUTABLE to a Chrome executable.[✗] Visual Studio - develop for Windows ✗ Visual Studio not installed; this is necessary for Windows development. Download at https://visualstudio.microsoft.com/downloads/. Please install the &quot;Desktop development with C++&quot; workload, including all of its default components[!] Android Studio (not installed) • Android Studio not found; download from https://developer.android.com/studio/index.html (or visit https://flutter.dev/docs/get-started/install/windows#android-setup for detailed instructions).[✓] VS Code, 64-bit edition (version 1.74.3) • VS Code at C:\\Program Files\\Microsoft VS Code • Flutter extension can be installed from: 🔨 https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter[✓] Connected device (2 available) • Windows (desktop) • windows • windows-x64 • Microsoft Windows [版本 10.0.22621.1194] • Edge (web) • edge • web-javascript • Microsoft Edge 109.0.1518.70[✓] HTTP Host Availability • All required HTTP hosts are available! Doctor found issues in 5 categories. 显示出来的检查结果中： 绿色的 [√] 表示该项通过检测, 没有问题 黄色的 [!] 表示该项存在部分问题 红色的 [✗] 表示该项找不到或有严重错误 检测结果的具体说明见下图: 创建新项目上面显示的运行环境检测结果表明 Flutter SDK 已经安装, 已连接设备中的 • Edge (web) • edge • web-javascript • Microsoft Edge 109.0.1518.70 表示使用Flutter 创建的程序已经可以通过 Edge浏览器 进行 Web平台的运行调试。 在电脑添加一个存放 Flutter 项目的文件夹(例如 D:\\sources\\flutter_repos), 进入该文件夹, 打开一个新的控制台窗口, 执行命令创建新项目: flutter create &lt;项目名称&gt;, 执行过程如下所示: 12345678910111213141516171819202122232425262728293031323334353637383940414243PS D:\\sources\\flutter_repos&gt; flutter create demo_appFlutter assets will be downloaded from https://storage.flutter-io.cn. Make sure you trust this source!Creating project demo_app...Running &quot;flutter pub get&quot; in demo_app...Resolving dependencies in demo_app...+ async 2.10.0+ boolean_selector 2.1.1+ characters 1.2.1+ clock 1.1.1+ collection 1.17.0 (1.17.1 available)+ cupertino_icons 1.0.5+ fake_async 1.3.1+ flutter 0.0.0 from sdk flutter+ flutter_lints 2.0.1+ flutter_test 0.0.0 from sdk flutter+ js 0.6.5 (0.6.7 available)+ lints 2.0.1+ matcher 0.12.13 (0.12.14 available)+ material_color_utilities 0.2.0+ meta 1.8.0 (1.9.0 available)+ path 1.8.2 (1.8.3 available)+ sky_engine 0.0.99 from sdk flutter+ source_span 1.9.1+ stack_trace 1.11.0+ stream_channel 2.1.1+ string_scanner 1.2.0+ term_glyph 1.2.1+ test_api 0.4.16 (0.4.18 available)+ vector_math 2.1.4Changed 24 dependencies in demo_app!Wrote 127 files.All done!You can find general documentation for Flutter at: https://docs.flutter.dev/Detailed API documentation is available at: https://api.flutter.dev/If you prefer video documentation, consider: https://www.youtube.com/c/flutterdevIn order to run your application, type: $ cd demo_app $ flutter runYour application code is in demo_app\\lib\\main.dart. 由多个单词组成的 Flutter 的项目名称使用下划线 _ 进行连接, 不能使用短横线 -。 在 Web平台 运行项目 根据创建项目成功后的提示, 在控制台窗口输入命令:cd demo_app, 进入该项目文件夹, 过程如下所示: 12PS D:\\sources\\flutter_repos&gt; cd .\\demo_app\\PS D:\\sources\\flutter_repos\\demo_app&gt; 使用命令运行 Flutter 项目: flutter run, 12345678PS D:\\sources\\flutter_repos\\demo_app&gt; flutter runFlutter assets will be downloaded from https://storage.flutter-io.cn. Make sure you trust this source!Multiple devices found:Windows (desktop) • windows • windows-x64 • Microsoft Windows [版本 10.0.22621.1194]Edge (web) • edge • web-javascript • Microsoft Edge 109.0.1518.70[1]: Windows (windows)[2]: Edge (edge)Please choose one (To quit, press &quot;q/Q&quot;): 此处提示选择运行项目的设备, 输入序号 2, 回车。 此处并没有安装 Windows 开发工具链, 输入序号 1 时会出错。 运行成功后, 会自动打开 Edge 浏览器, 运行结果如下图所示: 配置 Android toolchain ( Android 开发工具链)Android toolchain 用于生成 Android 平台的应用程序, 需要安装的软件包括: JDK, Android SDK, Android 模拟器 三部分。如果原来已经安装有 Android 的开发环境(Android Studio 和 模拟器), 只需要添加需要的 Android SDK 组件即可。 安装 JDK新版本的 Flutter SDK 进行 Android应用开发 时需要 JDK 11 或 以上版本, 如果还没有安装过 JDK, 或者版本不符, 可以使用 Android Studio 2020.3.1(或更新版本) 自带的 OpenJDK 11, 刚好合适。 如果同时还在做 Spring Boot 或是相关开发, 有些项目可能需要使用 JDK 1.8 , 这种情况可以参考文章: 在 Windows 中同时安装多个 JDK 安装配置 Android SDK如果电脑原来已经安装有 Android Studio, 可以打开 SDK Manager, 添加 Flutter SDK 3.19.x 需要安装的以下几个 Android SDK 组件: Android SDK Command-line Tools(latest) Android SDK Build-Tools 30.0.3 (revision: 30.0.3) Android SDK Platform 34 (revision: 2) Flutter 3.19.0 或更高版本需要 Android SDK Platform 34 (revision: 2), Flutter 3.16.x 需要安装 Android SDK Platform 33 (revision: 2) 不同版本的 Flutter SDK 需要的 Android SDK Build-Tools 和 Android SDK Platform 版本号会有不同 确保 Android SDK Command-line Tools(latest) 已经安装, 第一次运行时其他两个组件缺失或版本不正确时, 将会自动安装 如果电脑还没有并且不想安装 Android Studio, 也可以参考文章: 使用 Android SDK 命令行工具搭建 Flutter 开发环境, 通过 Android SDK Command-line Tools(latest) 安装单独的 Android SDK。 速度最快的 Android SDK 安装办法: 把其他已经能运行 Flutter 项目的电脑中的 Android SDK 文件夹复制到自己的电脑。 添加ANDROID_HOME 环境变量将 Android SDK 的路径添加到环境变量中, 使用 管理员权限 运行 CMD窗口 或 PowerShell窗口, 执行以下命令： 1setx &quot;ANDROID_HOME&quot; &quot;D:\\AppData\\Android\\Sdk&quot; /m 将 D:\\AppData\\Android\\Sdk 替换为自己电脑实际的 Android SDK 路径 同意 Android 协议确保电脑已经正确安装了 Android SDK, 并添加了 ANDROID_HOME 环境变量, 打开一个新的控制台窗口, 再次运行 flutter doctor -v 命令检测运行环境, 运行结果如下所示: 123456789101112131415161718192021222324252627282930313233343536373839404142434445PS D:\\sources\\flutter_repos&gt; flutter doctor -vFlutter assets will be downloaded from https://storage.flutter-io.cn. Make sure you trust this source![✓] Flutter (Channel stable, 3.19.0, on Microsoft Windows [版本 10.0.22631.3155], locale zh-CN) • Flutter version 3.19.0 on channel stable at D:\\AppData\\flutter • Upstream repository https://github.com/flutter/flutter.git • Framework revision bae5e49bc2 (2 days ago), 2024-02-13 17:46:18 -0800 • Engine revision 04817c99c9 • Dart version 3.3.0 • DevTools version 2.31.1[✗] Windows Version (Unable to confirm if installed Windows version is 10 or greater)[!] Android toolchain - develop for Android devices (Android SDK version 30.0.3) • Android SDK at D:\\AppData\\Android\\Sdk • Platform android-34, build-tools 30.0.3 • ANDROID_HOME = D:\\AppData\\Android\\Sdk • Java binary at: D:\\AppData\\openjdk17.0.2\\bin\\java • Java version OpenJDK Runtime Environment (build 17.0.2+8-86) ! Some Android licenses not accepted. To resolve this, run: flutter doctor --android-licenses[✗] Chrome - develop for the web (Cannot find Chrome executable at .\\Google\\Chrome\\Application\\chrome.exe) ! Cannot find Chrome. Try setting CHROME_EXECUTABLE to a Chrome executable.[✗] Visual Studio - develop for Windows ✗ Visual Studio not installed; this is necessary for Windows development. Download at https://visualstudio.microsoft.com/downloads/. Please install the &quot;Desktop development with C++&quot; workload, including all of its default components[!] Android Studio (not installed) • Android Studio not found; download from https://developer.android.com/studio/index.html (or visit https://flutter.dev/docs/get-started/install/windows#android-setup for detailed instructions).[✓] VS Code, 64-bit edition (version 1.74.3) • VS Code at C:\\Program Files\\Microsoft VS Code • Flutter extension can be installed from: 🔨 https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter[✓] Connected device (2 available) • Windows (desktop) • windows • windows-x64 • Microsoft Windows [版本 10.0.22621.1194] • Edge (web) • edge • web-javascript • Microsoft Edge 109.0.1518.70[✓] HTTP Host Availability • All required HTTP hosts are available! Doctor found issues in 5 categories. 之前显示为红色 [✗] 的 Android toolchain 现在已经变成了黄色的 [!] 12345678[!] Android toolchain - develop for Android devices (Android SDK version 30.0.3) • Android SDK at D:\\AppData\\Android\\Sdk • Platform android-34, build-tools 30.0.3 • ANDROID_HOME = D:\\AppData\\Android\\Sdk • Java binary at: D:\\AppData\\openjdk17.0.2\\bin\\java • Java version OpenJDK Runtime Environment (build 17.0.2+8-86) ! Some Android licenses not accepted. To resolve this, run: flutter doctor --android-licenses 该项最后一行提示, 需要运行命令并同意 Android 的协议, 在控制台窗口输入命令: flutter doctor --android-licenses, 全部提问回答: y, 命令执行过程如下: 123456789PS D:\\sources\\flutter_repos&gt; flutter doctor --android-licensesFlutter assets will be downloaded from https://storage.flutter-io.cn. Make sure you trust this source![=======================================] 100% Computing updates...6 of 7 SDK package licenses not accepted.Review licenses that have not been accepted (y/N)? y1/6: License android-googletv-license:&lt;总共`6项`协议,内容很长, 要输入`6`次 `y`, 过程省略&gt; 同意协议后再次检测Flutter运行环境 12345678910111213141516171819PS D:\\sources\\flutter_repos&gt; flutter doctor -vFlutter assets will be downloaded from https://storage.flutter-io.cn. Make sure you trust this source![✓] Flutter (Channel stable, 3.19.0, on Microsoft Windows [版本 10.0.22631.3155], locale zh-CN) • Flutter version 3.19.0 on channel stable at D:\\AppData\\flutter • Upstream repository https://github.com/flutter/flutter.git • Framework revision bae5e49bc2 (2 days ago), 2024-02-13 17:46:18 -0800 • Engine revision 04817c99c9 • Dart version 3.3.0 • DevTools version 2.31.1[✗] Windows Version (Unable to confirm if installed Windows version is 10 or greater)[✓] Android toolchain - develop for Android devices (Android SDK version 30.0.3) • Android SDK at D:\\AppData\\Android\\Sdk • Platform android-34, build-tools 30.0.3 • ANDROID_HOME = D:\\AppData\\Android\\Sdk • Java binary at: D:\\AppData\\openjdk17.0.2\\bin\\java • Java version OpenJDK Runtime Environment (build 17.0.2+8-86) • All Android licenses accepted. 检测结果显示 Android toolchain 已经没有问题。 使用模拟器Flutter 项目 运行时使用的 Android 模拟器 与 Android 项目 开发时是一样的, 可以使用 Android Studio 自带的模拟器, 也可以使用其他第三方的模拟器。Android Studio 自带模拟器的安装和使用在此不再做说明。这里选择的第三方模拟器是 雷电模拟器 或 夜神模拟器, 其他的第三方模拟器使用方法类似。 因为不使用 Android Studio 进行 Flutter 项目开发, 启动 Android Studio 自带的模拟器很不方便, 所以选择使用其他第三方的Android 模拟器 第三方的Android 模拟器运行时需要生成镜像文件, 占用较大的硬盘空间, 安装时请根据电脑选择 合适的安装路径 (推荐)安装 雷电模拟器雷电模拟器 下载地址: https://www.ldmnq.com/, 下载后运行安装程序, 可以根据需要点击 d自定义安装, 更改安装的路径, 雷电模拟器安装后即可使用, 不使用额外的设置与配置。 使用 夜神模拟器夜神模拟器下载地址: https://www.yeshen.com/, 下载后运行安装程序, 可以根据需要点击右下角的自定义安装, 更改安装的路径, 如下图所示: 这里的夜神模拟器安装路径改成了: C:\\Program Files\\Nox 替换 夜神模拟器 的 nox_adb.exe夜神模拟器 通过 nox_adb.exe 与 Android 开发工具进行连接, 连接时, 要求 nox_adb.exe 必须与 Android SDK 的 adb.exe 版本相同。 打开 Android SDK 的 platform-tools 文件夹(此处为 D:\\AppData\\Android\\Sdk\\platform-tools) 将该文件夹中的 adb.exe 复制一份, 并命名为 nox_adb.exe (此处建议显示文件的扩展名, 以免文件命名错误) 将上一步的 nox_adb.exe 复制到 夜神模拟器 安装路径中的bin文件夹(此处为: C:\\Program Files\\Nox\\bin)中, 覆盖掉同名的nox_adb.exe 文件。 连接 夜神模拟器 先启动 夜神模拟器, 然后在 夜神模拟器 安装路径中的bin文件夹（C:\\Program Files\\Nox\\bin）打开一个新的控制台窗口。 使用命令显示当前可连接设备: nox_adb.exe devices, 执行过程如下: 123PS C:\\Program Files\\Nox\\bin&gt; .\\nox_adb.exe devicesList of devices attached127.0.0.1:62001 device 127.0.0.1:62001 为当前运行中的模拟器的连接地址 使用命令连接模拟器: nox_adb.exe connect &lt;设备地址&gt;, 执行过程如下所示: 12PS C:\\Program Files\\Nox\\bin&gt; .\\nox_adb.exe connect 127.0.0.1:62001already connected to 127.0.0.1:62001 夜神模拟器 和 Widnows 10/11 自带的 Hyper-V 冲突, 不能同时使用。 夜神模拟器 连接成功后, 同样适用于 Android 项目的开发调试。 在模拟器中运行Flutter项目在之前已经创建好的 Flutter 项目文件夹中打开控制台窗口, 执行 flutter run 命令运行项目, 执行过程如下所示: 1234567891011121314151617181920212223PS D:\\sources\\flutter_repos\\demo_app&gt; flutter runFlutter assets will be downloaded from https://storage.flutter-io.cn. Make sure you trust this source!Launching lib\\main.dart on SM G955N in debug mode...Flutter assets will be downloaded from https://storage.flutter-io.cn. Make sure you trust this source!Running Gradle task &#x27;assembleDebug&#x27;... 736.7s✓ Built build\\app\\outputs\\flutter-apk\\app-debug.apk.Installing build\\app\\outputs\\flutter-apk\\app-debug.apk... 4.2sSyncing files to device SM G955N... 111msFlutter run key commands.r Hot reload. 🔥🔥🔥R Hot restart.h List all available interactive commands.d Detach (terminate &quot;flutter run&quot; but leave application running).c Clear the screenq Quit (terminate the application on the device).💪 Running with sound null safety 💪An Observatory debugger and profiler on SM G955N is available at: http://127.0.0.1:51335/UEbv3xKoFAk=/E/libEGL ( 3429): called unimplemented OpenGL ES APIThe Flutter DevTools debugger and profiler on SM G955N is available at:http://127.0.0.1:9100?uri=http://127.0.0.1:51335/UEbv3xKoFAk=/ 当前已连接设备中包含有 Android设备 时, 该设备会优先运行, 此时不需要进行运行目标设备的选择。 第一次在 Android设备 上运行 Flutter 项目时, 可能会需要很长的时间, 如果没有出现错误信息, 请耐心等待。 夜神模拟器显示的运行结果如下图所示: 第一次运行常见的错误Flutter 使用 Gradle 构建 Android 项目, 第一次在 Android 模拟器上运行 Flutter 项目时, 需要下载对应版本的 Gradle。由于Gradle 的服务器在国外, 所以经常会出现无法连接服务器, 项目构建失败, 第一次常见的错误可能如下图所示: 错误原因: 可能是因为无法下载构建项目所需要的 Gradle 文件 解决办法： 打开 C:\\Users\\&lt;用户名&gt;\\.gradle\\wrapper\\dists 文件夹(&lt;用户名&gt;替换为当前电脑的实际用户名) 查看当前 Flutter 项目需要的 Gradle版本 使用国内镜像下载合适版本的 Gradle, 下载地址：https://mirrors.cloud.tencent.com/gradle/ 将下载到的 .zip 文件夹放到最终文件夹中, 例如: C:\\Users\\&lt;用户名&gt;\\.gradle\\wrapper\\dists\\gradle-7.5-all\\6qsw290k5lz422uaf8jf6m7co, 每个不同版本Gradle 文件夹路径中的特殊字符(例如6qsw290k5lz422uaf8jf6m7co)都不一样。 重新启动 Flutter 项目调试 其他错误123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566Flutter assets will be downloaded from https://storage.flutter-io.cn. Make sure you trust this source!Launching lib\\main.dart on TAS AL00 in debug mode...FAILURE: Build failed with an exception.* What went wrong:Execution failed for task &#x27;:gradle:compileGroovy&#x27;.&gt; Could not resolve all files for configuration &#x27;:gradle:compileClasspath&#x27;. &gt; Could not resolve com.squareup:javawriter:2.5.0. Required by: project :gradle &gt; com.android.tools.build:gradle:7.3.0 &gt; com.android.tools.build:builder:7.3.0 &gt; Could not resolve com.squareup:javawriter:2.5.0. &gt; Could not get resource &#x27;https://repo.maven.apache.org/maven2/com/squareup/javawriter/2.5.0/javawriter-2.5.0.pom&#x27;. &gt; Could not GET &#x27;https://repo.maven.apache.org/maven2/com/squareup/javawriter/2.5.0/javawriter-2.5.0.pom&#x27;. &gt; Connect to repo.maven.apache.org:443 [repo.maven.apache.org/146.75.112.215] failed: Connection timed out: no further information &gt; Could not resolve org.ow2.asm:asm:9.1. Required by: project :gradle &gt; com.android.tools.build:gradle:7.3.0 &gt; com.android.tools.build:gradle-api:7.3.0 &gt; Could not resolve org.ow2.asm:asm:9.1. &gt; Could not get resource &#x27;https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.1/asm-9.1.pom&#x27;. &gt; Could not GET &#x27;https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.1/asm-9.1.pom&#x27;. &gt; Connect to repo.maven.apache.org:443 [repo.maven.apache.org/146.75.112.215] failed: Connection timed out: no further information* Try:&gt; Run with --stacktrace option to get the stack trace.&gt; Run with --info or --debug option to get more log output.&gt; Run with --scan to get full insights.* Get more help at https://help.gradle.orgBUILD FAILED in 3m 17s[!] Gradle threw an error while downloading artifacts from the network.Retrying Gradle Build: #1, wait time: 100msFAILURE: Build failed with an exception.* What went wrong:Execution failed for task &#x27;:gradle:compileGroovy&#x27;.&gt; Could not resolve all files for configuration &#x27;:gradle:compileClasspath&#x27;. &gt; Could not resolve com.squareup:javawriter:2.5.0. Required by: project :gradle &gt; com.android.tools.build:gradle:7.3.0 &gt; com.android.tools.build:builder:7.3.0 &gt; Could not resolve com.squareup:javawriter:2.5.0. &gt; Could not get resource &#x27;https://repo.maven.apache.org/maven2/com/squareup/javawriter/2.5.0/javawriter-2.5.0.pom&#x27;. &gt; Could not GET &#x27;https://repo.maven.apache.org/maven2/com/squareup/javawriter/2.5.0/javawriter-2.5.0.pom&#x27;. &gt; Connect to repo.maven.apache.org:443 [repo.maven.apache.org/151.101.108.215] failed: Connection timed out: no further information &gt; Could not resolve org.ow2.asm:asm:9.1. Required by: project :gradle &gt; com.android.tools.build:gradle:7.3.0 &gt; com.android.tools.build:gradle-api:7.3.0 &gt; Could not resolve org.ow2.asm:asm:9.1. &gt; Could not get resource &#x27;https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.1/asm-9.1.pom&#x27;. &gt; Could not GET &#x27;https://repo.maven.apache.org/maven2/org/ow2/asm/asm/9.1/asm-9.1.pom&#x27;. &gt; Connect to repo.maven.apache.org:443 [repo.maven.apache.org/151.101.108.215] failed: Connection timed out: no further information* Try:&gt; Run with --stacktrace option to get the stack trace.&gt; Run with --info or --debug option to get more log output.&gt; Run with --scan to get full insights.* Get more help at https://help.gradle.orgBUILD FAILED in 2m 13s[!] Gradle threw an error while downloading artifacts from the network.Exception: Gradle task assembleDebug failed with exit code 1Exited (1). 错误原因: Gradle 因为网络问题无法从服务器下载构建项目所需要的 jar 包 解决办法: 有条件的话 更换网络, 或 搭个梯子, 或是配置 Gradle 国内镜像, 并重试直到成功(或者换个其他人少上网的时间重试) 可以尝试将其他人已经能成功运行 Flutter 项目的 C:\\Users\\&lt;用户名&gt;\\.gradle 文件夹复制到自己电脑。 配置 Gradle 国内镜像在 Android设备 上运行 Flutter项目程序时, 默认使用 Gradle 管理项目依赖, 第一次运行时, 除了检查 Android SDK 组件并下载正确的版本外, 还会安装和 Flutter SDK 匹配的 Gradle, Flutter SDK 3.7.1 使用的 Gradle 版本是 gradle-7.5-all。 Gradle 添加成功后才会下载当前项目所需要的其他包和组件, 由于 Gradle 默认使用的源是国外的服务器, 所以网络状况不好时通常出现类似以下的错误信息: 1234567891011121314151617181920212223PS D:\\sources\\flutter_repos\\demo_app&gt; flutter runFlutter assets will be downloaded from https://storage.flutter-io.cn. Make sure you trust this source!Using hardware rendering with device Android SDK built for x86 64. If you notice graphics artifacts, consider enabling software renderingwith &quot;--enable-software-rendering&quot;.Launching lib/main.dart on Android SDK built for x86 64 in debug mode...FAILURE: Build failed with an exception.* What went wrong:Execution failed for task &#x27;:app:compileDebugKotlin&#x27;.&gt; Could not resolve all dependencies for configuration &#x27;:app:kotlinCompilerClasspath&#x27;. &gt; Could not load module metadata from /home/laohoo/.gradle/caches/modules-2/metadata-2.97/descriptors/org.jetbrains.kotlin/kotlin-script-runtime/1.6.10/a8be1fe3b3911d3d3425fe720cf42835/descriptor.bin* Try:&gt; Run with --stacktrace option to get the stack trace.&gt; Run with --info or --debug option to get more log output.&gt; Run with --scan to get full insights.* Get more help at https://help.gradle.orgBUILD FAILED in 1sRunning Gradle task &#x27;assembleDebug&#x27;... 2,548msException: Gradle task assembleDebug failed with exit code 1 解决办法在 C:\\Users\\&lt;用户名&gt;\\.gradle 文件夹(&lt;用户名&gt;替换为当前电脑实际的用户名)下新建名为 init.gradle 的文件, 文件内容编辑如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566allprojects&#123; repositories &#123; def ALIYUN_REPOSITORY_URL = &#x27;https://maven.aliyun.com/repository/public/&#x27; def ALIYUN_JCENTER_URL = &#x27;https://maven.aliyun.com/repository/jcenter/&#x27; def ALIYUN_GOOGLE_URL = &#x27;https://maven.aliyun.com/repository/google/&#x27; def ALIYUN_GRADLE_PLUGIN_URL = &#x27;https://maven.aliyun.com/repository/gradle-plugin/&#x27; all &#123; ArtifactRepository repo -&gt; if(repo instanceof MavenArtifactRepository)&#123; def url = repo.url.toString() if (url.startsWith(&#x27;https://repo1.maven.org/maven2/&#x27;)) &#123; project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_REPOSITORY_URL.&quot; remove repo &#125; if (url.startsWith(&#x27;https://jcenter.bintray.com/&#x27;)) &#123; project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_JCENTER_URL.&quot; remove repo &#125; if (url.startsWith(&#x27;https://dl.google.com/dl/android/maven2/&#x27;)) &#123; project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_GOOGLE_URL.&quot; remove repo &#125; if (url.startsWith(&#x27;https://plugins.gradle.org/m2/&#x27;)) &#123; project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_GRADLE_PLUGIN_URL.&quot; remove repo &#125; &#125; &#125; maven &#123; url ALIYUN_REPOSITORY_URL &#125; maven &#123; url ALIYUN_JCENTER_URL &#125; maven &#123; url ALIYUN_GOOGLE_URL &#125; maven &#123; url ALIYUN_GRADLE_PLUGIN_URL &#125; &#125; buildscript&#123; repositories &#123; def ALIYUN_REPOSITORY_URL = &#x27;https://maven.aliyun.com/repository/public/&#x27; def ALIYUN_JCENTER_URL = &#x27;https://maven.aliyun.com/repository/jcenter/&#x27; def ALIYUN_GOOGLE_URL = &#x27;https://maven.aliyun.com/repository/google/&#x27; def ALIYUN_GRADLE_PLUGIN_URL = &#x27;https://maven.aliyun.com/repository/gradle-plugin/&#x27; all &#123; ArtifactRepository repo -&gt; if(repo instanceof MavenArtifactRepository)&#123; def url = repo.url.toString() if (url.startsWith(&#x27;https://repo1.maven.org/maven2/&#x27;)) &#123; project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_REPOSITORY_URL.&quot; remove repo &#125; if (url.startsWith(&#x27;https://jcenter.bintray.com/&#x27;)) &#123; project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_JCENTER_URL.&quot; remove repo &#125; if (url.startsWith(&#x27;https://dl.google.com/dl/android/maven2/&#x27;)) &#123; project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_GOOGLE_URL.&quot; remove repo &#125; if (url.startsWith(&#x27;https://plugins.gradle.org/m2/&#x27;)) &#123; project.logger.lifecycle &quot;Repository $&#123;repo.url&#125; replaced by $ALIYUN_GRADLE_PLUGIN_URL.&quot; remove repo &#125; &#125; &#125; maven &#123; url ALIYUN_REPOSITORY_URL &#125; maven &#123; url ALIYUN_JCENTER_URL &#125; maven &#123; url ALIYUN_GOOGLE_URL &#125; maven &#123; url ALIYUN_GRADLE_PLUGIN_URL &#125; &#125; &#125;&#125; 在第一次在 Android设备 中运行 Flutter 项目, 下载了 Gradle 之后, 才会创建 C:\\Users\\&lt;用户名&gt;\\.gradle 文件夹, 该文件夹是隐藏文件夹。 再次运行项目, Gradle 就可以通过国内镜像下载项目需要的依赖, 提高下载的速度。 &#x3D;&#x3D;&#x3D; END &#x3D;&#x3D;&#x3D;","categories":[{"name":"flutter","slug":"flutter","permalink":"https://hujiyi.github.io/categories/flutter/"}],"tags":[{"name":"flutter","slug":"flutter","permalink":"https://hujiyi.github.io/tags/flutter/"},{"name":"android studio","slug":"android-studio","permalink":"https://hujiyi.github.io/tags/android-studio/"}]},{"title":"使用 Element UI 和 Leancloud 的 Vue.js 项目开发(十) - 话题详情页及评论","slug":"element-leancloud-project-X","date":"2021-11-22T12:02:09.000Z","updated":"2022-10-11T01:40:13.219Z","comments":true,"path":"2021/11/22/element-leancloud-project-X/","permalink":"https://hujiyi.github.io/2021/11/22/element-leancloud-project-X/","excerpt":"","text":"项目演示地址：https://hujiyi.github.io/acme-world-web/ 论坛话题详情页中，首先要显示的是话题有关的内容，比如标题、作者、时间、内容等各种信息 除此以外，还要提供一个用于发表评论的表单，以及显示当前话题已有的评论内容。 评论需要使用一个单独的表(Class) 来进行存放，同时，还要记录是对哪个话题进行的评论。 查询指定 id 的话题，和增加查看次数进入详情页后，要先把指定 id 的话题显示出来，同时这个话题的查看次数也在增加，相应的功能可以添加到 TopicService 中。 打开文件src/api/service/topic_service.js, 修改其内容如以下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263import LC from &#x27;leancloud-storage&#x27;; // 导入 leancloud 数据存储模块import BaseService from &#x27;./base_service&#x27;; // 导入访问 leancloud 数据存储的基类const TABLE_NAME = &#x27;Topic&#x27;; // leancloud 中存储数据的表名(Class)/** * 对leancloud应用中 名为 &quot;Topic&quot; 的 Class 进行数据操作的类 */class TopicService extends BaseService &#123; constructor(table_name) &#123; // 调用父类的构造函数 super(table_name); // 当前子类的属性 this.TABLE_NAME this.TABLE_NAME = table_name; &#125;&#125;/** * 查询指定 id 的论坛话题 * @param &#123;*&#125; id */TopicService.prototype.getTopicById = async function (id) &#123; try &#123; let query = new LC.Query(this.TABLE_NAME); // include(&quot;createdBy&quot;, &quot;lastEditor&quot;) 或者 include([&quot;createdBy&quot;, &quot;lastEditor&quot;]) 都可以 query.include([&quot;createdBy&quot;, &quot;lastEditor&quot;]); let response = await query.get(id); console.log(response); return &#123; &quot;status_code&quot;: &quot;ok&quot;, &quot;reslut&quot;: response, &#125; &#125; catch (e) &#123; console.log(&#x27;查询数据错误：&#x27;, e.code, e); return &#123; &quot;status_code&quot;: e.code, &quot;reslut&quot;: e, &#125;; &#125;&#125;/** * 指定 id 的话题 查看次数加1 * @param &#123;*&#125; id * @returns */TopicService.prototype.viewsInc = async function (id) &#123; try &#123; let topic = LC.Object.createWithoutData(this.TABLE_NAME, id); // 原子操作 来增加或减少一个属性内保存的数字 topic.increment(&#x27;views&#x27;, 1); let response = await topic.save(); return response; &#125; catch (e) &#123; console.log(&#x27;修改数据错误：&#x27;, e.code, e); &#125; return null;&#125;// 导出子类时使用 new 直接进行实例化export default new TopicService(TABLE_NAME); 添加用于评论的 CommentService评论的内容要保存在另外一个表中，这里使用一个CommentService 类来实现对评论内容的管理。 创建文件 src/api/service/comment_service.js, 内容如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596import LC from &#x27;leancloud-storage&#x27;; // 导入 leancloud 数据存储模块import BaseService from &#x27;./base_service&#x27;; // 导入访问 leancloud 数据存储的基类const TABLE_NAME = &#x27;Comment&#x27;; // leancloud 中存储数据的表名(Class)/** * 对leancloud应用中 名为 &quot;Comment&quot; 的 Class 进行数据操作的类 */class CommentService extends BaseService &#123; constructor(table_name) &#123; // 调用父类的构造函数 super(table_name); // 当前子类的属性 this.TABLE_NAME this.TABLE_NAME = table_name; &#125;&#125;/** * 发表评论 * @param &#123;*&#125; topicId 被评论的话题 id * @param &#123;*&#125; content 评论的内容 * @returns */CommentService.prototype.newComment = async function (topicId, content) &#123; try &#123; // 根据 topicId 找出被评论的话题 let topic = LC.Object.createWithoutData(&#x27;Topic&#x27;, topicId); // 创建保存评论内容的 Class let Collection = LC.Object.extend(this.TABLE_NAME); // 创建评论的内容对象 let query = new Collection(&#123; &quot;topic&quot;: topic, // 评论的话题 &quot;content&quot;: content, // 评论的内容 &quot;invisible&quot;: false, // 不可见，如果为 true 就隐藏该评论 &quot;createdBy&quot;: await this.currentUser(), // 评论者 &#125;); let response = await query.save(); // 保存评论数据 if (response) &#123; topic.increment(&#x27;reply&#x27;, 1); // 评论数加一 topic.set(&#x27;lastRepliedAt&#x27;, new Date()); // 更新最后评论时间 let resp = await topic.save(); // 保存 console.log(&#x27;发了评论的 topic ：&#x27;, resp); return response; &#125; &#125; catch (e) &#123; console.log(&#x27;添加评论失败：&#x27;, e.code, e); &#125; return null;&#125;/** * 查询指定 id 的话题的评论内容 * @param &#123;*&#125; topicId 话题 id * @param &#123;*&#125; limit 每页大小 * @param &#123;*&#125; skip 跳过记录数 * @param &#123;*&#125; sort_field 单个排序字段名(降序加负号) 默认按创建时间升序 */CommentService.prototype.getCommentByTopic = async function (topicId, limit = 5, skip = 0, sort_field = &#x27;createdAt&#x27;) &#123; try &#123; let query = new LC.Query(this.TABLE_NAME); const topic = LC.Object.createWithoutData(&#x27;Topic&#x27;, topicId); // 根据 id 获取话题 query.include(&#x27;createdBy&#x27;); query.equalTo(&#x27;topic&#x27;, topic); // 关系查询 // 排序属性： this.isMinus() 是父类中定义的方法，判断排序的字段是否 负号 开头 if (this.isMinus(sort_field)) &#123; console.log(sort_field, sort_field.substr(1)); // 去掉负号后的字段名降序 query.descending(sort_field.substr(1)); &#125; else &#123; query.ascending(sort_field); // 升序 &#125; let total = await query.count(); // 返回记录总数 // 分页查询参数 let response = await query.limit(limit).skip(skip).find(); // let response = await query.find(); console.log(&#x27;getCommentByTopic:&#x27;, total, response); return &#123; &quot;status_code&quot;: &quot;ok&quot;, &quot;totalCount&quot;: total, &quot;reslut&quot;: response, &#125; &#125; catch (e) &#123; console.log(&#x27;查询数据错误：&#x27;, e.code, e); return &#123; &quot;status_code&quot;: e.code, &quot;totalCount&quot;: 0, &quot;reslut&quot;: e, &#125;; &#125;&#125;// 导出子类时使用 new 直接进行实例化export default new CommentService(TABLE_NAME); s打开文件src/views/home/pages/Detail.vue, 编辑文件内容如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344&lt;template&gt; &lt;div&gt; &lt;p&gt;&lt;/p&gt; &lt;el-row type=&quot;flex&quot; justify=&quot;center&quot; align=&quot;middle&quot;&gt; &lt;el-col :lg=&quot;18&quot; :md=&quot;20&quot; :sm=&quot;24&quot;&gt; &lt;el-card&gt; &lt;div&gt; &lt;span class=&quot;title&quot;&gt;话题：&#123;&#123; topic.title &#125;&#125;&lt;/span&gt; &lt;br /&gt; &lt;!-- 异步数据先显示初始数据，再显示带数据的数据 --&gt; &lt;!-- 会导致三层表达式 a.b.c 渲染时会报错，是因为第一次渲染时还没有值，后来有值渲染成功 --&gt; &lt;!-- 可以不理睬，不想看错误信息也可以加 v-if=&quot;topic.createdBy&quot; 来解决 --&gt; &lt;span class=&quot;info&quot; v-if=&quot;topic.createdBy&quot;&gt; &#123;&#123; topic.createdBy.username &#125;&#125; - &#123;&#123; topic.createdAt | datetimeFormat &#125;&#125; &lt;/span&gt; &lt;/div&gt; &lt;el-divider&gt;&lt;/el-divider&gt; &lt;p v-html=&quot;topic.content&quot;&gt;&lt;/p&gt; &lt;el-divider&gt;&lt;/el-divider&gt; &lt;div&gt; &lt;p&gt; &lt;span style=&quot;font-size:18px;&quot;&gt; &lt;i class=&quot;fa fa-comments-o fa-lg&quot;&gt;&lt;/i&gt; 评论 &lt;/span&gt; &lt;span class=&quot;mx-2&quot;&gt;共 &#123;&#123; replyCount &#125;&#125; 条评论&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;el-row type=&quot;flex&quot;&gt; &lt;el-col style=&quot;width: 100px;&quot;&gt; &lt;div class=&quot;comment-user&quot;&gt; &lt;el-avatar style=&quot;background-color: red;&quot;&gt; &lt;i class=&quot;fa fa-user fa-4x&quot;&gt;&lt;/i&gt; &lt;/el-avatar&gt; &lt;span class=&quot;my-2&quot;&gt;&#123;&#123; currentUser &#125;&#125;&lt;/span&gt; &lt;/div&gt; &lt;/el-col&gt; &lt;el-col&gt; &lt;el-form&gt; &lt;el-form-item label=&quot;评论（支持 Markdown 语法）&quot; prop=&quot;desc&quot;&gt; &lt;el-input type=&quot;textarea&quot; rows=&quot;5&quot; v-model=&quot;content&quot; placeholder=&quot;输入评论内容&quot; :disabled=&quot;!currentUser&quot; &gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;div class=&quot;horiz-container&quot;&gt; &lt;span v-if=&quot;!currentUser&quot; style=&quot;color:red;&quot;&gt;登录后发表评论&lt;/span&gt; &lt;div class=&quot;spacer&quot;&gt;&lt;/div&gt; &lt;el-button :disabled=&quot;!currentUser&quot;&gt;预览&lt;/el-button&gt; &lt;el-button :disabled=&quot;!currentUser&quot; type=&quot;primary&quot; @click=&quot;newComment&quot; &gt;评论&lt;/el-button&gt; &lt;/div&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;/el-col&gt; &lt;/el-row&gt; &lt;el-row&gt; &lt;el-col&gt; &lt;div v-for=&quot;(item, index) in comments&quot; :key=&quot;index&quot;&gt; &lt;p class=&quot;author&quot;&gt;&#123;&#123; item.createdBy.username &#125;&#125;&lt;/p&gt; &lt;p v-if=&quot;!item.invisible&quot; v-html=&quot;item.content&quot;&gt;&lt;/p&gt; &lt;p v-else&gt;***该评论内容已被隐藏***&lt;/p&gt; &lt;div class=&quot;horiz-container&quot;&gt; &lt;span class=&quot;info&quot;&gt;&#123;&#123; item.createdAt | datetimeFormat &#125;&#125;&lt;/span&gt; &lt;div class=&quot;spacer&quot;&gt;&lt;/div&gt; &lt;el-link class=&quot;mx-2&quot;&gt; &lt;i class=&quot;fa fa-thumbs-o-up&quot;&gt;&lt;/i&gt; &lt;/el-link&gt; &lt;el-link class=&quot;mx-2&quot;&gt; &lt;i class=&quot;fa fa-thumbs-o-down&quot;&gt;&lt;/i&gt; &lt;/el-link&gt; &lt;el-link class=&quot;mx-2&quot;&gt;举报&lt;/el-link&gt; &lt;el-link class=&quot;mx-2&quot;&gt;隐藏&lt;/el-link&gt; &lt;/div&gt; &lt;el-divider&gt;&lt;/el-divider&gt; &lt;/div&gt; &lt;/el-col&gt; &lt;/el-row&gt; &lt;div class=&quot;horiz-container pagination&quot;&gt; &lt;div class=&quot;spacer&quot;&gt;&lt;/div&gt; &lt;el-pagination background @size-change=&quot;getCommentByTopic($route.params.id)&quot; @current-change=&quot;getCommentByTopic($route.params.id)&quot; layout=&quot;total, sizes, prev, pager, next, jumper&quot; :total=&quot;replyCount&quot; :page-sizes=&quot;[5, 10, 20, 30]&quot; :page-size.sync=&quot;pageSize&quot; :current-page.sync=&quot;currentPage&quot; &gt;&lt;/el-pagination&gt; &lt;/div&gt; &lt;/el-card&gt; &lt;/el-col&gt; &lt;/el-row&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import CommentService from &#x27;../../../api/service/comment_service&#x27;;import TopicService from &#x27;../../../api/service/topic_service&#x27;;import moment from &#x27;moment&#x27;;import &#123; marked &#125; from &#x27;marked&#x27;import hljs from &#x27;highlight.js&#x27;; // 需要安装 highlight.js, 例如：npm i highlight.jsimport &#x27;highlight.js/styles/github-dark.css&#x27;; // 代码高亮样式export default &#123; name: &#x27;Detail&#x27;, data: () =&gt; (&#123; topic: &#123;&#125;, comments: [], replyCount: 0, content: &#x27;&#x27;, pageSize: 5, currentPage: 1, currentUser: null, dialog: false, username: &#x27;&#x27;, password: &#x27;&#x27;, &#125;), async mounted() &#123; this.currentUser = localStorage.getItem(&#x27;currentUser&#x27;); // marked.js 初始化 marked.setOptions(&#123; renderer: new marked.Renderer(), highlight: function (code) &#123; return hljs.highlightAuto(code).value; // return hljs.highlightBlock(code); &#125;, &quot;gfm&quot;: true,// 启动Github样式的Markdown &quot;breaks&quot;: true,//支持Github换行符，必须打开gfm选项 &quot;tables&quot;: true, //支持Github表格，必须打开gfm选项 &quot;extensions&quot;: null, &quot;headerIds&quot;: true, &quot;headerPrefix&quot;: &quot;&quot;, &quot;highlight&quot;: null, &quot;langPrefix&quot;: &quot;language-&quot;, &quot;mangle&quot;: true, &quot;pedantic&quot;: false,// 只解析符合markdown.pl定义的，不修正markdown的错误 &quot;sanitize&quot;: false, // 原始输出，忽略HTML标签 &quot;sanitizer&quot;: null, &quot;silent&quot;: false, &quot;smartLists&quot;: false, //优化列表输出 &quot;smartypants&quot;: false,//使用更为时髦的标点，比如在引用语法中加入破折号。 &quot;tokenizer&quot;: null, &quot;walkTokens&quot;: null, &quot;xhtml&quot;: false &#125;); let topicId = this.$route.params.id; this.viewInc(topicId); this.getTopicById(topicId); this.getCommentByTopic(topicId); &#125;, methods: &#123; async getTopicById(topicId) &#123; let response = await TopicService.getTopicById(topicId); if (response.status_code === &#x27;ok&#x27;) &#123; this.topic = this.toJson(response.reslut); &#125; else &#123; this.$message(&#123; message: &#x27;出现异常，无法获取数据&#x27;, type: &#x27;error&#x27; &#125;); &#125; &#125;, async getCommentByTopic(topicId) &#123; this.comments = []; let skip = (this.currentPage - 1) * this.pageSize; let response = await CommentService.getCommentByTopic(topicId, this.pageSize, skip); if (response.status_code === &#x27;ok&#x27;) &#123; this.comments = response.reslut.map(item =&gt; &#123; return &#123; id: item.id, topicId: item.get(&#x27;topic&#x27;).id, content: this.markdown(item.get(&#x27;content&#x27;)), invisible: item.get(&#x27;visible&#x27;), createdAt: item.createdAt, updatedAt: item.updatedAt, createdBy: item.get(&quot;createdBy&quot;) ? this.getUser(item.get(&quot;createdBy&quot;)) : &quot;&quot;, &#125; &#125;); this.replyCount = response.totalCount; &#125; else &#123; this.$message(&#123; message: &#x27;出现异常，无法获取评论数据&#x27;, type: &#x27;error&#x27; &#125;); &#125; &#125;, async newComment() &#123; let content = this.content.trim(); if (content) &#123; let item = await CommentService.newComment(this.topic.id, content); if (item) &#123; console.log(item); this.content = &#x27;&#x27;; // 把新评论添加到当前评论的前面。 this.comments.push(&#123; id: item.id, topicId: item.get(&#x27;topic&#x27;).id, content: this.markdown(item.get(&#x27;content&#x27;)), invisible: item.get(&#x27;visible&#x27;), createdAt: item.createdAt, updatedAt: item.updatedAt, createdBy: item.get(&quot;createdBy&quot;) ? this.getUser(item.get(&quot;createdBy&quot;)) : &quot;&quot;, &#125;); this.replyCount++; this.$message(&#123; type: &#x27;success&#x27;, message: `评论发表成功`, &#125;); &#125; else &#123; this.$message(&#123; message: &#x27;出现错误, 无法完成评论&#x27;, type: &#x27;error&#x27; &#125;); &#125; &#125; &#125;, // 查看次数加1 async viewInc(id) &#123; await TopicService.viewsInc(id); &#125;, toLogin() &#123; console.log(&#x27;aaa&#x27;); if (!this.currentUser) &#123; this.dialog = true; &#125; &#125;, // 获取用户中各个字段的值， 可以根据需要添加 getUser(user) &#123; // console.log(user); return &#123; id: user.id, username: user.get(&quot;username&quot;), email: user.get(&quot;email&quot;), &#125; &#125;, // 将从服务器端取到的数据不能直接使用，转为对象格式的数据 toJson(item) &#123; return &#123; id: item.id, // leancloud Class 自带属性，对应 leanclud Class 中的 &quot;ObjectId&quot;, 可以用&quot;.id&quot;直接引用 title: item.get(&#x27;title&#x27;), // 因为pre标签缺失hljs这个class，加上就好了将拿到的markdown内容， // 用marked转成html字符串后，replace替换&lt;pre&gt;标签为&lt;pre class=&quot;hljs&quot;&gt; // content: marked(item.get(&#x27;content&#x27;)).replace(/&lt;pre&gt;/g, &quot;&lt;pre class=&#x27;hljs&#x27;&gt;&quot;), content: this.markdown(item.get(&#x27;content&#x27;)), views: item.get(&#x27;views&#x27;), reply: item.get(&#x27;reply&#x27;), level: item.get(&#x27;level&#x27;), createdAt: item.createdAt, // leancloud Class 自带属性,创建时间,不能修改值 updatedAt: item.updatedAt, // leancloud Class 自带属性,最后修改时间,只能leancloud 自动修改 /** * createdBy、lastEditor 指向另一个表的字段, 默认只能得到该字段在关联表中的id 值 * 要得到完整值， 查询时字段名要包含在 include 中， * 取值时，要先判断是否为空，如果为空，取值会抛出异常， */ createdBy: item.get(&quot;createdBy&quot;) ? this.getUser(item.get(&quot;createdBy&quot;)) : &quot;&quot;, lastEditor: item.get(&quot;lastEditor&quot;) ? this.getUser(item.get(&quot;lastEditor&quot;)) : &quot;&quot;, &#125; &#125;, // 将 markdown 语法写的内容转为 html 显示 markdown(val) &#123; return marked(val).replace(/&lt;pre&gt;/g, &quot;&lt;pre class=&#x27;hljs&#x27;&gt;&quot;); &#125;, &#125;, filters: &#123; // 使用 moment.js 定义日期时间过滤器函数 datetimeFormat(val) &#123; let now = new Date(); // 计算两个时间相差多少天 let days = moment(now).diff(moment(val), &#x27;days&#x27;); if (days &lt;= 3) &#123; // 小于三天的返回格式：1小时前 return moment(val).fromNow(); &#125; // 三天以上的返回日期时间 return moment(val).format(&quot;lll&quot;); &#125;, &#125;,&#125;&lt;/script&gt;&lt;style&gt;.title &#123; font-size: 14px; font-weight: bold;&#125;.info &#123; font-size: 12px; color: #c2c2c2;&#125;.author &#123; font-size: 14px; font-weight: bold; color: darkcyan;&#125;.comment-user &#123; display: flex; flex-flow: column; justify-content: center; align-items: center; height: 200px;&#125;.comment-content &#123; font-size: 14px;&#125;&lt;/style&gt;","categories":[{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/categories/vue-js/"}],"tags":[{"name":"leancloud","slug":"leancloud","permalink":"https://hujiyi.github.io/tags/leancloud/"},{"name":"element ui","slug":"element-ui","permalink":"https://hujiyi.github.io/tags/element-ui/"},{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/tags/vue-js/"}]},{"title":"使用 Element UI 和 Leancloud 的 Vue.js 项目开发(九) - 首页显示话题列表","slug":"element-leancloud-project-IX","date":"2021-11-21T07:31:34.000Z","updated":"2022-10-11T01:40:13.204Z","comments":true,"path":"2021/11/21/element-leancloud-project-IX/","permalink":"https://hujiyi.github.io/2021/11/21/element-leancloud-project-IX/","excerpt":"","text":"项目演示地址：https://hujiyi.github.io/acme-world-web/ 网站前台的规划与路由要显示论坛的话题列表，以及显示话题的详细内容、添加及显示用户的评论，需要添加相应的视图 添加前台视图文件在 src/views/home 文件夹添加一个名为 pages 的文件夹，然后在该文件夹中添加用于显示话题列表的视图文件TopicList.vue 以及 显示话题详情的视图文件 Detail.vue。 src/views/ 文件夹的最终组成结构如以下所示： 1234567891011121314151617181920212223.|-- account| |-- pages| | |-- Login.vue| | |-- PasswordReset.vue| | `-- SignUp.vue| `-- Index.vue|-- dashboard| |-- forum| | |-- CommentManager.vue| | `-- TopicManager.vue| |-- layout| | |-- Aside.vue| | |-- Header.vue| | `-- MenuTree.vue| |-- pages| | `-- MainIndex.vue| `-- Index.vue`-- home |-- pages | |-- Detail.vue | `-- ToplicList.vue `-- Index.vue 编辑路由打开文件： src/router/index.js， 在原来的 name: &#39;Home&#39; 的路由项添加前面两个视图对应的路由项，最终完成的代码如以下所示： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111import Vue from &#x27;vue&#x27;;import VueRouter from &#x27;vue-router&#x27;;Vue.use(VueRouter);const routes = [ &#123; path: &#x27;/&#x27;, // name: &#x27;Home&#x27;, component: () =&gt; import(&#x27;../views/home/Index.vue&#x27;), children: [ &#123; path: &#x27;&#x27;, name: &#x27;ToplicList&#x27;, // 论坛话题列表 component: () =&gt; import(&#x27;../views/home/pages/ToplicList.vue&#x27;), &#125;, &#123; path: &#x27;/detail/:id&#x27;, // 动态路由, id 用于接收参数 name: &#x27;Detail&#x27;, // 话题详情 component: () =&gt; import(&#x27;../views/home/pages/Detail.vue&#x27;), &#125;, ] &#125;, &#123; path: &#x27;/account&#x27;, redirect: &#x27;/login&#x27;, component: () =&gt; import(&#x27;../views/account/Index.vue&#x27;), children: [ &#123; path: &#x27;/login&#x27;, name: &#x27;Login&#x27;, component: () =&gt; import(&#x27;../views/account/pages/Login.vue&#x27;), &#125;, &#123; path: &#x27;/signup&#x27;, name: &#x27;SignUp&#x27;, component: () =&gt; import(&#x27;../views/account/pages/SignUp.vue&#x27;), &#125;, &#123; path: &#x27;/password_reset&#x27;, name: &#x27;PasswordReset&#x27;, component: () =&gt; import(&#x27;../views/account/pages/PasswordReset.vue&#x27;), &#125;, ] &#125;, &#123; path: &#x27;/dashboard&#x27;, component: () =&gt; import(&#x27;../views/dashboard/Index.vue&#x27;), // 添加路由元信息 meta: &#123; requiresAuth: true, &#125; 用于标识进入该路由必须登录 meta: &#123; requiresAuth: true &#125;, children: [ &#123; path: &#x27;&#x27;, alias: &#x27;index&#x27;, name: &#x27;Dashboard&#x27;, component: () =&gt; import(&#x27;@/views/dashboard/pages/MainIndex.vue&#x27;), &#125;, &#123; path: &#x27;topic_manager&#x27;, name: &#x27;TopicManager&#x27;, component: () =&gt; import(&#x27;@/views/dashboard/forum/TopicManager.vue&#x27;), &#125;, &#123; path: &#x27;comment_manager&#x27;, name: &#x27;CommentManager&#x27;, component: () =&gt; import(&#x27;@/views/dashboard/forum/CommentManager.vue&#x27;), &#125;, ], &#125;];const router = new VueRouter(&#123; routes&#125;);// 使用路由守卫,具体内容见官方文档：https://router.vuejs.org/zh/guide/advanced/meta.html// 特别注意事项：确保 router.beforeEach 中只有一个 next() 会被执行// 如果有多个 next() 被执行，将会出现重复路由的异常router.beforeEach((to, from, next) =&gt; &#123; let login_router = [&#x27;/account&#x27;, &#x27;/login&#x27;]; // 如果 跳转的目标 path 是登录页（看上面的路由设置 ） if (to.path in login_router) &#123; // 保存跳转到登录页之前的地址， 登录成功后跳转回该页 // 回跳功能在 登录页 &quot;src/views/account/pages/Login.vue&quot; 实现 localStorage.setItem(&quot;preRoute&quot;, router.currentRoute.fullPath); &#125; // 检查跳转的目标路由是否需要登录(包含 meta: &#123;requiresAuth: true, &#125;,) if (to.matched.some(record =&gt; record.meta.requiresAuth)) &#123; // 检查用户是否登录 if (!localStorage.getItem(&#x27;token&#x27;)) &#123; next(&#123; path: &#x27;/login&#x27;, query: &#123; redirect: to.fullPath &#125; &#125;) &#125; else &#123; next(); &#125; &#125; else &#123; next(); &#125;&#125;);export default router; 网站首页的修改打开文件： src/views/home/Index.vue， 将原来 &lt;el-main&gt; 标签中的文字删掉，并替换为 &lt;router-view /&gt; 用于显示匹配的子路由项对应的视图， 最终完成的代码如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;template&gt; &lt;el-container&gt; &lt;el-header class=&quot;horiz-container&quot;&gt; &lt;div class=&quot;logo&quot;&gt; &lt;!-- 添加返回首页的链接 --&gt; &lt;router-link to=&quot;/&quot;&gt;Acme World APP&lt;/router-link&gt; &lt;/div&gt; &lt;div class=&quot;spacer&quot;&gt;&lt;/div&gt; &lt;router-link to=&quot;/dashboard&quot; class=&quot;m-2&quot;&gt; &lt;el-button type=&quot;text&quot;&gt;后台管理&lt;/el-button&gt; &lt;/router-link&gt; &lt;router-link to=&quot;/login&quot; class=&quot;m-2&quot;&gt; &lt;el-button type=&quot;text&quot;&gt;登录&lt;/el-button&gt; &lt;/router-link&gt; &lt;/el-header&gt; &lt;el-main&gt; &lt;!-- 响应并显示匹配子路由的组件 --&gt; &lt;router-view /&gt; &lt;/el-main&gt; &lt;/el-container&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &#x27;Home&#x27;,&#125;&lt;/script&gt;&lt;style&gt;.el-container &#123; /* 让最外层组件占满整个可见的高度 */ height: 100vh;&#125;.el-header &#123; background-color: #b3c0d1; color: #333; line-height: 60px; /* 交叉轴对齐方式：居中 */ align-items: center;&#125;.el-main &#123; background-color: #e6e6e6; &#125;.logo a&#123; text-decoration: none; font-size: 24px; font-weight: bold; padding-left: 20px;&#125;&lt;/style&gt; 显示论坛话题列表src/views/home/pages/ToplicList.vue 的代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224&lt;template&gt; &lt;div&gt; &lt;el-row type=&quot;flex&quot; justify=&quot;center&quot; align=&quot;middle&quot;&gt; &lt;el-col :lg=&quot;18&quot; :md=&quot;20&quot; :sm=&quot;24&quot;&gt; &lt;div class=&quot;shadow&quot;&gt; &lt;el-row type=&quot;flex&quot; align=&quot;middle&quot; class=&quot;topic-title&quot;&gt; &lt;el-col style=&quot;text-align:center&quot;&gt;标题&lt;/el-col&gt; &lt;el-col style=&quot;width:100px;&quot; class=&quot;hidden-md-and-down&quot;&gt;查看&lt;/el-col&gt; &lt;el-col style=&quot;width:100px;&quot; class=&quot;hidden-md-and-down&quot;&gt;评论&lt;/el-col&gt; &lt;el-col style=&quot;width:290px; text-align:center;&quot; class=&quot;hidden-sm-and-down&quot; &gt;最后评论&lt;/el-col&gt; &lt;/el-row&gt; &lt;div v-for=&quot;(item,index) in topics&quot; :key=&quot;index&quot; id=&quot;topic&quot; class=&quot;topic-item&quot;&gt; &lt;el-row type=&quot;flex&quot; justify=&quot;center&quot; align=&quot;middle&quot; class=&quot;spacer&quot;&gt; &lt;el-col :class=&quot;&#123; top: item.level &gt; 0 &#125;&quot;&gt; &lt;span v-if=&quot;item.level &gt; 0&quot;&gt;[置顶]&lt;/span&gt; &lt;span v-else&gt;[话题]&lt;/span&gt; &lt;router-link :to=&quot;&#123; name: &#x27;Detail&#x27;, params: &#123; id: item.id &#125; &#125;&quot; &gt;&#123;&#123; item.title &#125;&#125;&lt;/router-link&gt; &lt;/el-col&gt; &lt;el-col style=&quot;width:100px;&quot; class=&quot;hidden-md-and-down&quot;&gt;&#123;&#123; item.views &#125;&#125;&lt;/el-col&gt; &lt;el-col style=&quot;width:100px;&quot; class=&quot;hidden-md-and-down&quot;&gt;&#123;&#123; item.reply &#125;&#125;&lt;/el-col&gt; &lt;el-col style=&quot;width:290px;&quot; class=&quot;hidden-sm-and-down&quot;&gt; &lt;span&gt;&#123;&#123; item.lastEditor.username &#125;&#125;&lt;/span&gt; &lt;br /&gt; &lt;span style=&quot;color:#a0a0a0;font-size:14px;&quot; &gt;&#123;&#123; item.lastRepliedAt | datetimeFormat &#125;&#125;&lt;/span&gt; &lt;/el-col&gt; &lt;/el-row&gt; &lt;/div&gt; &lt;div class=&quot;horiz-container pagination&quot;&gt; &lt;div class=&quot;spacer&quot;&gt;&lt;/div&gt; &lt;el-pagination background @size-change=&quot;getTopics&quot; @current-change=&quot;getTopics&quot; layout=&quot;total, sizes, prev, pager, next, jumper&quot; :total=&quot;totalCount&quot; :page-sizes=&quot;[5, 10, 20, 30]&quot; :page-size.sync=&quot;pageSize&quot; :current-page.sync=&quot;currentPage&quot; &gt;&lt;/el-pagination&gt; &lt;/div&gt; &lt;/div&gt; &lt;/el-col&gt; &lt;/el-row&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import TopicService from &#x27;../../../api/service/topic_service&#x27;;import moment from &#x27;moment&#x27;;export default &#123; name: &#x27;TopicList&#x27;, data: () =&gt; (&#123; topics: [], // 从服务器取回的一页数据 pageSize: 10, // 每页大小 currentPage: 1, // 当前页 totalCount: 0, // 总记录数量 &#125;), mounted() &#123; this.getTopics(); // 获取论坛话题 &#125;, methods: &#123; async getTopics() &#123; this.loading = true; this.topics = []; // 清空数据 let skip = (this.currentPage - 1) * this.pageSize; // 查询当前页的数据， let response = await TopicService.fetchAll(this.pageSize, skip, [&quot;createdBy&quot;, &quot;lastEditor&quot;], [&#x27;-level&#x27;, &#x27;-lastRepliedAt&#x27;]); if (response.status_code === &#x27;ok&#x27;) &#123; console.log(response); this.totalCount = response.totalCount; // 总记录数 // 返回当前页所有数据的结果 this.topics = response.reslut.map(item =&gt; &#123; return this.toJson(item) &#125;); &#125; this.loading = false; &#125;, // 获取用户中各个字段的值， 可以根据需要添加 getUser(user) &#123; // console.log(user); return &#123; id: user.id, username: user.get(&quot;username&quot;), email: user.get(&quot;email&quot;), &#125; &#125;, // 将从服务器端取到的数据不能直接使用，转为对象格式的数据 toJson(item) &#123; return &#123; id: item.id, // leancloud Class 自带属性，对应 leanclud Class 中的 &quot;ObjectId&quot;, 可以用&quot;.id&quot;直接引用 title: item.get(&#x27;title&#x27;), content: item.get(&#x27;content&#x27;), views: item.get(&#x27;views&#x27;), reply: item.get(&#x27;reply&#x27;), level: item.get(&#x27;level&#x27;), lastRepliedAt: item.get(&#x27;lastRepliedAt&#x27;), createdAt: item.createdAt, // leancloud Class 自带属性,创建时间,不能修改值 updatedAt: item.updatedAt, // leancloud Class 自带属性,最后修改时间,只能leancloud 自动修改 /** * createdBy、lastEditor 指向另一个表的字段, 默认只能得到该字段在关联表中的id 值 * 要得到完整值， 查询时字段名要包含在 include 中， * 取值时，要先判断是否为空，如果为空，取值会抛出异常， */ createdBy: item.get(&quot;createdBy&quot;) ? this.getUser(item.get(&quot;createdBy&quot;)) : &quot;&quot;, lastEditor: item.get(&quot;lastEditor&quot;) ? this.getUser(item.get(&quot;lastEditor&quot;)) : &quot;&quot;, &#125; &#125;, /** * 自定义用于局部区域显示 loading 的函数 * @param &#123;*&#125; targetNode 目标区域的选择器，建设使用 id 选择器 * @returns */ showLoading(targetNode, message) &#123; this.loading = Loading.service(&#123; // 锁定屏幕的滚动 lock: true, // 显示的文本 text: message, // document.querySelector 用于以获取到对应 DOM 节点 target: document.querySelector(targetNode), &#125;); &#125;, // 停止显示 loading endLoading() &#123; this.loading.close(); &#125; &#125;, // 过滤器 filters: &#123; // 使用 moment.js 定义日期时间过滤器函数 datetimeFormat(val) &#123; let now = new Date(); // 计算两个时间相差的天数 let days = moment(now).diff(moment(val), &#x27;days&#x27;); if (days &lt;= 3) &#123; // 小于三天的返回格式：1小时前 return moment(val).fromNow(); &#125; // 三天以上的返回日期时间 return moment(val).format(&quot;lll&quot;); &#125;, &#125;,&#125;&lt;/script&gt;&lt;style&gt;/* 标题行的样式 */.topic-title &#123; background-color: #f1f4f8; padding-top: 20px; padding-bottom: 20px; font-size: 14px; font-weight: bold; border-top: 2px solid #1985db; border-bottom: 1px solid #a0a0a0;&#125;/* 置顶话题的样式 */.top &#123; font-weight: bold;&#125;/* 置顶话题超链接的样式 */.top a &#123; color: #2897c5 !important ;&#125;.topic-item &#123; display: flex; align-items: center; height: 50px; padding: 5px; background: #ffffff; border-bottom: 1px solid #a0a0a0;&#125;/* 隔行显示不同的背景颜色 */.topic-item:nth-child(odd) &#123; background: #f1f4f8;&#125;.topic-item a &#123; text-decoration: none; color: #333333; padding-left: 8px;&#125;/* 鼠标指向的行背景色 */.topic-item:hover &#123; background: #b0d0fd;&#125;.pagination &#123; padding-top: 16px; padding-bottom: 16px;&#125;/* 阴影 */.shadow &#123; box-shadow: 0 2px 12px 2px rgba(0, 0, 0, 0.1); border-radius: 8px; border: 1px solid #ebeef5; background-color: #fff; color: #303133; transition: 0.3s;&#125;&lt;/style&gt; 后继内容：使用 Element UI 和 Leancloud 的 Vue.js 项目开发 X &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/categories/vue-js/"}],"tags":[{"name":"leancloud","slug":"leancloud","permalink":"https://hujiyi.github.io/tags/leancloud/"},{"name":"element ui","slug":"element-ui","permalink":"https://hujiyi.github.io/tags/element-ui/"},{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/tags/vue-js/"}]},{"title":"使用 Element UI 和 Leancloud 的 Vue.js 项目开发(八) - 论坛话题管理的实现","slug":"element-leancloud-project-VIII","date":"2021-11-21T02:43:23.000Z","updated":"2022-10-11T01:40:13.219Z","comments":true,"path":"2021/11/21/element-leancloud-project-VIII/","permalink":"https://hujiyi.github.io/2021/11/21/element-leancloud-project-VIII/","excerpt":"","text":"项目演示地址：https://hujiyi.github.io/acme-world-web/ 论坛话题的数据存储服务类在 src/api/service/ 文件夹下新建 topic_service.js, 打开文件 src/api/service/topic_service.js, 编辑其代码如下： 12345678910111213141516171819import BaseService from &#x27;./base_service&#x27;; // 导入访问 leancloud 数据存储的基类const TABLE_NAME = &#x27;Topic&#x27;; // leancloud 中存储数据的表名(Class)/** * 对leancloud应用中 名为 &quot;Topic&quot; 的 Class 进行数据操作的类 */class TopicService extends BaseService &#123; constructor(table_name) &#123; // 调用父类的构造函数 super(table_name); // 当前子类的属性 this.TABLE_NAME this.TABLE_NAME = table_name; &#125;&#125;// 导出子类时使用 new 直接进行实例化export default new TopicService(TABLE_NAME); 添加新话题打开文件 src/views/dashboard/forum/TopicManager.vue, 编辑其代码如以下内容： 1 以下是一些对象的内置属性，会在对象保存时自动创建，无需手动指定 内置属性 类型 描述 objectId String 该对象唯一的 ID 标识。 ACL AV.ACL 该对象的权限控制，实际上是一个 JSON 对象，控制台做了展现优化。 createdAt Date 该对象被创建的时间。 updatedAt Date 该对象最后一次被修改的时间。 显示论坛话题列表编辑论坛话题删除一个话题批量删除选中的话题数据分页话题管理的最终代码src/views/dashboard/forum/TopicManager.vue最终完成的完整代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440&lt;template&gt; &lt;div&gt; &lt;el-card shadow=&quot;always&quot;&gt; &lt;div slot=&quot;header&quot; class=&quot;horiz-container align-center&quot;&gt; &lt;span class=&quot;header-text&quot;&gt;论坛话题管理&lt;/span&gt; &lt;el-divider direction=&quot;vertical&quot; class=&quot;header-text&quot;&gt;&lt;/el-divider&gt; &lt;el-button type=&quot;danger&quot; :disabled=&quot;selected.length &lt;= 0&quot; @click=&quot;deleteSelected&quot; &gt;批量删除&lt;/el-button&gt; &lt;div class=&quot;spacer&quot;&gt;&lt;/div&gt; &lt;el-button size=&quot;medium&quot; type=&quot;success&quot; @click=&quot;dialog = true&quot;&gt; &lt;i class=&quot;fa fa-plus&quot;&gt;&lt;/i&gt; 添加新话题 &lt;/el-button&gt; &lt;/div&gt; &lt;el-table :data=&quot;topics&quot; v-loading=&quot;loading&quot; @selection-change=&quot;mutilSelectionChange&quot; style=&quot;width: 100%&quot; stripe border &gt; &lt;el-table-column type=&quot;selection&quot; width=&quot;35&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt; &lt;el-table-column prop=&quot;title&quot; label=&quot;话题&quot;&gt;&lt;/el-table-column&gt; &lt;el-table-column prop=&quot;level&quot; label=&quot;排序值&quot; width=&quot;70&quot;&gt;&lt;/el-table-column&gt; &lt;el-table-column label=&quot;查看/评论&quot; width=&quot;100&quot; align=&quot;center&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; &lt;span&gt;&#123;&#123; scope.row.views &#125;&#125;&lt;/span&gt; / &lt;span&gt;&#123;&#123; scope.row.reply &#125;&#125;&lt;/span&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;el-table-column label=&quot;作者&quot; width=&quot;170&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; &lt;!-- 用户名不存在时，显示会出错，所以要先判断 --&gt; &lt;span v-if=&quot;scope.row.createdBy&quot;&gt;&#123;&#123; scope.row.createdBy.username &#125;&#125;&lt;/span&gt; &lt;br /&gt; &lt;span&gt;&#123;&#123; scope.row.createdAt | datetimeFormat &#125;&#125;&lt;/span&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;el-table-column label=&quot;最后修改&quot; width=&quot;170&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; &lt;!-- 用户名不存在时，显示会出错，所以要先判断 --&gt; &lt;span&gt;&#123;&#123; scope.row.lastEditor.username &#125;&#125;&lt;/span&gt; &lt;br /&gt; &lt;span&gt;&#123;&#123; scope.row.updatedAt | datetimeFormat &#125;&#125;&lt;/span&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;el-table-column label=&quot;操作&quot; width=&quot;100&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; &lt;el-button type=&quot;text&quot; size=&quot;medium&quot; title=&quot;编辑&quot; @click=&quot;editItem(scope.row)&quot; &gt; &lt;i class=&quot;fa fa-pencil-square-o fa-lg&quot; style=&quot;color:blue; &quot;&gt;&lt;/i&gt; &lt;/el-button&gt; &lt;el-button size=&quot;medium&quot; type=&quot;text&quot; title=&quot;删除&quot; @click=&quot;deleteItem(scope.row)&quot; &gt; &lt;i class=&quot;fa fa-trash-o fa-lg&quot; style=&quot;color:red; &quot;&gt;&lt;/i&gt; &lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;div class=&quot;horiz-container&quot;&gt; &lt;div class=&quot;spacer&quot;&gt;&lt;/div&gt; &lt;el-pagination background @size-change=&quot;getTopics&quot; @current-change=&quot;getTopics&quot; layout=&quot;total, sizes, prev, pager, next, jumper&quot; :total=&quot;totalCount&quot; :page-sizes=&quot;[5, 10, 20, 30]&quot; :page-size.sync=&quot;pageSize&quot; :current-page.sync=&quot;currentPage&quot; &gt;&lt;/el-pagination&gt; &lt;/div&gt; &lt;/el-card&gt; &lt;!-- 添加和修改话题的对话框 开始 --&gt; &lt;el-dialog :visible.sync=&quot;dialog&quot; width=&quot;80%&quot; :close-on-click-modal=&quot;false&quot; :fullscreen=&quot;fullscreen&quot; &gt; &lt;span slot=&quot;title&quot;&gt; &lt;el-button type=&quot;text&quot; @click=&quot;fullscreen = true&quot; v-if=&quot;!fullscreen&quot;&gt; &lt;i class=&quot;fa fa-square-o&quot; style=&quot;font-size: 20px;&quot; title=&quot;最大化&quot;&gt;&lt;/i&gt; &lt;/el-button&gt; &lt;el-button type=&quot;text&quot; @click=&quot;fullscreen = false&quot; v-else&gt; &lt;i class=&quot;fa fa-clone&quot; style=&quot;font-size: 20px;&quot; title=&quot;还原&quot;&gt;&lt;/i&gt; &lt;/el-button&gt; &lt;span class=&quot;dialog-title mx-2&quot;&gt;&#123;&#123; formTitle &#125;&#125;&lt;/span&gt; &lt;/span&gt; &lt;el-card shadow=&quot;always&quot;&gt; &lt;el-form label-position=&quot;top&quot;&gt; &lt;el-row :gutter=&quot;20&quot;&gt; &lt;!-- :gutter=&quot;20&quot; 同一行内，两列之间的间隔 --&gt; &lt;el-col :md=&quot;24 - formCols&quot; :sm=&quot;24&quot; v-if=&quot;editedIndex !== -1&quot;&gt; &lt;el-form-item label=&quot;手工排序值&quot;&gt; &lt;el-input type=&quot;number&quot; v-model=&quot;editedItem.level&quot; controls-position=&quot;right&quot; :max=&quot;1000&quot; label=&quot;Level&quot; &gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;/el-col&gt; &lt;el-col :md=&quot;formCols&quot; :sm=&quot;24&quot;&gt; &lt;el-form-item label=&quot;标题&quot;&gt; &lt;el-input v-model=&quot;editedItem.title&quot; placeholder=&quot;标题&quot; maxlength=&quot;50&quot; show-word-limit &gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;/el-col&gt; &lt;/el-row&gt; &lt;el-form-item label=&quot;话题内容(支持 Markdown 语法)&quot;&gt; &lt;el-input type=&quot;textarea&quot; v-model=&quot;editedItem.content&quot; :rows=&quot;row&quot; placeholder=&quot;话题内容&quot; &gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;/el-card&gt; &lt;span slot=&quot;footer&quot;&gt; &lt;el-button type=&quot;danger&quot; @click=&quot;dialog = false&quot;&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;saveItem&quot;&gt;保存&lt;/el-button&gt; &lt;/span&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import TopicService from &#x27;../../../api/service/topic_service&#x27;;import moment from &#x27;moment&#x27;; // 日期时间处理export default &#123; name: &#x27;TopicManager&#x27;, data: () =&gt; (&#123; topics: [], // 从服务器取回的一页数据 dialog: false, // 显示添加和修改对话框 fullscreen: false, // 对话框全屏 loading: false, // 是否显示加载动画 pageSize: 10, // 每页大小 currentPage: 1, // 当前页 totalCount: 0, // 总记录数量 totalPage: 1, // 总页数 selected: [], // 选中的行 editedIndex: -1, // 添加 或 修改 的标志；-1表示添加，否则为当前编辑项在 categories 中的索引 // 添加或修改绑定到对话框上的数据 editedItem: &#123; title: &quot;&quot;, // 话题的标题 content: &quot;&quot;, // 话题的内容 level: 0, // 手动排序值 views: 0, // 查看次数 reply: 0, // 评论数 &#125;, // 用于添加或修改结束后，还原 editedItem 的初始值 defaultItem: &#123; title: &quot;&quot;, // 话题的标题 content: &quot;&quot;, // 话题的内容 level: 0, // 手动排序值 views: 0, // 查看次数 reply: 0, // 评论数 &#125;, &#125;), mounted() &#123; this.getTopics(); // 获取论坛话题 &#125;, methods: &#123; async getTopics() &#123; this.loading = true; this.topics = []; // 清空数据 let skip = (this.currentPage - 1) * this.pageSize; // 查询当前页的数据， let response = await TopicService.fetchAll(this.pageSize, skip, [&quot;createdBy&quot;, &quot;lastEditor&quot;], [&#x27;-level&#x27;, &#x27;-updatedAt&#x27;]); if (response.status_code === &#x27;ok&#x27;) &#123; this.totalCount = response.totalCount; // 总记录数 // 返回当前页所有数据的结果 this.topics = response.reslut.map(item =&gt; &#123; return this.toJson(item) &#125;); &#125; this.loading = false; &#125;, async saveItem() &#123; console.log(&#x27;this.editedIndex：&#x27;, this.editedIndex); if (this.editedIndex === -1) &#123; /** * 这里是添加新话题时保存数据， 以 this.editedItem 为添加到 leancloud 的基础， 并添加三个属性 */ // 添加一个创建者的属性 this.editedItem.createdBy = await TopicService.currentUser(); // 添加一个最后修改者的属性 this.editedItem.lastEditor = await TopicService.currentUser(); // 添加一个最后回复时间的属性 this.editedItem.lastRepliedAt = new Date(); // 标题去掉前后空格 this.editedItem.title = this.editedItem.title.trim(); if (this.editedItem.title) &#123; // 向服务器添加一条记录 let response = await TopicService.create(this.editedItem); if (response) &#123; // 新增的记录添加到话题列表的前面 this.topics.unshift(this.toJson(response)); // 将结果按照 level 重新排序 this.topics.sort((a, b) =&gt; &#123; return b.level - a.level; &#125;); // 添加新记录后总数超过一页大小 if (this.topics.length &gt; this.pageSize) &#123; this.topics.pop(); // 移除最后一个 &#125; // 使用 message 通知 this.$message(&#123; message: `已经成功添加一个话题: $&#123;this.editedItem.title&#125;`, // 消息内容 type: &#x27;success&#x27; &#125;); this.dialog = false; // 关闭对话框 &#125; else &#123; this.$message(&#123; message: &#x27;标题不能为空&#x27;, type: &#x27;warning&#x27; &#125;); &#125; &#125; &#125; else &#123; // this.editedIndex 不等于 -1, 表示进行修改操作，其值为被修改项在数组中的索引 // Object.assign()复制对象，第二个参数中的同名属性的值会覆盖第一个参数中对应的属性 let item = Object.assign(this.topics[this.editedIndex], this.editedItem); let response = await TopicService.update(item.id, &#123; title: item.title, // 修改后的标题 content: item.content, // 修改后的话题内容 level: Number(item.level), // 修改后的level， 要转为数字类型 lastEditor: await TopicService.currentUser(), // 最后修改者为当前用户 &#125;); if (response) &#123; this.topics[this.editedIndex].updatedAt = response.updatedAt; // 将结果按照 level 重新排序 this.topics.sort((a, b) =&gt; &#123; return b.level - a.level; &#125;); this.$message(&#123; message: &#x27;论坛话题编辑成功&#x27;, type: &#x27;success&#x27; &#125;); this.dialog = false; // 关闭对话框 &#125; else &#123; this.$message(&#123; message: &#x27;出现错误, 无法完成论坛话题修改&#x27;, type: &#x27;error&#x27; &#125;); &#125; &#125; &#125;, // 显示编辑对话框 editItem(item) &#123; // 查找 被 编辑项的索引值 this.editedIndex = this.topics.indexOf(item); // Object.assign() 用于将源对象复制到目标对象 // 因为直接用等号赋值，这两个变量操作的是同一个内存地址 this.editedItem = Object.assign(&#123;&#125;, item); this.dialog = true; // 显示编辑对话框 &#125;, // 删除单条记录 deleteItem(item) &#123; this.$confirm(`确定要删除标题为：&quot;$&#123;item.title&#125;&quot; 的话题吗？`, &#x27;删除话题&#x27;, &#123; confirmButtonText: &#x27;确定&#x27;, cancelButtonText: &#x27;取消&#x27;, type: &#x27;warning&#x27; &#125;).then(async () =&gt; &#123; // .then() 里面的匿名函数前要加 async // 在服务器端执行删除操作 let response = await TopicService.delete(item.id); if (response) &#123; this.getTopics(); // 重新载入数据 this.$message(&#123; type: &#x27;success&#x27;, message: &#x27;删除成功!&#x27; &#125;); &#125; &#125;).catch(() =&gt; &#123; this.$message(&#123; type: &#x27;info&#x27;, message: &#x27;已取消删除&#x27; &#125;); &#125;); &#125;, // 删除选中的多条记录 async deleteSelected() &#123; this.$confirm(`确定要删除已选中的 $&#123;this.selected.length&#125; 个话题吗？`, &#x27;批量删除话题&#x27;, &#123; confirmButtonText: &#x27;确定&#x27;, cancelButtonText: &#x27;取消&#x27;, type: &#x27;warning&#x27; &#125;).then(async () =&gt; &#123; // .then() 里面的匿名函数前要加 async // 在服务器端执行删除操作 let response = await TopicService.deleteBatch(this.selected); if (response) &#123; this.getTopics(); // 重新载入数据 this.$message(&#123; type: &#x27;success&#x27;, message: `成功删除选中的 $&#123;this.selected.length&#125; 个话题!` &#125;); this.selected = []; // 清空已选中的对象 &#125; &#125;).catch(() =&gt; &#123; this.$message(&#123; type: &#x27;info&#x27;, message: &#x27;已取消删除&#x27; &#125;); &#125;); &#125;, // 用于表格多选框取值的函数 mutilSelectionChange(val) &#123; this.selected = val; // 保存选中的行 console.log(&#x27;mutilSelectionChange:&#x27;, this.selected); &#125;, // 获取用户中各个字段的值， 可以根据需要添加 getUser(user) &#123; // console.log(user); return &#123; id: user.id, username: user.get(&quot;username&quot;), email: user.get(&quot;email&quot;), &#125; &#125;, // 将从服务器端取到的数据不能直接使用，转为对象格式的数据 toJson(item) &#123; return &#123; id: item.id, // leancloud Class 自带属性，对应 leanclud Class 中的 &quot;ObjectId&quot;, 可以用&quot;.id&quot;直接引用 title: item.get(&#x27;title&#x27;), content: item.get(&#x27;content&#x27;), views: item.get(&#x27;views&#x27;), reply: item.get(&#x27;reply&#x27;), level: item.get(&#x27;level&#x27;), lastRepliedAt: item.get(&#x27;lastRepliedAt&#x27;), createdAt: item.createdAt, // leancloud Class 自带属性,创建时间,不能修改值 updatedAt: item.updatedAt, // leancloud Class 自带属性,最后修改时间,只能leancloud 自动修改 /** * createdBy、lastEditor 指向另一个表的字段, 默认只能得到该字段在关联表中的id 值 * 要得到完整值， 查询时字段名要包含在 include 中， * 取值时，要先判断是否为空，如果为空，取值会抛出异常， */ createdBy: item.get(&quot;createdBy&quot;) ? this.getUser(item.get(&quot;createdBy&quot;)) : &quot;&quot;, lastEditor: item.get(&quot;lastEditor&quot;) ? this.getUser(item.get(&quot;lastEditor&quot;)) : &quot;&quot;, &#125; &#125;, // 关闭对话框时，要重置相关变量 closeDialog() &#123; this.dialog = false; this.fullscreen = false; // this.$nextTick()将回调延迟到下次 DOM 更新循环之后执行 this.$nextTick(() =&gt; &#123; this.editedItem = Object.assign(&#123;&#125;, this.defaultItem); this.editedIndex = -1; &#125;); &#125;, &#125;, // 计算属性 computed: &#123; // 添加或修改对话框的标题 formTitle() &#123; return this.editedIndex === -1 ? &quot;添加新话题&quot; : &quot;话题编辑&quot;; &#125;, // 添加或修改对话框中 标题 文本框的宽度 formCols() &#123; // 添加时不用显示 Level，Title 宽度为 24 // 修改时需要显示 Level，Title 宽度为 21 return this.editedIndex === -1 ? 24 : 21; &#125;, // 多行文本框的行数 row() &#123; // 全屏状态时多行文本框 15 行，非全屏时 5行 return this.fullscreen ? 15 : 5; &#125; &#125;, // 过滤器 filters: &#123; datetimeFormat(val) &#123; // 使用 moment.js 定义日期时间过滤器函数 return moment(val).format(&quot;lll&quot;); &#125;, &#125;, // 观察属性， 函数名为变量名，当该变量值有变化时，触发函数 watch: &#123; // 监控变量 dialog, 当对话框关闭时，还原对话框相关的初始值 dialog(val) &#123; // 相当于 if 语句的简化写法 val || this.closeDialog(); &#125;, &#125;&#125;&lt;/script&gt;&lt;style&gt;.align-center &#123; align-items: center;&#125;&lt;/style&gt; 后继内容：使用 Element UI 和 Leancloud 的 Vue.js 项目开发 IX &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/categories/vue-js/"}],"tags":[{"name":"leancloud","slug":"leancloud","permalink":"https://hujiyi.github.io/tags/leancloud/"},{"name":"element ui","slug":"element-ui","permalink":"https://hujiyi.github.io/tags/element-ui/"},{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/tags/vue-js/"}]},{"title":"使用 Element UI 和 Leancloud 的 Vue.js 项目开发(七) - LeanCloud 数据存储和路由守卫的使用","slug":"element-leancloud-project-VII","date":"2021-11-20T13:10:31.000Z","updated":"2022-10-11T01:40:13.219Z","comments":true,"path":"2021/11/20/element-leancloud-project-VII/","permalink":"https://hujiyi.github.io/2021/11/20/element-leancloud-project-VII/","excerpt":"","text":"项目演示地址：https://hujiyi.github.io/acme-world-web/ LeanCloud 数据存储LeanCloud 数据存储 的两种 ClassLeanCloud 数据存储的 Class 有两种，一种是创建应用时就自带的，这一种Class的名字以 下划线开头，可以在这些 Class 中添加字段， 但一般不要删除；另一种是用户自己创建的 Class，可以由用户自定义需要的字段， 同时，自定义的每个 Class 还会有四个系统自带的字段：objectId, ACL, createdAt, updatedAt， 说明如下： objectId: 主键字段，实际使用时，可以通过 类名.id 获取值； ACL: 访问控制列表, 用于权限管理开发，免费用户不可用； createdAt: 记录创建时间，添加记录时自动产生，不能更改； updatedAt: 记录更新时间，记录有更新时自动修改，不能由用户进行修改； 在数据存储中创建 Class在数据存储中创建 Class 有两个方法： 方法一：在 LeanCloud 数据存储 的管理界面 手工 添加 Class, 然后再逐个添加字段（也可以从一个 数据存储 中导出 Class, 然后到另一个应用中导入）； 方法二：直接在程序中创建一个 JSON 格式的数据，通过 LeanStorage 数据存储 SDK 保存， LeanCloud 服务器端即可根据JSON数据格式自动添加 Class, 以及添加 Class 中没有的字段。 总的来说，我现在比较喜欢用这一种方法。 通用的数据存储服务类除了创建 LeanCloud 应用时系统自动的 Class 以外，其他用户自行添加的 Class 进行查、改、增、删 时执行的操作都是类似的，所以可以定义一个通用的数据存储服务基类，然后每个 Class 再继承这个基类，就可以实现大部分代码共用了。 在 src/api/service/ 文件夹下添加文件：base_service.js。 打开文件 src/api/service/base_service.js, 编辑其代码如下所示：import LC from &#x27;leancloud-storage&#x27;; // 导入 leancloud 数据存储模块/** * Leancloud 数据存储的基类 * 所有函数使用 async/await 实现异步操作 * 虽然有个别函数不需要使用异步，但调用时难以区分，所以就全部都加上异步了 * 调用时，函数名前面一定要加上 await， 否则得不到正确的结果 */class BaseService &#123; /** * 构造函数 * @param &#123;*&#125; table_name */ constructor(table_name) &#123; this.TABLE_NAME = table_name; &#125; /** 获取所有数据 * @param &#123;*&#125; limit 每页记录数量 * @param &#123;*&#125; skip 跳过记录数 * @param &#123;*&#125; include 关联到其他 Class 的字段名，例如: &#x27;createdBy&#x27;, &#x27;lastEditor&#x27; * @param &#123;*&#125; sort_fields 降序排列的排序字段名列表，例如：[&#x27;-level&#x27;, &#x27;-updatedAt&#x27;]， 降序的字段名前面加负号 * sort_fields 和 include 的默认值都是： []， 只包含一个字段时也要加： [] * @returns */ async fetchAll(limit = 10, skip = 0, include = [], sort_fields = []) &#123; try &#123; let query = new LC.Query(this.TABLE_NAME); if (include[0]) &#123; // 关联查询其他表 query.include(include); &#125; // 判断是否包含排序的字段名 if (sort_fields.length &gt; 0) &#123; for (let i = 0; i &lt; sort_fields.length; i++) &#123; // 多字段排序时， 第一个排序字段 和之后用的方法名不同 if (i === 0) &#123; if (this.isMinus(sort_fields[0])) &#123; // 去掉负号后的字段名降序 query.descending(sort_fields[0].substr(1)); &#125; else &#123; query.ascending(sort_fields[0]); // 升序 &#125; &#125; else &#123; // 第二个及以后的排序字段和第一个字段调用的方法不一样 if (this.isMinus(sort_fields[i])) &#123; // 去掉负号后的字段名降序 query.addDescending(sort_fields[i].substr(1)); &#125; else &#123; query.addAscending(sort_fields[i]); // 升序 &#125; &#125; &#125; &#125; let total = await query.count(); // 记录总数 // 分页查询的结果 let response = await query.limit(limit).skip(skip).find(); // 返回的查询结果由三个部分组成; return &#123; &quot;status_code&quot;: &quot;ok&quot;, // 返回结果中的状态码 &quot;totalCount&quot;: total, // 记录总数 &quot;reslut&quot;: response, // 返回的记录 &#125;; &#125; catch (e) &#123; console.log(&#x27;查询数据错误：&#x27;, e.code, e); return &#123; &quot;status_code&quot;: e.code, &quot;totalCount&quot;: 0, &quot;reslut&quot;: e, &#125;; &#125; &#125; /** * 添加数据 * @param &#123;*&#125; data 以对象形式提供的数据 * @returns 创建成功的对象 */ async create(data) &#123; try &#123; let Collection = LC.Object.extend(this.TABLE_NAME); let query = new Collection(data); let response = await query.save(); return response; &#125; catch (e) &#123; console.log(&#x27;添加数据错误：&#x27;, e.code, e); &#125; return null; &#125; /** * 修改记录 * @param &#123;*&#125; id 记录的id * @param &#123;*&#125; data 除 id 以外的其他字段组成的对象类型数据 */ async update(id, data) &#123; try &#123; let query = LC.Object.createWithoutData(this.TABLE_NAME, id); query.set(data); // 修改数据 let response = await query.save(); return response; &#125; catch (e) &#123; console.log(&#x27;修改数据错误：&#x27;, e.code, e); &#125; return null; &#125; /** * 批量修改数据 * @param &#123;*&#125; items 包含待更新值的记录数组 * @returns */ async updateBatch(items) &#123; console.log(&#x27;items:&#x27;, items); try &#123; // map遍历数组，由返回值组成一个新数组, 原数组不变 let id_list = items.map(item =&gt; &#123; return item.id &#125;); let query = new LC.Query(this.TABLE_NAME); let response = await query .containedIn(&#x27;objectId&#x27;, id_list) .find(); // map() 遍历数组，不改变原数组 let result = response.map(item =&gt; &#123; let data = items.find(it =&gt; &#123; console.log(&#x27;update batch:&#x27;, it); return it.id === item.id &#125;); // console.log(&#x27;update batch:&#x27;, data); item.set(data); return item; &#125;); return await LC.Object.saveAll(result); &#125; catch (e) &#123; console.log(&#x27;批量修改数据错误：&#x27;, e.code, e); &#125; return null; &#125; /** * 删除数据 * @param &#123;*&#125; id * @returns */ async delete(id) &#123; try &#123; let query = LC.Object.createWithoutData(this.TABLE_NAME, id); let response = await query.destroy(); return response; &#125; catch (e) &#123; console.log(&#x27;删除数据错误：&#x27;, e.code, e); &#125; return null; &#125; /** * 批量删除，先按 id 查询出所删除的数据，再调用destroyAll() 进行删除 * 其他批量操作类似 * @param &#123;*&#125; items 待删除记录的数组 * @returns */ async deleteBatch(items) &#123; try &#123; // 从要删除的记录中取出 id 值，组成一个新数组 let id_list = items.map(item =&gt; &#123; return item.id &#125;); let query = new LC.Query(this.TABLE_NAME); // 根据多个 id 组成的数组查询符合条件的记录 let response = await query .containedIn(&#x27;objectId&#x27;, id_list) .destroyAll(); console.log(&#x27;deleteBatch:&#x27;, response) return true; &#125; catch (e) &#123; console.log(&#x27;批量删除数据错误：&#x27;, e.code, e); &#125; return null; &#125; /** * 检查指定的字段值是否已经存在, 字母区分大小写 * @param &#123;*&#125; field 字段名 * @param &#123;*&#125; val 字段值 * @returns 字段值已存在，返回 true， 否则返回 false */ async existsFieldValue(field = &#x27;title&#x27;, val) &#123; try &#123; let query = new LC.Query(this.TABLE_NAME); let count = await query.equalTo(field, val).count(); console.log(count); return count &gt; 0; &#125; catch (e) &#123; console.log(&#x27;查询错误：&#x27;, e.code, e); &#125; return false; &#125; /** * 当前已登录用户 * @returns 返回当前已登录用户 */ async currentUser() &#123; return LC.User.current(); &#125; /** * 判断字符串是不是负号开头, 以便确定是升序还是降序 * @param &#123;*&#125; val * @returns 负号：true; 非负号： false */ isMinus(val) &#123; if (val[0] === &#x27;-&#x27;) &#123; return true; &#125; return false; &#125;&#125;export default BaseService; LeanCloud 数据存储的基类创建完毕等待应用。 路由守卫的使用后台管理（仪表盘）一般来说，都要求用户成功登录后才能访问，但在之前的代码中，并没有做这样的限制， 所以任何人都可以直接进入后台管理。 这里使用 vue router 的路由守卫来实现进入后台管理的权限验证 打开文件 src/router/index.js， 给后台管理的的父路由项添加路由元信息 meta: &#123; requiresAuth: true &#125;, , 同时添加相应的路由守卫。修改其如以下代码: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697import Vue from &#x27;vue&#x27;;import VueRouter from &#x27;vue-router&#x27;;Vue.use(VueRouter);const routes = [ &#123; path: &#x27;/&#x27;, name: &#x27;Home&#x27;, component: () =&gt; import(&#x27;../views/home/Index.vue&#x27;), &#125;, &#123; path: &#x27;/account&#x27;, redirect: &#x27;/login&#x27;, component: () =&gt; import(&#x27;../views/account/Index.vue&#x27;), children: [ &#123; path: &#x27;/login&#x27;, name: &#x27;Login&#x27;, component: () =&gt; import(&#x27;../views/account/pages/Login.vue&#x27;), &#125;, &#123; path: &#x27;/signup&#x27;, name: &#x27;SignUp&#x27;, component: () =&gt; import(&#x27;../views/account/pages/SignUp.vue&#x27;), &#125;, &#123; path: &#x27;/password_reset&#x27;, name: &#x27;PasswordReset&#x27;, component: () =&gt; import(&#x27;../views/account/pages/PasswordReset.vue&#x27;), &#125;, ] &#125;, &#123; path: &#x27;/dashboard&#x27;, component: () =&gt; import(&#x27;../views/dashboard/Index.vue&#x27;), // 添加路由元信息 meta: &#123; requiresAuth: true, &#125; 用于标识进入该路由必须登录 meta: &#123; requiresAuth: true &#125;, children: [ &#123; path: &#x27;&#x27;, alias: &#x27;index&#x27;, name: &#x27;Dashboard&#x27;, component: () =&gt; import(&#x27;@/views/dashboard/pages/MainIndex.vue&#x27;), &#125;, &#123; path: &#x27;topic_manager&#x27;, name: &#x27;TopicManager&#x27;, component: () =&gt; import(&#x27;@/views/dashboard/forum/TopicManager.vue&#x27;), &#125;, &#123; path: &#x27;comment_manager&#x27;, name: &#x27;CommentManager&#x27;, component: () =&gt; import(&#x27;@/views/dashboard/forum/CommentManager.vue&#x27;), &#125;, ], &#125;];const router = new VueRouter(&#123; routes&#125;);// 使用路由守卫,具体内容见官方文档：https://router.vuejs.org/zh/guide/advanced/meta.html// 特别注意事项：确保 router.beforeEach 中只有一个 next() 会被执行// 如果有多个 next() 被执行，将会出现重复路由的异常router.beforeEach((to, from, next) =&gt; &#123; let login_router = [&#x27;/account&#x27;, &#x27;/login&#x27;]; // 如果 跳转的目标 path 是登录页（看上面的路由设置 ） if (to.path in login_router) &#123; // 保存跳转到登录页之前的地址， 登录成功后跳转回该页 // 回跳功能在 登录页 &quot;src/views/account/pages/Login.vue&quot; 实现 localStorage.setItem(&quot;preRoute&quot;, router.currentRoute.fullPath); &#125; // 检查跳转的目标路由是否需要登录(包含 meta: &#123;requiresAuth: true, &#125;,) if (to.matched.some(record =&gt; record.meta.requiresAuth)) &#123; // 检查用户是否登录 if (!localStorage.getItem(&#x27;token&#x27;)) &#123; next(&#123; path: &#x27;/login&#x27;, query: &#123; redirect: to.fullPath &#125; &#125;) &#125; else &#123; next(); &#125; &#125; else &#123; next(); &#125;&#125;);export default router; 路由守卫 通过 路由元信息 判断该路由项是否需要登录后才能访问，如果需要，但当前没有已登录用户，则自动跳转到 登录界面，登录成功后，返回之前的页面（返回前一页在登录页实现，之前完成的登录页已经包含相应代码） 后继内容：使用 Element UI 和 Leancloud 的 Vue.js 项目开发 VIII &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/categories/vue-js/"}],"tags":[{"name":"leancloud","slug":"leancloud","permalink":"https://hujiyi.github.io/tags/leancloud/"},{"name":"element ui","slug":"element-ui","permalink":"https://hujiyi.github.io/tags/element-ui/"},{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/tags/vue-js/"}]},{"title":"使用 Element UI 和 Leancloud 的 Vue.js 项目开发(六) - 实现用户注册、登录、找回密码","slug":"element-leancloud-project-VI","date":"2021-11-20T08:41:31.000Z","updated":"2022-10-11T01:40:13.204Z","comments":true,"path":"2021/11/20/element-leancloud-project-VI/","permalink":"https://hujiyi.github.io/2021/11/20/element-leancloud-project-VI/","excerpt":"","text":"项目演示地址：https://hujiyi.github.io/acme-world-web/ Leancloud 数据存储LeanCloud（原 AVOS Cloud） 是针对移动应用的一站式云端服务，专注于为应用开发者提供工具和平台。提供包括LeanStorage 数据存储、LeanMessage 通信服务、LeanAnalytics 统计分析、LeanModules 拓展模块等四大类型的后端云服务。当前项目使用了LeanStorage 数据存储来实现论坛数据的保存。 Leancloud SDK 的初始化配置信息LeanCloud 国内默认的是华北节点，但是去年华北节点的文件服务器因为某些原因，出现了域名服务方面的问题。导致文件可以上传，但是没办法访问，所以这里建设使用 华东节点。 登录 Leancloud华东节点 （没有账号的请先注册），然后创建应用，应用名称自己取，操作类似下图: 应用创建成功后，点击该应用最左边的 数据存储 图标，进入应用管理界面，如下图： 在右侧菜单选择：设置 -&gt; 应用凭证, 即可看到当前应用的 AppID, AppKey, REST API服务器地址 等初始化 Leancloud SDK 所需要的信息，如下图: 请将上图中的 AppID, AppKey, REST API服务器地址 （画圈、打勾的那三个）信息复制后，粘贴到 src/api/config/lc.config.js 文件中完成初始化信息配置。 Leancloud SDK 数据存储在 Leancloud 应用管理界面选择：数据存储 -&gt; 结构化数据， 列表显示当前应用以下划线开头的内置的Class, leancloud 的每一个 Class 就相当于数据库的一个表。 名为 _User 的内置 Class 用于保存用户信息的， 除了原来的字段，我们也可以添加更多的字段如：头像、昵称等。 账号服务类在 src/api/ 文件夹下新建一个名为 service 的文件夹，并在该文件夹中添加文件：account_service.js。 打开新建的 src/api/service/account_service.js, 编辑其代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118import LC from &#x27;leancloud-storage&#x27;; // 导入 leancloud 数据存储模块/** * 账号管理的类 */class AccountService &#123; /** * 注册新用户账号 * @param &#123;*&#125; username * @param &#123;*&#125; password * @param &#123;*&#125; email * @returns 注册返回的状态码： 202: &quot;用户名已被注册&quot;, 203: &quot;邮箱已被注册&quot;, &quot;-1&quot;: &quot;无法连接到服务器&quot; * */ async signUp(username, password, email = &#x27;&#x27;) &#123; try &#123; let user = new LC.User(); user.setUsername(username); user.setPassword(password); // 添加一个 昵称 字段，默认为用户名 user.set(&#x27;nickname&#x27;, username); if (email) &#123; user.setEmail(email); &#125; let response = await user.signUp(); console.log(&#x27;注册账号成功：&#x27;, response); return &#123; &quot;status_code&quot;: &quot;ok&quot;, // 注册状态码 &quot;user&quot;: response, // 用户 &#125;; &#125; catch (e) &#123; console.log(&#x27;注册账号失败：&#x27;, e.code, e); return &#123; // 注册返回的状态码： 202: &quot;用户名已被注册&quot;, 203: &quot;邮箱已被注册&quot;, &quot;-1&quot;: &quot;无法连接到服务器&quot; &quot;status_code&quot;: e.code, // 注册状态码 &quot;user&quot;: null, // 注册失败，返回用户为 null &#125;; &#125; &#125; /** * 用户登录 * @param &#123;*&#125; username * @param &#123;*&#125; password * @returns 登录状态代码 和用户 * 200: 登录成功 * 210: 密码错误； * 211：用户不存在, * 219: 重试次数太多 * -1 : 请求被终止，一般是网络有问题 */ async logIn(username, password) &#123; try &#123; let user = await LC.User.logIn(username, password); if (user) &#123; console.log(&#x27;登录成功:&#x27;, user); return &#123; &quot;status_code&quot;: &quot;ok&quot;, // 登录状态码 &quot;user&quot;: user, // 用户 &#125;; &#125; &#125; catch (e) &#123; // e.code // 210: 密码错误； // 211：用户不存在, // -1 Error: Request has been terminated console.log(&#x27;登录失败：&#x27;, e.code, e); return &#123; &quot;status_code&quot;: e.code, &quot;user&quot;: null, &#125;; &#125; return null; &#125; /** * 退出登录 * @returns 无返回值 */ async logOut() &#123; return LC.User.logOut(); &#125; /** * 通过电子邮件重置密码 * @param &#123;*&#125; email * @returns 状态码： * &quot;200&quot;: 发送邮件成功； * &quot;1&quot;: &quot;请不要往同一个邮件地址发送太多邮件&quot;, * &quot;205&quot;: &quot;此电子邮箱没有被注册使用&quot;, * &quot;-1&quot;: &quot;请求被终止，请检查网络连接状况&quot; */ async passwordResetByEmail(email) &#123; try &#123; let response = await LC.User.requestPasswordReset(email); console.log(response.code, typeof response); return &#123; &quot;status_code&quot;: &quot;ok&quot; &#125;; &#125; catch (e) &#123; console.log(&quot;发送邮件：&quot;, e.code, e); return &#123; &quot;status_code&quot;: e.code, // 发送邮件不成功，返回错误代码 &#125; &#125; &#125; /** * 获取当前用户的 session token * @returns session token */ async getToken() &#123; return LC.User.current().getSessionToken(); &#125;&#125;export default new AccountService(); leancloud SDK 用户的相关文档请查看：https://leancloud.cn/docs/leanstorage_guide-js.html#hash954895 新用户注册功能的实现打开文件 src/views/account/pages/SignUp.vue, 编辑其代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798&lt;template&gt; &lt;el-card shadow=&quot;always&quot; class=&quot;login-module&quot;&gt; &lt;el-form&gt; &lt;div class=&quot;horiz-container form-title&quot;&gt; &lt;span&gt;注册新用户&lt;/span&gt; &lt;div class=&quot;spacer&quot;&gt;&lt;/div&gt; &lt;span&gt; &lt;router-link to=&quot;/&quot;&gt; &lt;i class=&quot;fa fa-home fa-lg&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &lt;/router-link&gt; &lt;/span&gt; &lt;/div&gt; &lt;el-form-item&gt; &lt;el-input type=&quot;text&quot; prefix-icon=&quot;fa fa-envelope-o fa-lg&quot; v-model=&quot;email&quot; placeholder=&quot;电子邮箱&quot; &gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;el-input type=&quot;text&quot; prefix-icon=&quot;fa fa-user-o fa-lg&quot; v-model=&quot;username&quot; placeholder=&quot;用户名&quot; &gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;el-input type=&quot;password&quot; prefix-icon=&quot;fa fa-lock fa-lg&quot; v-model=&quot;password&quot; placeholder=&quot;密码&quot; &gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;!-- 按钮添加单击事件调用函数创建用户 --&gt; &lt;el-button class=&quot;full-width&quot; type=&quot;primary&quot; @click=&quot;createUser&quot;&gt;注册新用户&lt;/el-button&gt; &lt;/el-form-item&gt; &lt;div class=&quot;horiz-container&quot;&gt; &lt;div class=&quot;spacer&quot;&gt;&lt;/div&gt; &lt;router-link to=&quot;/login&quot; class=&quot;link&quot;&gt; &lt;el-link :underline=&quot;false&quot; type=&quot;success&quot;&gt;使用已有账号登录&lt;/el-link&gt; &lt;/router-link&gt; &lt;/div&gt; &lt;/el-form&gt; &lt;/el-card&gt;&lt;/template&gt;&lt;script&gt;// 导入账号服务类import AccountService from &quot;../../../api/service/account_service&quot;;export default &#123; name: &quot;SignUp&quot;, // 组件名称 data: () =&gt; (&#123; username: &quot;&quot;, // 用于输入用户名 password: &quot;&quot;, // 用于输入密码 email: &quot;&quot;, // 用于输入邮箱 &#125;), methods: &#123; // 调用 AccountService 中的异步方法时，函数前要加上 async async createUser() &#123; // 注册函数返回值为 包含 状态码 和 用户 两个部分内容的对象 let response = await AccountService.signUp(this.username, this.password, this.email); if (response.status_code == &quot;ok&quot;) &#123; // 调用异步方法不能缺少 await，不然等不到正确结果 let token = await AccountService.getToken(); localStorage.setItem(&quot;token&quot;, token); // 保存当前用户的 session token localStorage.setItem(&quot;currentUser&quot;, this.username); // 保存当前的用户名 this.$router.push(&quot;/dashboard&quot;); // 跳转到后台管理） &#125; else &#123; let errorMsg = &#123; &quot;125&quot;: &quot;无效的电子邮件地址&quot;, &quot;202&quot;: &quot;此用户名已被注册&quot;, &quot;203&quot;: &quot;此电子邮箱已经被占用&quot;, &quot;-1&quot;: &quot;请求被终止，请检查网络连接状况&quot;, &#125;; // 使用 Notification 通知 显示注册失败的提示信息 this.$notify.error(&#123; title: &#x27;注册失败&#x27;, // 标题 message: errorMsg[response.status_code], // 取出对应的消息内容 // offset: 100, // 偏移量，消息距屏幕边缘偏移一段距离 showClose: false, // 不显示关闭按钮，只能等自动关闭 &#125;); &#125; &#125; &#125;,&#125;;&lt;/script&gt;&lt;style&gt;.login-module &#123; width: 380px;&#125;&lt;/style&gt; 在项目结果的网页中点击链接到注册新用户的界面, 输入新用户的电子邮箱，用户名和密码, 如下图所示(为方便看到可能出现的错误或异常信息，请按 F12 打开浏览器的Web开发者工具， 请切换到 控制台(Console)选项卡)： 点击 注册新用户 按钮， 注册成功后，浏览器跳转到后台管理界面, 如下图所示： 注册失败时，或上角显示 注册失败 的提示，同时浏览器的控制台输出相应的异常信息， 如下图所示： 注册成功后，在 leancloud 的应用管理后台 刷新 后可以看到 _User 已经添多了一条记录 实现登录功能打开文件 src/views/account/pages/Login.vue, 编辑内容如以下代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141&lt;template&gt; &lt;el-card shadow=&quot;always&quot; class=&quot;login-module&quot;&gt; &lt;el-form&gt; &lt;div class=&quot;horiz-container form-title&quot;&gt; &lt;span&gt;用户登录&lt;/span&gt; &lt;div class=&quot;spacer&quot;&gt;&lt;/div&gt; &lt;span&gt; &lt;router-link to=&quot;/&quot;&gt; &lt;i class=&quot;fa fa-home fa-lg&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &lt;/router-link&gt; &lt;/span&gt; &lt;/div&gt; &lt;el-form-item&gt; &lt;el-input type=&quot;text&quot; prefix-icon=&quot;fa fa-user-o fa-lg&quot; v-model=&quot;username&quot; placeholder=&quot;用户名&quot; &gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;el-input type=&quot;password&quot; prefix-icon=&quot;fa fa-lock fa-lg&quot; v-model=&quot;password&quot; placeholder=&quot;密码&quot; &gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;!-- 登录按钮单击事件调用 login 函数 --&gt; &lt;el-button class=&quot;full-width&quot; type=&quot;primary&quot; @click=&quot;login&quot;&gt;登录&lt;/el-button&gt; &lt;/el-form-item&gt; &lt;div class=&quot;horiz-container&quot;&gt; &lt;div class=&quot;spacer&quot;&gt;&lt;/div&gt; &lt;router-link to=&quot;/password_reset&quot; class=&quot;mx-2&quot;&gt; &lt;el-link :underline=&quot;false&quot; type=&quot;warning&quot;&gt;忘记密码&lt;/el-link&gt; &lt;/router-link&gt; &lt;router-link to=&quot;/signup&quot; class=&quot;mx-2&quot;&gt; &lt;el-link :underline=&quot;false&quot; type=&quot;danger&quot;&gt;没有账号&lt;/el-link&gt; &lt;/router-link&gt; &lt;/div&gt; &lt;/el-form&gt; &lt;/el-card&gt;&lt;/template&gt;&lt;script&gt;// 导入账号服务类import AccountService from &quot;../../../api/service/account_service&quot;;import &#123; Loading &#125; from &quot;element-ui&quot;; // 导入 Loading加载export default &#123; name: &quot;Login&quot;, data: () =&gt; (&#123; username: &quot;zhangsan&quot;, // 用于输入用户名 password: &quot;123456&quot;, // 用于输入密码 loading: &#x27;&#x27;, // 用于显示 Loading 加载 的变量 &#125;), methods: &#123; async login() &#123; this.showLoading(&#x27;#login&#x27;, &#x27;正在登录中...&#x27;); // 在选择器名为 # login 的元素上显示 loading // 登录函数返回 包含 状态码 和 用户 两个信息的对象， 状态码为 字符类型 的 数字字符 let response = await AccountService.logIn(this.username, this.password); // 为了进行登录失败的提示，只能通过 typeof currentUser 来 判断登录是否成功 if (response.status_code == &quot;ok&quot;) &#123; // 读取进入登录页的前一页地址 const curr = localStorage.getItem(&quot;preRoute&quot;); let token = await AccountService.getToken(); localStorage.setItem(&quot;token&quot;, token); // 保存当前用户的 session token localStorage.setItem(&quot;currentUser&quot;, this.username); // 保存当前的用户名 console.log(&#x27;response.user:&#x27;, response.user); if (curr === null || curr === &#x27;/&#x27; || curr === &#x27;/account&#x27; || curr === &quot;/login&quot;) &#123; this.$router.push(&#123; path: &quot;/dashboard&quot; &#125;); &#125; else &#123; // 跳转到进入登录页之前的页面 this.$router.push(&#123; path: curr &#125;); &#125; &#125; else &#123; let errorMsg = &#123; &quot;210&quot;: &quot;用户名和密码不匹配&quot;, &quot;211&quot;: &quot;找不到用户&quot;, &quot;219&quot;:&#x27;登录失败次数超过限制，请稍候再试，或者重设密码&#x27;, &quot;-1&quot;: &quot;请求被终止，请检查网络连接状况&quot;, &#125;; // 使用 Notification 通知 显示登录失败的的提示信息 this.$notify.error(&#123; title: &#x27;登录失败&#x27;, // 标题 message: errorMsg[response.status_code], // 消息内容 // offset: 100, // 偏移量，消息距屏幕边缘偏移一段距离 showClose: false, // 不显示关闭按钮，只能等自动关闭 &#125;); &#125; // 结束显示 loading this.endLoading(); &#125;, /** * 自定义用于局部区域显示 loading 的函数 * 局部区域显示 loading 的步骤： * 1、import &#123; Loading &#125; from &quot;element-ui&quot;; // 导入 Loading加载 * 2、在 data 定义控制变量： loading:false, * 3、定义函数：showLoading(targetNode, message) 和 endLoading() * 4、调用第 3 步定义的两个函数 * @param &#123;*&#125; targetNode 目标区域的选择器，建设使用 id 选择器 * @returns */ showLoading(targetNode, message) &#123; this.loading = Loading.service(&#123; // 锁定屏幕的滚动 lock: true, // 显示的文本 text: message, // document.querySelector 用于以获取到对应 DOM 节点 target: document.querySelector(targetNode), &#125;); &#125;, // 停止显示 loading endLoading() &#123; this.loading.close(); &#125;, // 获取用户数据中的用户名和邮箱两个信息 getUser(user) &#123; return &#123; id: user.id, username: user.get(&quot;username&quot;), email: user.get(&quot;email&quot;), &#125;; &#125;, &#125;&#125;;&lt;/script&gt;&lt;style&gt;.login-module &#123; width: 380px;&#125;&lt;/style&gt; 浏览器进入到登录页面，输入 用户名 和 密码 登录, 登录不成功，显示相应的错误提示，效果如下图： 登录成功，则进入后台管理 或是自动跳转到登录界面的前一页。 实现通过邮箱找回密码打开文件 src/views/account/pages/PasswordReset.vue, 编辑其内容如下代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899&lt;template&gt; &lt;el-card shadow=&quot;always&quot; class=&quot;login-module&quot;&gt; &lt;el-form&gt; &lt;div class=&quot;horiz-container form-title&quot;&gt; &lt;span&gt;通过邮箱找回密码&lt;/span&gt; &lt;div class=&quot;spacer&quot;&gt;&lt;/div&gt; &lt;span&gt; &lt;router-link to=&quot;/&quot;&gt; &lt;i class=&quot;fa fa-home fa-lg&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &lt;/router-link&gt; &lt;/span&gt; &lt;/div&gt; &lt;!-- 添加发送重置邮件成功后显示的内容 --&gt; &lt;div v-if=&quot;sendEmailSuccess&quot;&gt; &lt;el-alert :title=&quot;`请登录 $&#123;this.email&#125; 邮箱进行密码重置`&quot; type=&quot;success&quot; effect=&quot;dark&quot; center show-icon :closable=&quot;false&quot; &gt;&lt;/el-alert&gt; &lt;/div&gt; &lt;!-- 原来的表单项添加一个 &lt;div v-else&gt; &lt;/div&gt; 包裹起来 --&gt; &lt;div v-else&gt; &lt;el-form-item&gt; &lt;el-input type=&quot;text&quot; prefix-icon=&quot;fa fa-envelope-o fa-lg&quot; v-model=&quot;email&quot; placeholder=&quot;电子邮箱&quot; &gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;!-- 按钮单击事件添加调用 passwordReset 函数 --&gt; &lt;el-button class=&quot;full-width&quot; type=&quot;primary&quot; @click=&quot;passwordReset&quot;&gt;发送找回密码的邮件&lt;/el-button&gt; &lt;/el-form-item&gt; &lt;div class=&quot;horiz-container&quot;&gt; &lt;div class=&quot;spacer&quot;&gt;&lt;/div&gt; &lt;router-link to=&quot;/login&quot; class=&quot;link&quot;&gt; &lt;el-link :underline=&quot;false&quot; type=&quot;success&quot;&gt;使用已有账号登录&lt;/el-link&gt; &lt;/router-link&gt; &lt;router-link to=&quot;/signup&quot; class=&quot;mx-2&quot;&gt; &lt;el-link :underline=&quot;false&quot; type=&quot;danger&quot;&gt;没有账号&lt;/el-link&gt; &lt;/router-link&gt; &lt;/div&gt; &lt;/div&gt; &lt;/el-form&gt; &lt;/el-card&gt;&lt;/template&gt;&lt;script&gt;import AccountService from &quot;../../../api/service/account_service&quot;;export default &#123; name: &quot;PasswordReset&quot;, // 组件名称 data: () =&gt; (&#123; email: &quot;&quot;, // 用于输入邮箱 sendEmailSuccess: false, &#125;), methods: &#123; async passwordReset() &#123; let email = this.email.trim(); // 发送重置密码邮件后，返回值为 字符类型的状态码 let response = await AccountService.passwordResetByEmail(email); if (response.status_code == &quot;ok&quot;) &#123; this.sendEmailSuccess = true; // 显示发送成功的提示信息 this.$notify.success(&#123; title: &#x27;发送重置密码邮件成功&#x27;, // 标题 message: &quot;请查看邮件，以便完成密码重置&quot;, // 消息内容 // offset: 100, // 偏移量，消息距屏幕边缘偏移一段距离 showClose: false, // 不显示关闭按钮，只能等自动关闭 &#125;); &#125; else &#123; let errorMsg = &#123; &quot;1&quot;: &quot;请不要往同一个邮件地址发送太多邮件&quot;, &quot;205&quot;: &quot;此电子邮箱没有被注册使用&quot;, &quot;-1&quot;: &quot;请求被终止，请检查网络连接状况&quot; &#125;; // 使用 Notification 通知 显示操作失败的的提示信息 this.$notify.error(&#123; title: &#x27;密码重置失败&#x27;, // 标题 message: errorMsg[response.status_code], // 消息内容 // offset: 100, // 偏移量，消息距屏幕边缘偏移一段距离 showClose: false, // 不显示关闭按钮，只能等自动关闭 &#125;); &#125; &#125; &#125;&#125;;&lt;/script&gt;&lt;style&gt;.login-module &#123; width: 380px;&#125;&lt;/style&gt; 浏览器进入到找回密码的界面，填写用户注册时的电子邮箱， 邮箱填写错误，显示相应的提示信息： 填写正确的电子邮箱，发送重置密码邮件，登录到自己的邮箱，即可重置密码： 在后台管理界面显示当前登录用户及注销打开文件 src/views/dashboard/layout/Header.vue, 编辑其内容如以下代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;template&gt; &lt;div class=&quot;lay-header horiz-container&quot;&gt; &lt;router-link to=&quot;/&quot;&gt; &lt;el-button type=&quot;text&quot;&gt;首页&lt;/el-button&gt; &lt;/router-link&gt; &lt;div class=&quot;spacer&quot;&gt;&lt;/div&gt; &lt;el-link :underline=&quot;false&quot; type=&quot;success&quot; class=&quot;mx-2&quot;&gt; &lt;i class=&quot;fa fa-bell fa-lg&quot;&gt;&lt;/i&gt; 消息 &lt;/el-link&gt; &lt;el-link :underline=&quot;false&quot; type=&quot;danger&quot; class=&quot;mx-2&quot;&gt; &lt;i class=&quot;fa fa-envelope fa-lg&quot;&gt;&lt;/i&gt; 邮件 &lt;/el-link&gt; &lt;!-- 从状态栏读取当前已登录用户的信息，并显示用户名 --&gt; &lt;el-link :underline=&quot;false&quot; type=&quot;primary&quot; class=&quot;mx-2&quot; v-if=&quot;currentUser&quot; &gt;当前用户： &#123;&#123; currentUser &#125;&#125;&lt;/el-link&gt; &lt;!-- 添加注销功能 --&gt; &lt;el-link :underline=&quot;false&quot; type=&quot;danger&quot; class=&quot;mx-2&quot; @click=&quot;logout&quot;&gt;注销&lt;/el-link&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import AccountService from &quot;../../../api/service/account_service.js&quot;export default &#123; name: &#x27;LayoutHeader&#x27;, methods: &#123; // 用户注销 async logout() &#123; console.log(&quot;logout&quot;); await AccountService.logOut(); if (this.$route.path != &quot;/&quot;) &#123; localStorage.removeItem(&quot;preRoute&quot;); // 删除已保存的前一页地址 localStorage.removeItem(&quot;token&quot;); // 删除已保存的用户 token this.$router.push(&quot;/&quot;); &#125; &#125;, &#125;, computed: &#123; // 获取当前登录的用户名 currentUser() &#123; if (localStorage.getItem(&#x27;token&#x27;)) &#123; return localStorage.getItem(&#x27;currentUser&#x27;) &#125; &#125;, &#125;&#125;&lt;/script&gt;&lt;style&gt;.lay-header &#123; height: 60px; align-items: center;&#125;&lt;/style&gt; 登录成功后，后台管理页面的右上角显示 当前用户名，并实现用户的注销， 效果如下图所示： 后继内容：使用 Element UI 和 Leancloud 的 Vue.js 项目开发 VII &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/categories/vue-js/"}],"tags":[{"name":"leancloud","slug":"leancloud","permalink":"https://hujiyi.github.io/tags/leancloud/"},{"name":"element ui","slug":"element-ui","permalink":"https://hujiyi.github.io/tags/element-ui/"},{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/tags/vue-js/"}]},{"title":"使用 Element UI 和 Leancloud 的 Vue.js 项目开发(五) - 后台管理界面","slug":"element-leancloud-project-V","date":"2021-11-20T04:54:25.000Z","updated":"2022-10-11T01:40:13.204Z","comments":true,"path":"2021/11/20/element-leancloud-project-V/","permalink":"https://hujiyi.github.io/2021/11/20/element-leancloud-project-V/","excerpt":"","text":"项目演示地址：https://hujiyi.github.io/acme-world-web/ 文件与路由规划相对于其他两大部分来说，后台管理界面的组成更复杂，包含的组件、视图也更多。 为了更方便进行管理， 将相应的文件分别放到不同的文件夹下。就当前项目来说，主要实现一个论坛的后台管理功能，所以在 dashboard 文件夹中分别创建三个文件夹用于存放不同的文件： layout 文件夹： 用于存放后台管理界面（仪表盘）的组成组件； forum 文件夹：用于存放和论坛管理有关的视图； pages 文件夹： 用于存放仪表盘其他部分的视图； 如果有更多的内容，也可以建相应的文件夹进行分类存放 创建文件夹和文件根据以上规划，在 dashboard 文件夹 分别 创建名为：layout 、forum 、pages 的文件夹。 在 src/views/dashboard/forum/ 文件夹下添加以下两个文件： TopicManager.vue: 论坛话题管理视图； CommentManager.vue: 话题评论管理视图。 在 src/views/dashboard/layout/ 文件夹下添加以下三个文件： Aside.vue: 侧边栏组件； Header.vue: 顶部栏组件； MenuTree.vue: 无限嵌套菜单组件. 在 src/views/dashboard/pages 文件夹中添加以下一个文件： MainIndex.vue: 仪表盘首页视图。 文件夹和文件添加完毕后，src/views 文件夹内的结构如下图所示： 12345678910111213141516171819|-- account| |-- pages| | |-- Login.vue| | |-- PasswordReset.vue| | `-- SignUp.vue| `-- Index.vue|-- dashboard| |-- forum| | |-- CommentManager.vue| | `-- TopicManager.vue| |-- layout| | |-- Aside.vue| | |-- Header.vue| | `-- MenuTree.vue| |-- pages| | `-- MainIndex.vue| `-- Index.vue`-- home `-- Index.vue 添加路由打开路由配置文件 src/router/index.js， 在原 path: &#39;/dashboard&#39; 的路由项添加相应的子路由，修改后内容如以下代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071import Vue from &#x27;vue&#x27;;import VueRouter from &#x27;vue-router&#x27;;Vue.use(VueRouter);const routes = [ &#123; path: &#x27;/&#x27;, name: &#x27;Home&#x27;, component: () =&gt; import(&#x27;../views/home/Index.vue&#x27;), &#125;, &#123; path: &#x27;/account&#x27;, redirect: &#x27;/login&#x27;, // 路由重定向, 跳转至其默认子路由 // name: &#x27;Account&#x27;, // 包含子路由时，父路由不需要 name, 此处注释掉 // 父路由组件内必须有一个 &lt;router-view /&gt; 用于响应、显示匹配的子路由组件 component: () =&gt; import(&#x27;../views/account/Index.vue&#x27;), children: [ &#123; // 子路由的 path 以 / 开头，表示绝对路径，父path 在子路由中不起作用 path: &#x27;/login&#x27;, // 实际路径：/login name: &#x27;Login&#x27;, // 命名路由 component: () =&gt; import(&#x27;../views/account/pages/Login.vue&#x27;), &#125;, &#123; path: &#x27;/signup&#x27;, // 实际路径：/signup name: &#x27;SignUp&#x27;, component: () =&gt; import(&#x27;../views/account/pages/SignUp.vue&#x27;), &#125;, &#123; path: &#x27;/password_reset&#x27;, // 实际路径：/password_reset name: &#x27;PasswordReset&#x27;, component: () =&gt; import(&#x27;../views/account/pages/PasswordReset.vue&#x27;), &#125;, ] &#125;, &#123; // 后台管理部分 path: &#x27;/dashboard&#x27;, // name: &#x27;Dashboard&#x27;, // 包含子路由时，不需要 name 项 // 父路由组件内必须有一个 &lt;router-view /&gt; 用于响应、显示匹配的子路由组件 component: () =&gt; import(&#x27;../views/dashboard/Index.vue&#x27;), children: [ &#123; // 子路由的 path 不是以 / 开头时，实际路径为 父path 与 子path 的组合 path: &#x27;&#x27;, // 实际路径为: /dashboard alias: &#x27;index&#x27;, // 别名，相当于第二个 path, 实际路径为: /dashboard/index name: &#x27;Dashboard&#x27;, // 父路由没有 name 项，此处使用父路由原来的 name component: () =&gt; import(&#x27;@/views/dashboard/pages/MainIndex.vue&#x27;), &#125;, &#123; path: &#x27;topic_manager&#x27;, // 实际路径为: /dashboard/topic_manager name: &#x27;TopicManager&#x27;, component: () =&gt; import(&#x27;@/views/dashboard/forum/TopicManager.vue&#x27;), &#125;, &#123; path: &#x27;comment_manager&#x27;, // 实际路径为: /dashboard/comment_manager name: &#x27;CommentManager&#x27;, component: () =&gt; import(&#x27;@/views/dashboard/forum/CommentManager.vue&#x27;), &#125;, ], &#125;];const router = new VueRouter(&#123; routes&#125;);export default router; 后台管理界面的整体布局打开文件 src/views/dashboard/Index.vue ， 编辑其内容如以下代码： 1234567891011121314151617181920212223242526272829&lt;template&gt; &lt;el-container&gt; &lt;el-aside width=&quot;240px&quot;&gt;Aside&lt;/el-aside&gt; &lt;el-container&gt; &lt;el-header&gt;Header&lt;/el-header&gt; &lt;el-main&gt;Main&lt;/el-main&gt; &lt;/el-container&gt; &lt;/el-container&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &#x27;Dashboard&#x27;,&#125;&lt;/script&gt;&lt;style&gt;.el-container &#123; height: 100vh;&#125;.el-header &#123; background-color: #b3c0d1; color: #333;&#125;.el-main &#123; background-color: #e9eef3; color: #333;&#125;&lt;/style&gt; 在运行结果的首页点击 链接跳转至 后台管理, 显示结果如下图所示： 顶栏的实现打开文件 src/views/dashboard/layout/Header.vue, 编辑其内容如以下代码： 12345678910111213141516171819202122232425262728&lt;template&gt; &lt;div class=&quot;lay-header horiz-container&quot;&gt; &lt;router-link to=&quot;/&quot;&gt; &lt;el-button type=&quot;text&quot;&gt;首页&lt;/el-button&gt; &lt;/router-link&gt; &lt;div class=&quot;spacer&quot;&gt;&lt;/div&gt; &lt;el-link :underline=&quot;false&quot; type=&quot;success&quot; class=&quot;mx-2&quot;&gt; &lt;i class=&quot;fa fa-bell fa-lg&quot;&gt;&lt;/i&gt; 消息 &lt;/el-link&gt; &lt;el-link :underline=&quot;false&quot; type=&quot;danger&quot; class=&quot;mx-2&quot;&gt; &lt;i class=&quot;fa fa-envelope fa-lg&quot;&gt;&lt;/i&gt; 邮件 &lt;/el-link&gt; &lt;el-link :underline=&quot;false&quot; type=&quot;primary&quot; class=&quot;mx-2&quot;&gt;当前用户：张三&lt;/el-link&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &#x27;LayoutHeader&#x27;,&#125;&lt;/script&gt;&lt;style&gt;.lay-header &#123; height: 60px; align-items: center;&#125;&lt;/style&gt; 打开文件 src/views/dashboard/Index.vue ， 添加对顶部栏组件LayoutHeader引用，修改后内容如以下代码： 12345678910111213141516171819202122232425262728293031323334353637&lt;template&gt; &lt;el-container&gt; &lt;el-aside width=&quot;240px&quot;&gt;Aside&lt;/el-aside&gt; &lt;el-container&gt; &lt;el-header&gt; &lt;!-- 使用组件，组件名可以改为 短横线命名的格式 --&gt; &lt;layout-header&gt;&lt;/layout-header&gt; &lt;/el-header&gt; &lt;el-main&gt;Main&lt;/el-main&gt; &lt;/el-container&gt; &lt;/el-container&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &#x27;Dashboard&#x27;, // 引用的组件 components:&#123; // 导入并注册顶部栏组件 LayoutHeader LayoutHeader:()=&gt;import(&#x27;./layout/Header.vue&#x27;), &#125;&#125;&lt;/script&gt;&lt;style&gt;.el-container &#123; height: 100vh;&#125;.el-header &#123; background-color: #b3c0d1; color: #333;&#125;.el-main &#123; background-color: #e9eef3; color: #333;&#125;&lt;/style&gt; 项目运行效果如下图所示： 侧边栏的实现后台管理的侧边栏一般显示仪表盘的控制菜单，菜单项可以通过 json 数据来生成。 准备生成菜单项的 json 数据在 assets 文件夹下新建 json 文件夹，再创建文件： menuItems.json。 打开新建的文件 src/assets/json/menuItems.json， 复制以下内容粘贴到该文件中： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192&#123; &quot;menuItems&quot;: [ &#123; &quot;id&quot;: 0, &quot;title&quot;: &quot;仪表盘&quot;, &quot;icon&quot;: &quot;fa fa-tachometer fa-lg&quot;, &quot;chip&quot;: &quot;new&quot;, &quot;link&quot;: &quot;/dashboard&quot; &#125;, &#123; &quot;id&quot;: 1, &quot;title&quot;: &quot;评论管理&quot;, &quot;icon&quot;: &quot;fa fa-commenting-o fa-lg&quot;, &quot;chip&quot;: &quot;6&quot;, &quot;link&quot;: &quot;/dashboard&quot; &#125;, &#123; &quot;id&quot;: 2, &quot;title&quot;: &quot;图片管理&quot;, &quot;icon&quot;: &quot;fa fa-image fa-lg&quot;, &quot;chip&quot;: &quot;new&quot;, &quot;link&quot;: &quot;/dashboard&quot; &#125;, &#123; &quot;id&quot;: 4, &quot;title&quot;: &quot;论坛管理&quot;, &quot;icon&quot;: &quot;fa fa-newspaper-o fa-lg&quot;, &quot;chip&quot;: &quot;new&quot;, &quot;link&quot;: &quot;/dashboard&quot;, &quot;children&quot;: [ &#123; &quot;id&quot;: 42, &quot;title&quot;: &quot;话题管理&quot;, &quot;icon&quot;: &quot;fa fa-pencil-square-o fa-lg&quot;, &quot;chip&quot;: &quot;new&quot;, &quot;link&quot;: &quot;/dashboard/topic_manager&quot; &#125;, &#123; &quot;id&quot;: 43, &quot;title&quot;: &quot;评论管理&quot;, &quot;icon&quot;: &quot;fa fa-commenting-o fa-lg&quot;, &quot;chip&quot;: &quot;new&quot;, &quot;link&quot;: &quot;/dashboard/comment_manager&quot; &#125; ] &#125;, &#123; &quot;id&quot;: 7, &quot;title&quot;: &quot;权限管理&quot;, &quot;icon&quot;: &quot;fa fa-user-secret fa-lg&quot;, &quot;chip&quot;: &quot;new&quot;, &quot;link&quot;: &quot;/dashboard&quot;, &quot;children&quot;: [ &#123; &quot;id&quot;: 8, &quot;title&quot;: &quot;角色管理&quot;, &quot;icon&quot;: &quot;fa fa-id-card-o fa-lg&quot;, &quot;chip&quot;: &quot;new&quot;, &quot;link&quot;: &quot;/dashboard&quot; &#125;, &#123; &quot;id&quot;: 9, &quot;title&quot;: &quot;用户管理&quot;, &quot;icon&quot;: &quot;fa fa-users fa-lg&quot;, &quot;chip&quot;: &quot;new&quot;, &quot;link&quot;: &quot;/dashboard&quot; &#125; ] &#125;, &#123; &quot;id&quot;: 10, &quot;title&quot;: &quot;仪表盘&quot;, &quot;icon&quot;: &quot;el-icon-odometer&quot;, &quot;chip&quot;: &quot;new&quot;, &quot;link&quot;: &quot;/dashboard&quot; &#125;, &#123; &quot;id&quot;: 11, &quot;title&quot;: &quot;仪表盘&quot;, &quot;icon&quot;: &quot;el-icon-odometer&quot;, &quot;chip&quot;: &quot;new&quot;, &quot;link&quot;: &quot;/dashboard&quot; &#125;, &#123; &quot;id&quot;: 12, &quot;title&quot;: &quot;仪表盘&quot;, &quot;icon&quot;: &quot;el-icon-odometer&quot;, &quot;chip&quot;: &quot;new&quot;, &quot;link&quot;: &quot;/dashboard&quot; &#125; ]&#125; 说明：还没有实际跳转目标的项，&quot;link&quot; 的值都是 &quot;/dashboard&quot;， 这么写是为了防止跳转到不存在的视图导致错误。如有添加其他后台管理功能，请自行修改就可以了。 创建无限菜单组件侧边栏的菜单可以包含有子菜单项，如果想实现子菜单项的嵌套， 就需要通过一个组件来实现。 打开文件 src/views/dashboard/layout/MenuTree.vue， 编辑其内容如以下代码： 123456789101112131415161718192021222324252627&lt;template&gt; &lt;div&gt; &lt;template v-for=&quot;item in menuData&quot;&gt; &lt;el-menu-item v-if=&quot;!item.children&quot; :key=&quot;item.id&quot; :index=&quot;item.link&quot;&gt; &lt;i :class=&quot;item.icon&quot;&gt;&lt;/i&gt; &#123;&#123; item.title &#125;&#125; &lt;el-badge :value=&quot;item.chip&quot; :max=&quot;99&quot; class=&quot;badge-item&quot;&gt;&lt;/el-badge&gt; &lt;/el-menu-item&gt; &lt;el-submenu v-else-if=&quot;item.children.length &gt; 0&quot; :key=&quot;&#x27;s&#x27; + item.id&quot;&gt; &lt;template slot=&quot;title&quot;&gt; &lt;i :class=&quot;item.icon&quot;&gt;&lt;/i&gt; &lt;span slot=&quot;title&quot;&gt;&#123;&#123; item.title &#125;&#125;&lt;/span&gt; &lt;/template&gt; &lt;!-- 递归生成下一级子菜单 --&gt; &lt;menu-tree menuData=&quot;item.children&quot;&gt;&lt;/menu-tree&gt; &lt;/el-submenu&gt; &lt;/template&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;MenuTree&quot;, props: [&quot;menuData&quot;], &#125;&lt;/script&gt; 编辑侧边栏组件打开文件 src\\views\\dashboard\\layout\\Aside.vue, 编辑其内容如以下代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;template&gt; &lt;div&gt; &lt;div class=&quot;dashboard-logo&quot;&gt; &lt;p&gt;Admin&lt;/p&gt; &lt;/div&gt; &lt;el-menu :router=&quot;true&quot;&gt; &lt;template v-for=&quot;(item, index) in menu.menuItems&quot;&gt; &lt;el-menu-item v-if=&quot;!item.children&quot; :key=&quot;index&quot; :index=&quot;item.link&quot;&gt; &lt;i :class=&quot;item.icon&quot;&gt;&lt;/i&gt; &#123;&#123; item.title &#125;&#125; &lt;el-badge :value=&quot;item.chip&quot; :max=&quot;99&quot; class=&quot;badge-item&quot;&gt;&lt;/el-badge&gt; &lt;/el-menu-item&gt; &lt;el-submenu v-else-if=&quot;item.children.length &gt; 0&quot; :key=&quot;&#x27;k&#x27; + item.id&quot; :index=&quot;item.link&quot; &gt; &lt;template slot=&quot;title&quot;&gt; &lt;i :class=&quot;item.icon&quot;&gt;&lt;/i&gt; &lt;span slot=&quot;title&quot;&gt;&#123;&#123; item.title &#125;&#125;&lt;/span&gt; &lt;/template&gt; &lt;!-- 子菜单组件 --&gt; &lt;menu-tree :menuData=&quot;item.children&quot;&gt;&lt;/menu-tree&gt; &lt;/el-submenu&gt; &lt;/template&gt; &lt;/el-menu&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;// 导入生成左侧菜单列表的 json 文件import menu from &#x27;@/assets/json/menuItems.json&#x27;;export default &#123; name: &#x27;LayoutAside&#x27;, components: &#123; MenuTree: () =&gt; import(&#x27;./MenuTree.vue&#x27;), &#125;, data: () =&gt; (&#123; menu, // 导入的json 数据 作为变量 &#125;),&#125;&lt;/script&gt;&lt;style&gt;.dashboard-logo &#123; text-align: center; font-size: 28px; font-weight: 600; &#125;&lt;/style&gt; 使用侧边栏组件, 打开文件 src/views/dashboard/Index.vue ， 编辑其内容如以下代码： 12345678910111213141516171819202122232425262728293031323334353637383940&lt;template&gt; &lt;el-container&gt; &lt;el-aside width=&quot;240px&quot;&gt; &lt;!-- 使用侧边栏组件 --&gt; &lt;layout-aside&gt;&lt;/layout-aside&gt; &lt;/el-aside&gt; &lt;el-container&gt; &lt;el-header&gt; &lt;layout-header&gt;&lt;/layout-header&gt; &lt;/el-header&gt; &lt;el-main&gt;Main&lt;/el-main&gt; &lt;/el-container&gt; &lt;/el-container&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &#x27;Dashboard&#x27;, // 引用的组件 components: &#123; LayoutHeader: () =&gt; import(&#x27;./layout/Header.vue&#x27;), // 导入侧边栏组件 LayoutAside LayoutAside: () =&gt; import(&#x27;./layout/Aside.vue&#x27;), &#125;&#125;&lt;/script&gt;&lt;style&gt;.el-container &#123; height: 100vh;&#125;.el-header &#123; background-color: #b3c0d1; color: #333;&#125;.el-main &#123; background-color: #e9eef3; color: #333;&#125;&lt;/style&gt; 项目运行效果如下图所示： 菜单匹配的子路由视图打开文件 src/views/dashboard/pages/MainIndex.vue， 编辑其内容如以下代码： 123456789101112&lt;template&gt; &lt;div&gt;仪表盘首页正在建设中&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &#x27;MainIndex&#x27;,&#125;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 打开文件 src/views/dashboard/forum/TopicManager.vue， 编辑其内容如以下代码： 123456789101112&lt;template&gt; &lt;div&gt;话题管理&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &#x27;TopicManager&#x27;,&#125;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 打开文件 src/views/dashboard/forum/CommentManager.vue， 编辑其内容如以下代码： 123456789101112&lt;template&gt; &lt;div&gt;评论管理&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &#x27;CommentManager&#x27;,&#125;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 在父组件中显示匹配的子路由视图打开文件 src/views/dashboard/Index.vue, 在 &lt;el-main&gt;&lt;/el-main&gt; 标签中添加 用于显示匹配的子路由的视图， 修改后的代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940&lt;template&gt; &lt;el-container&gt; &lt;el-aside width=&quot;240px&quot;&gt; &lt;layout-aside&gt;&lt;/layout-aside&gt; &lt;/el-aside&gt; &lt;el-container&gt; &lt;el-header&gt; &lt;layout-header&gt;&lt;/layout-header&gt; &lt;/el-header&gt; &lt;el-main&gt; &lt;!-- 用于响应匹配的子路由视图 --&gt; &lt;router-view /&gt; &lt;/el-main&gt; &lt;/el-container&gt; &lt;/el-container&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &#x27;Dashboard&#x27;, components: &#123; LayoutHeader: () =&gt; import(&#x27;./layout/Header.vue&#x27;), LayoutAside: () =&gt; import(&#x27;./layout/Aside.vue&#x27;), &#125;&#125;&lt;/script&gt;&lt;style&gt;.el-container &#123; height: 100vh;&#125;.el-header &#123; background-color: #b3c0d1; color: #333;&#125;.el-main &#123; background-color: #e9eef3; color: #333;&#125;&lt;/style&gt; 修改完毕，项目运行效果如下图： 后继内容：使用 Element UI 和 Leancloud 的 Vue.js 项目开发 VI &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/categories/vue-js/"}],"tags":[{"name":"leancloud","slug":"leancloud","permalink":"https://hujiyi.github.io/tags/leancloud/"},{"name":"element ui","slug":"element-ui","permalink":"https://hujiyi.github.io/tags/element-ui/"},{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/tags/vue-js/"}]},{"title":"使用 Element UI 和 Leancloud 的 Vue.js 项目开发(四) - 登录与注册界面设计","slug":"element-leancloud-project-IV","date":"2021-11-18T11:12:37.000Z","updated":"2022-10-11T01:40:13.204Z","comments":true,"path":"2021/11/18/element-leancloud-project-IV/","permalink":"https://hujiyi.github.io/2021/11/18/element-leancloud-project-IV/","excerpt":"","text":"项目演示地址：https://hujiyi.github.io/acme-world-web/ 账号模块的路由规划在当前项目中， 账号模块实现三个部分的功能：用户登录、用户注册、通过邮箱找回密码， 这三个部分都放在 src/views/account/ 文件夹下。 创建文件夹和文件在 src/views/account/ 下创建名为 pages 的文件夹，然后在该文件下添加三个 vue文件：Login.vue, PasswordReset.vue, SignUp.vue。 创建完成后的 views 文件夹下的项目结构如下图： 12345678910|-- account| |-- pages| | |-- Login.vue| | |-- PasswordReset.vue| | `-- SignUp.vue| `-- Index.vue|-- dashboard| `-- Index.vue`-- home `-- Index.vue 编辑src/views/account/pages/Login.vue, 内容如以下代码： 123456789101112&lt;template&gt; &lt;div&gt;用户登录&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &#x27;Login&#x27;,&#125;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 编辑src/views/account/pages/PasswordReset.vue, 内容如以下代码： 123456789101112&lt;template&gt; &lt;div&gt;通过邮箱找回密码&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &#x27;PaswordReset&#x27;,&#125;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 编辑src/views/account/pages/SignUp.vue, 内容如以下代码： 123456789101112&lt;template&gt; &lt;div&gt;注册新用户&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &#x27;SignUp&#x27;,&#125;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 路由设计打开 src/router/index.js， 给 name: &#39;Account&#39; 的路由项添加子路由，编辑后的代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import Vue from &#x27;vue&#x27;;import VueRouter from &#x27;vue-router&#x27;;Vue.use(VueRouter);const routes = [ &#123; path: &#x27;/&#x27;, name: &#x27;Home&#x27;, component: () =&gt; import(&#x27;../views/home/Index.vue&#x27;), &#125;, &#123; path: &#x27;/account&#x27;, redirect: &#x27;/login&#x27;, // 路由重定向, 跳转至其默认子路由 // name: &#x27;Account&#x27;, // 包含子路由时，父路由不需要 name, 此处注释掉 // 父路由组件内必须有一个 &lt;router-view /&gt; 用于响应、显示匹配的子路由组件 component: () =&gt; import(&#x27;../views/account/Index.vue&#x27;), children: [ &#123; // 子路由的 path 以 / 开头，表示绝对路径，父path 在子路由中不起作用 path: &#x27;/login&#x27;, // 实际路径：/login name: &#x27;Login&#x27;, // 命名路由 component: () =&gt; import(&#x27;../views/account/pages/Login.vue&#x27;), &#125;, &#123; path: &#x27;/signup&#x27;, // 实际路径：/signup name: &#x27;SignUp&#x27;, component: () =&gt; import(&#x27;../views/account/pages/SignUp.vue&#x27;), &#125;, &#123; path: &#x27;/password_reset&#x27;, // 实际路径：/password_reset name: &#x27;PasswordReset&#x27;, component: () =&gt; import(&#x27;../views/account/pages/PasswordReset.vue&#x27;), &#125;, ] &#125;, &#123; path: &#x27;/dashboard&#x27;, name: &#x27;Dashboard&#x27;, component: () =&gt; import(&#x27;../views/dashboard/Index.vue&#x27;), &#125;];const router = new VueRouter(&#123; routes&#125;);export default router; 整体布局打开 src/views/account/Index.vue, 编辑其内容如以下代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;template&gt; &lt;el-row&gt; &lt;el-col :md=&quot;12&quot; class=&quot;hidden-sm-and-down&quot;&gt; &lt;div class=&quot;grid-content bg-dark&quot;&gt; &lt;span class=&quot;login-title&quot;&gt;Element Forum Admin&lt;/span&gt; &lt;/div&gt; &lt;/el-col&gt; &lt;el-col :md=&quot;12&quot; :sm=&quot;24&quot;&gt; &lt;div class=&quot;grid-content bg-light&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/el-col&gt; &lt;/el-row&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;Account&quot;,&#125;;&lt;/script&gt;&lt;style&gt;/* 水平及垂直居中 */.grid-content &#123; height: 100vh; /* 使用弹性布局 */ display: flex; /* 主轴居中 */ justify-content: center; /* 交叉轴居中 */ align-items: center;&#125;/* 深色背景，有不重复的背景图片 */.bg-dark &#123; background: #091d3b; /* 请自行修改为自己的图片url */ background-image: url(&quot;../../assets/login-pattern-left.png&quot;); background-repeat: no-repeat; background-position: -30% 60%;&#125;/* 浅色背景 */.bg-light &#123; background: #e5e9f2;&#125;/* 左侧窗格的标题文字 */.login-title &#123; color: white; font-size: 36px; font-weight: 600;&#125;&lt;/style&gt; 项目运行，进入登录页后的效果如下图： 说明: 这里使用了响应式设计，当窗口比较大时，可以看到页面分别 左右两个部分； 当把页面的宽度缩小，或是用手机等小尺寸设备打开网页时，左半部分将会被隐藏，效果如下图： 登录页的设计打开 src/views/account/pages/Login.vue, 编辑其如以下代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;template&gt; &lt;el-card shadow=&quot;always&quot; class=&quot;login-module&quot;&gt; &lt;el-form&gt; &lt;!-- form-title 样式在父组件中定义 --&gt; &lt;div class=&quot;horiz-container form-title&quot;&gt; &lt;span&gt;用户登录&lt;/span&gt; &lt;div class=&quot;spacer&quot;&gt;&lt;/div&gt; &lt;span&gt; &lt;router-link to=&quot;/&quot;&gt; &lt;i class=&quot;fa fa-home fa-lg&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &lt;/router-link&gt; &lt;/span&gt; &lt;/div&gt; &lt;el-form-item&gt; &lt;el-input type=&quot;text&quot; prefix-icon=&quot;fa fa-user-o fa-lg&quot; v-model=&quot;username&quot; placeholder=&quot;用户名&quot; &gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;el-input type=&quot;password&quot; prefix-icon=&quot;fa fa-lock fa-lg&quot; v-model=&quot;password&quot; placeholder=&quot;密码&quot; &gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;!-- full-width 样式在父组件中定义 --&gt; &lt;el-button class=&quot;full-width&quot; type=&quot;primary&quot;&gt;登录&lt;/el-button&gt; &lt;/el-form-item&gt; &lt;div class=&quot;horiz-container&quot;&gt; &lt;div class=&quot;spacer&quot;&gt;&lt;/div&gt; &lt;router-link to=&quot;/password_reset&quot; class=&quot;mx-2&quot;&gt; &lt;el-link :underline=&quot;false&quot; type=&quot;warning&quot;&gt;忘记密码&lt;/el-link&gt; &lt;/router-link&gt; &lt;router-link to=&quot;/signup&quot; class=&quot;mx-2&quot;&gt; &lt;el-link :underline=&quot;false&quot; type=&quot;danger&quot;&gt;没有账号&lt;/el-link&gt; &lt;/router-link&gt; &lt;/div&gt; &lt;/el-form&gt; &lt;/el-card&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;Login&quot;, data: () =&gt; (&#123; username: &quot;&quot;, // 用于输入用户名 password: &quot;&quot;, // 用于输入密码 &#125;),&#125;;&lt;/script&gt;&lt;style&gt;.login-module &#123; width: 380px;&#125;&lt;/style&gt; 以上代码中， 有两个样式：form-title 与 full-width 在 注册新用户 和 通过邮箱找回密码 界面中也要使用，为了减少重复代码，改为在父组件 src/views/account/Index.vue 中进行定义，这样就可以实现三个界面使用相同的样式了。 在父组件中添加各个子组件共用的样式编辑 src/views/account/Index.vue， 在其 &lt;style&gt;&lt;/style&gt; 小节中添加 样式form-title 与 full-width 的定义，代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&lt;template&gt; &lt;el-row&gt; &lt;el-col :md=&quot;12&quot; class=&quot;hidden-sm-and-down&quot;&gt; &lt;div class=&quot;grid-content bg-dark&quot;&gt; &lt;span class=&quot;login-title&quot;&gt;Element Forum Admin&lt;/span&gt; &lt;/div&gt; &lt;/el-col&gt; &lt;el-col :md=&quot;12&quot; :sm=&quot;24&quot;&gt; &lt;div class=&quot;grid-content bg-light&quot;&gt; &lt;router-view /&gt; &lt;/div&gt; &lt;/el-col&gt; &lt;/el-row&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;Account&quot;,&#125;;&lt;/script&gt;&lt;style&gt;/* 水平及垂直居中 */.grid-content &#123; height: 100vh; /* 使用弹性布局 */ display: flex; /* 主轴居中 */ justify-content: center; /* 交叉轴居中 */ align-items: center;&#125;/* 深色背景，有不重复的背景图片 */.bg-dark &#123; background: #091d3b; /* 请自行修改为自己的图片url */ background-image: url(&quot;../../assets/login-pattern-left.png&quot;); background-repeat: no-repeat; background-position: -30% 60%;&#125;/* 浅色背景 */.bg-light &#123; background: #e5e9f2;&#125;/* 左侧窗格的标题文字 */.login-title &#123; color: white; font-size: 36px; font-weight: 600;&#125;/* 以下为子组件共用的样式 */.form-title &#123; font-size: 18px; font-weight: 400; height: 60px;&#125;.full-width &#123; width: 100%;&#125;&lt;/style&gt; 用户登录的界面效果如下图: 注册新用户将 src/views/account/pages/Login.vue 的内容全部复制, 粘贴到 src/views/account/pages/SignUp.vue 中替换原来的内容, 然后做以下的修改: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&lt;template&gt; &lt;el-card shadow=&quot;always&quot; class=&quot;login-module&quot;&gt; &lt;el-form&gt; &lt;!-- form-title 样式在父组件中定义 --&gt; &lt;div class=&quot;horiz-container form-title&quot;&gt; &lt;!-- 修改窗口标题文字 --&gt; &lt;span&gt;注册新用户&lt;/span&gt; &lt;div class=&quot;spacer&quot;&gt;&lt;/div&gt; &lt;span&gt; &lt;router-link to=&quot;/&quot;&gt; &lt;i class=&quot;fa fa-home fa-lg&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &lt;/router-link&gt; &lt;/span&gt; &lt;/div&gt; &lt;!-- 添加用于输入电子邮箱的表单项 --&gt; &lt;el-form-item&gt; &lt;el-input type=&quot;text&quot; prefix-icon=&quot;fa fa-envelope-o fa-lg&quot; v-model=&quot;email&quot; placeholder=&quot;电子邮箱&quot; &gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;el-input type=&quot;text&quot; prefix-icon=&quot;fa fa-user-o fa-lg&quot; v-model=&quot;username&quot; placeholder=&quot;用户名&quot; &gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;el-input type=&quot;password&quot; prefix-icon=&quot;fa fa-lock fa-lg&quot; v-model=&quot;password&quot; placeholder=&quot;密码&quot; &gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;!-- 修改按钮提示文字 --&gt; &lt;el-button class=&quot;full-width&quot; type=&quot;primary&quot;&gt;注册新用户&lt;/el-button&gt; &lt;/el-form-item&gt; &lt;div class=&quot;horiz-container&quot;&gt; &lt;div class=&quot;spacer&quot;&gt;&lt;/div&gt; &lt;!-- 保留一个 router-link, 并修改提示文字, 跳转路径和颜色 --&gt; &lt;router-link to=&quot;/login&quot; class=&quot;link&quot;&gt; &lt;el-link :underline=&quot;false&quot; type=&quot;success&quot;&gt;使用已有账号登录&lt;/el-link&gt; &lt;/router-link&gt; &lt;/div&gt; &lt;/el-form&gt; &lt;/el-card&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;SignUp&quot;, // 组件名称 data: () =&gt; (&#123; username: &quot;&quot;, // 用于输入用户名 password: &quot;&quot;, // 用于输入密码 email: &quot;&quot;, // 用于输入邮箱 &#125;),&#125;;&lt;/script&gt;&lt;style&gt;.login-module &#123; width: 380px;&#125;&lt;/style&gt; 注册新用户的界面效果如下图: 通过邮箱找回密码将 src/views/account/pages/SignUp.vue 的内容全部复制, 粘贴到 src/views/account/pages/PaswordReset.vue 中替换原来的内容, 然后做以下的修改: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;template&gt; &lt;el-card shadow=&quot;always&quot; class=&quot;login-module&quot;&gt; &lt;el-form&gt; &lt;!-- form-title 样式在父组件中定义 --&gt; &lt;div class=&quot;horiz-container form-title&quot;&gt; &lt;!-- 修改窗口标题文字 --&gt; &lt;span&gt;通过邮箱找回密码&lt;/span&gt; &lt;div class=&quot;spacer&quot;&gt;&lt;/div&gt; &lt;span&gt; &lt;router-link to=&quot;/&quot;&gt; &lt;i class=&quot;fa fa-home fa-lg&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &lt;/router-link&gt; &lt;/span&gt; &lt;/div&gt; &lt;!-- 只保留用于输入电子邮箱的表单项 --&gt; &lt;el-form-item&gt; &lt;el-input type=&quot;text&quot; prefix-icon=&quot;fa fa-envelope-o fa-lg&quot; v-model=&quot;email&quot; placeholder=&quot;电子邮箱&quot; &gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;!-- 修改按钮提示文字 --&gt; &lt;el-button class=&quot;full-width&quot; type=&quot;primary&quot;&gt;发送找回密码的邮件&lt;/el-button&gt; &lt;/el-form-item&gt; &lt;div class=&quot;horiz-container&quot;&gt; &lt;div class=&quot;spacer&quot;&gt;&lt;/div&gt; &lt;router-link to=&quot;/login&quot; class=&quot;link&quot;&gt; &lt;el-link :underline=&quot;false&quot; type=&quot;success&quot;&gt;使用已有账号登录&lt;/el-link&gt; &lt;/router-link&gt; &lt;!-- 加一个注册新用户的跳转 --&gt; &lt;router-link to=&quot;/signup&quot; class=&quot;mx-2&quot;&gt; &lt;el-link :underline=&quot;false&quot; type=&quot;danger&quot;&gt;没有账号&lt;/el-link&gt; &lt;/router-link&gt; &lt;/div&gt; &lt;/el-form&gt; &lt;/el-card&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;PasswordReset&quot;, // 组件名称 data: () =&gt; (&#123; email: &quot;&quot;, // 用于输入邮箱 &#125;),&#125;;&lt;/script&gt;&lt;style&gt;.login-module &#123; width: 380px;&#125;&lt;/style&gt; 通过邮箱找回密码的界面效果如下图: 后继内容：使用 Element UI 和 Leancloud 的 Vue.js 项目开发 V &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/categories/vue-js/"}],"tags":[{"name":"leancloud","slug":"leancloud","permalink":"https://hujiyi.github.io/tags/leancloud/"},{"name":"element ui","slug":"element-ui","permalink":"https://hujiyi.github.io/tags/element-ui/"},{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/tags/vue-js/"}]},{"title":"使用 Element UI 和 Leancloud 的 Vue.js 项目开发(三) - 首页初步设计","slug":"element-leancloud-project-III","date":"2021-11-17T13:56:19.000Z","updated":"2022-10-11T01:40:13.204Z","comments":true,"path":"2021/11/17/element-leancloud-project-III/","permalink":"https://hujiyi.github.io/2021/11/17/element-leancloud-project-III/","excerpt":"","text":"项目演示地址：https://hujiyi.github.io/acme-world-web/ 首页初步设计对于一个论坛网站来说，用户登录、进入后台管理界面后发表话题， 首页才有内容可以显示。但是为了不让首页太难看、同时提供到过其他视图的跳转，需要先对首页进行一些简单的设计。 修改首页的 template打开 src/views/home/Index.vue ， 编辑其内容如以下代码： 123456789101112131415161718192021222324&lt;template&gt; &lt;el-container&gt; &lt;el-header&gt; &lt;div class=&quot;logo&quot;&gt;Acme World APP&lt;/div&gt; &lt;router-link to=&quot;/dashboard&quot;&gt; &lt;el-button type=&quot;text&quot;&gt;后台管理&lt;/el-button&gt; &lt;/router-link&gt; &lt;router-link to=&quot;/login&quot;&gt; &lt;el-button type=&quot;text&quot;&gt;登录&lt;/el-button&gt; &lt;/router-link&gt; &lt;/el-header&gt; &lt;el-main&gt;网站的内容正在建设中，敬请期待&lt;/el-main&gt; &lt;/el-container&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &#x27;Home&#x27;,&#125;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 编辑完毕并保存文件，运行结果如下图所示： 添加样式上图显示的内容，由于没有样式，所以显示的效果并不太好。Element UI 的组件默认会生成一个同名的 class， 所以可以直接给组件添加样式，继续编辑 src/views/home/Index.vue ，其内容如以下代码： 12345678910111213141516171819202122232425262728293031323334353637&lt;template&gt; &lt;el-container&gt; &lt;el-header&gt; &lt;div class=&quot;logo&quot;&gt;Acme World APP&lt;/div&gt; &lt;router-link to=&quot;/dashboard&quot;&gt; &lt;el-button type=&quot;text&quot;&gt;后台管理&lt;/el-button&gt; &lt;/router-link&gt; &lt;router-link to=&quot;/login&quot;&gt; &lt;el-button type=&quot;text&quot;&gt;登录&lt;/el-button&gt; &lt;/router-link&gt; &lt;/el-header&gt; &lt;el-main&gt;网站的内容正在建设中，敬请期待&lt;/el-main&gt; &lt;/el-container&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &#x27;Home&#x27;,&#125;&lt;/script&gt;&lt;style&gt;.el-container &#123; /* 让最外层组件占满整个可见的高度 */ height: 100vh;&#125;.el-header &#123; background-color: #b3c0d1; color: #333; line-height: 60px;&#125;.el-main &#123; background-color: #e9eef3; color: #333;&#125;&lt;/style&gt; 保存文件后，运行结果显示如下图： 使用全局样式从上面的运行结果来看，网页的主体内容和浏览器之间有一个边距存在，另外跳转到 后台管理 和 登录 的两个链接也看不见了, 这些问题都可以通过添加样式来解决。 因为希望某些样式可以在多个组件间重复地使用，所以这里就把一些会在多个组件都出现的样式以全局样式的方式来进行组织。 创建样式文件在 assets 文件夹下新建文件夹： css 接下来在该文件夹下新建文件：style.css 打开新建的样式文件： src/assets/css/style.css， 编辑其内容如以下代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124body &#123; margin: 0; padding: 0;&#125;/* * spacer 与 horiz-container 或 vertical-container 配合， * 实现水平或垂直方向将后继元素挤到最后 */.horiz-container &#123; /* 使用弹性布局 */ display: flex; /* 主轴方向: 从左到右 */ flex-flow: row; width: 100%;&#125;.vertical-container &#123; /* 使用弹性布局 */ display: flex; /* 主轴方向: 从上到下 */ flex-flow: column; width: 100vh;&#125;.spacer &#123; /* 在弹性布局中占去所有剩余空间，实现将后继元素挤到末尾 */ flex: 1;&#125;/* 通用外边距样式，值 为 m 后面的数字乘以 4 */.m-1 &#123; margin: 4px;&#125;.m-2 &#123; margin: 8px;&#125;.m-3 &#123; margin: 12px;&#125;.m-4 &#123; margin: 16px;&#125;.m-5 &#123; margin: 20px;&#125;/* m：margin; x: 水平方向，即：left 和 right */.mx-1 &#123; margin-left: 4px; margin-right: 4px;&#125;.mx-2 &#123; margin-left: 8px; margin-right: 8px;&#125;.mx-3 &#123; margin-left: 12px; margin-right: 12px;&#125;.mx-4 &#123; margin-left: 16px; margin-right: 16px;&#125;.mx-5 &#123; margin-left: 20px; margin-right: 20px;&#125;/* m：margin; y: 垂直方向，即：top 和 bottom */.my-1 &#123; margin-top: 4px; margin-bottom: 4px;&#125;.my-2 &#123; margin-top: 8px; margin-bottom: 8px;&#125;.my-3 &#123; margin-top: 12px; margin-bottom: 12px;&#125;.my-4 &#123; margin-top: 16px; margin-bottom: 16px;&#125;.my-5 &#123; margin-top: 20px; margin-bottom: 20px;&#125;/* 通用内边距样式，值 为 p 后面的数字乘以 4 */.p-1 &#123; padding: 4px;&#125;.p-2 &#123; padding: 8px;&#125;.p-3 &#123; padding: 12px;&#125;.p-4 &#123; padding: 16px;&#125;.p-5 &#123; padding: 20px;&#125; 打开文件 src/main.js, 编辑其内容如以下代码: 123456789101112131415161718192021import Vue from &#x27;vue&#x27;;import App from &#x27;./App.vue&#x27;;import router from &#x27;./router&#x27;;import store from &#x27;./store&#x27;;import ElementUI from &#x27;element-ui&#x27;; import &#x27;element-ui/lib/theme-chalk/index.css&#x27;; import &#x27;element-ui/lib/theme-chalk/display.css&#x27;; import &#x27;./assets/font-awesome-4.7.0/css/font-awesome.min.css&#x27;; import &#x27;./assets/css/style.css&#x27;; // 引入全局样式文件Vue.use(ElementUI); require(&#x27;./api/init.js&#x27;); Vue.config.productionTip = false;new Vue(&#123; router, store, render: h =&gt; h(App)&#125;).$mount(&#x27;#app&#x27;); 保存文件后，运行结果显示，网页主体和浏览器的边距已经消失： 继续编辑src/views/home/Index.vue, 修改其代码如以下所示： 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;template&gt; &lt;el-container&gt; &lt;!-- 添加样式 --&gt; &lt;el-header class=&quot;horiz-container&quot;&gt; &lt;div class=&quot;logo&quot;&gt;Acme World APP&lt;/div&gt; &lt;!-- 添加空 div 及样式 --&gt; &lt;div class=&quot;spacer&quot;&gt;&lt;/div&gt; &lt;!-- 添加样式 --&gt; &lt;router-link to=&quot;/dashboard&quot; class=&quot;m-2&quot;&gt; &lt;el-button type=&quot;text&quot;&gt;后台管理&lt;/el-button&gt; &lt;/router-link&gt; &lt;!-- 添加样式 --&gt; &lt;router-link to=&quot;/login&quot; class=&quot;m-2&quot;&gt; &lt;el-button type=&quot;text&quot;&gt;登录&lt;/el-button&gt; &lt;/router-link&gt; &lt;/el-header&gt; &lt;el-main&gt;网站的内容正在建设中，敬请期待&lt;/el-main&gt; &lt;/el-container&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &#x27;Home&#x27;,&#125;&lt;/script&gt;&lt;style&gt;.el-container &#123; /* 让最外层组件占满整个可见的高度 */ height: 100vh;&#125;.el-header &#123; background-color: #b3c0d1; color: #333; height: 60px; /* 交叉轴对齐方式：居中 */ align-items: center; &#125;.el-main &#123; background-color: #e9eef3; color: #333;&#125;&lt;/style&gt; 保存文件后，运行效果如下图所示： 后继内容：使用 Element UI 和 Leancloud 的 Vue.js 项目开发 IV &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/categories/vue-js/"}],"tags":[{"name":"leancloud","slug":"leancloud","permalink":"https://hujiyi.github.io/tags/leancloud/"},{"name":"element ui","slug":"element-ui","permalink":"https://hujiyi.github.io/tags/element-ui/"},{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/tags/vue-js/"}]},{"title":"在 Butterfly 主题的页脚养鱼","slug":"footer-fish","date":"2021-11-17T04:03:13.000Z","updated":"2024-11-17T04:42:38.908Z","comments":true,"path":"2021/11/17/footer-fish/","permalink":"https://hujiyi.github.io/2021/11/17/footer-fish/","excerpt":"","text":"准备工作首先必须引入需要的 jquery 文件，网址为 https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js 再引入必要的鱼儿游动的 js 文件，网址为: https://cdn.jsdelivr.net/gh/xiabo2/CDN@latest/fishes.js 将以上两个文件下载并保存到 Hexo 博客项目的 themes/butterfly/source/js/ 文件夹中。 打开 themes/butterfly/source/js/fishes.js 文件，找到以下代码: 123$(&quot;body&quot;).append( &#x27;&lt;script src=&quot;https://cdn.jsdelivr.net/gh/xiabo2/CDN@latest/fish.js&quot;&gt;&lt;/script&gt;&#x27;), 将 https://cdn.jsdelivr.net/gh/xiabo2/CDN@latest/fish.js 文件下载并保存到 themes/butterfly/source/js/ 文件夹中。 将上述代码注释, 改成在配置文件中引入相应的 js 文件。修改后的代码如下： 1234567891011121314151617181920fish();function fish() &#123; return ( $(&quot;#footer-wrap&quot;).css(&#123; position: &quot;absolute&quot;, &quot;text-align&quot;: &quot;center&quot;, top: 0, right: 0, left: 0, bottom: 0, &#125;), $(&quot;footer&quot;).append( &#x27;&lt;div class=&quot;container&quot; id=&quot;jsi-flying-fish-container&quot;&gt;&lt;/div&gt;&#x27; ), // $(&quot;body&quot;).append( // &#x27;&lt;script src=&quot;https://cdn.jsdelivr.net/gh/xiabo2/CDN@latest/fish.js&quot;&gt;&lt;/script&gt;&#x27; // ), this ); &#125; 编辑主题配置文件打开 _config.butterfly.yml , 找到 # Inject, 在 bottom 添加以上三个 js 文件的引用即可(cdn.jsdelivr.net目前在国内使用很不稳定, 改成本地文件夹使用更好). 123456789101112# Inject# Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)# 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前inject: head: # - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt; bottom: - &lt;script src=&quot;/js/jquery.min.js&quot;&gt;&lt;/script&gt; # - &lt;script src=&quot;https://cdn.jsdelivr.net/gh/xiabo2/CDN@latest/fishes.js&quot;&gt;&lt;/script&gt; - &lt;script src=&quot;/js/fishes.js&quot;&gt;&lt;/script&gt; - &lt;script src=&quot;/js/fish.js&quot;&gt;&lt;/script&gt; 参考：https://weilining.github.io/204.html &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hujiyi.github.io/categories/Hexo/"}],"tags":[{"name":"butterfly","slug":"butterfly","permalink":"https://hujiyi.github.io/tags/butterfly/"},{"name":"fish","slug":"fish","permalink":"https://hujiyi.github.io/tags/fish/"}]},{"title":"使用 Element UI 和 Leancloud 的 Vue.js 项目开发(二) - 路由规划","slug":"element-leancloud-project-II","date":"2021-11-17T02:26:58.000Z","updated":"2022-10-11T01:40:13.188Z","comments":true,"path":"2021/11/17/element-leancloud-project-II/","permalink":"https://hujiyi.github.io/2021/11/17/element-leancloud-project-II/","excerpt":"","text":"项目演示地址：https://hujiyi.github.io/acme-world-web/ 路由规划与实现本项目实现的是一个论坛网站，网站划分为三个部分: 前台用户界面：主要是论坛的主题；主题的详细内容及评论； 帐号管理界面：主要是注册、登录等功能； 后台管理界面：主要是主题的管理；评论内容的管理等功能； 创建对应的文件夹及文件分别创建以下三个文件夹： src/views/home：用于存放前台用户界面的文件 ； src/views/account：存放用户帐号相关的文件； src/views/dashboard：存放后台管理界面的文件； 分别在以上三个文件夹各添加一个 Index.vue 文件，用于该模块的页面布局。 删除原有的两个视图文件： src/views/About.vue 和 src/views/Home.vue; 创建和删除完毕后的项目 views 文件夹下的文件结构如下图所示： 1234567└-- views |-- account | └-- Index.vue |-- dashboard | └-- Index.vue └-- home └-- Index.vue 编辑三个文件打开 src/views/account/Index.vue， 编辑其内容如以下代码： 12345678910111213&lt;template&gt; &lt;div&gt;账号管理&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &#x27;Account&#x27;,&#125;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 打开 src/views/dashboard/Index.vue， 编辑其内容如以下代码： 12345678910111213&lt;template&gt; &lt;div&gt;后台管理&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &#x27;Dashboard&#x27;,&#125;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 打开 src/views/home/Index.vue， 编辑其内容如以下代码： 12345678910111213&lt;template&gt; &lt;div&gt;网站首页&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &#x27;Home&#x27;,&#125;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 修改路由文件打开文件：src/router/index.js， 编辑其内容如以下代码： 1234567891011121314151617181920212223242526272829import Vue from &#x27;vue&#x27;;import VueRouter from &#x27;vue-router&#x27;;Vue.use(VueRouter);const routes = [ &#123; path: &#x27;/&#x27;, name: &#x27;Home&#x27;, component: () =&gt; import(&#x27;../views/home/Index.vue&#x27;), &#125;, &#123; path: &#x27;/account&#x27;, name: &#x27;Account&#x27;, component: () =&gt; import(&#x27;../views/account/Index.vue&#x27;), &#125;, &#123; path: &#x27;/dashboard&#x27;, name: &#x27;Dashboard&#x27;, component: () =&gt; import(&#x27;../views/dashboard/Index.vue&#x27;), &#125;];const router = new VueRouter(&#123; routes&#125;);export default router; 编辑 App.vue打开文件： src/App.vue， 编辑其内容如以下代码： 1234567891011&lt;template&gt; &lt;div id=&quot;app&quot;&gt; &lt;router-view /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &#x27;App&#x27;,&#125;&lt;/script&gt; App.vue 里面的 &lt;router-view /&gt; 是路由的最顶层的出口，渲染最高级路由匹配到的组件。 运行测试在控制台输入命令： yarn serve 123456789101112131415PS D:\\sources\\vue_repos\\acme-world-app&gt; yarn serveyarn run v1.22.5$ vue-cli-service serve INFO Starting development server...98% after emitting CopyPlugin DONE Compiled successfully in 6415ms 下午9:33:19 App running at: - Local: http://localhost:8080/ - Network: http://192.168.3.52:8080/ Note that the development build is not optimized. To create a production build, run yarn build. 在浏览器输入地址： http://localhost:8080/， 因为当前创建项目时路由选择了 Hash 模式，地址会自动变成：http://localhost:8080/#/ , 显示效果如下图： 根据 src/router/index.js 中定义的路由，输入地址：http://localhost:8080/#/account, 显示效果如下图： 根据 src/router/index.js 中定义的路由，输入地址：http://localhost:8080/#/dashboard, 显示效果如下图： 后继内容：使用 Element UI 和 Leancloud 的 Vue.js 项目开发 III &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/categories/vue-js/"}],"tags":[{"name":"leancloud","slug":"leancloud","permalink":"https://hujiyi.github.io/tags/leancloud/"},{"name":"element ui","slug":"element-ui","permalink":"https://hujiyi.github.io/tags/element-ui/"},{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/tags/vue-js/"}]},{"title":"使用 Element UI 和 Leancloud 的 Vue.js 项目开发(一) - 创建项目","slug":"element-leancloud-project-I","date":"2021-11-16T01:54:55.000Z","updated":"2022-10-11T01:40:13.188Z","comments":true,"path":"2021/11/16/element-leancloud-project-I/","permalink":"https://hujiyi.github.io/2021/11/16/element-leancloud-project-I/","excerpt":"","text":"项目演示地址：https://hujiyi.github.io/acme-world-web/ 前提条件在创建项目前需要先安装下列应用程序 node.js yarn (可选) @vue&#x2F;cli Visual Studio Code (包含安装相应的扩展) Git (可选) 创建项目包管理工具 npm 和 yarn npm 和 yarn 都是包管理工具， npm 是node.js自带的，yarn 需要额外安装。在使用一段时间之后，我现在比较喜欢使用 yarn, 至于优点，网上列出来的主要有这么几个：速度快、安装版本统一、输出信息更简洁等等。 所以在下面的操作过程中，基本上就按照自己的习惯使用yarn 来完成，如果自己不习惯这个命令的话，也可以自行使用相应的 npm 命令来操作。只要得到的结果一样就可以了。 Vue.js 2.x 和 Vue.js 3.x 的选择 Vue.js 3.x 的正式版发布已经有一段时间了，而且和 Vue.js 2.x 相比变化非常大，这就导致了现在很多和 Vue.js配套的库，特别是和 UI 有关的库大部分都还没有来得及未完成新版本的适配。虽然以后肯定是会升级到 Vue.js 3.x，但就目前阶段来说，继续使用 Vue.js 2.x 来开发项目不失为目前比较好的选择。 使用 @vue&#x2F;cli 创建项目打开 Powershell窗口首先，我在自己的电脑建了一个专门的文件夹 D:\\sources\\vue_repos 用来存放 Vue.js 项目。按住Shift键，然后在该文件夹空白处点鼠标右键，在弹出的快捷菜单中选择 在此处打开Powershell窗口(s)。（打开CMD窗口中完成以下命令也是一样的） 提示: 如果电脑已经安装 Git, 也可以在右键菜单中选择 Git Bash Here, 在 Git Bash 命令窗口下执行命令. 创建项目在 Powershell窗口 中输入命令：vue create acme-world-app acme-world-app 为项目名称，请把它 替换 为你自己的项目名。 在 Please pick a preset(请选择一个预设) 中选择 Manually select features(手动选择项目): 12345Vue CLI v4.5.15? Please pick a preset: Default ([Vue 2] babel, eslint) Default (Vue 3) ([Vue 3] babel, eslint)&gt; Manually select features 在 Check the features needed for your project(检查项目所需的功能) 中选择以下几项： Choose Vue version Babel Router Vuex 12345678910111213Vue CLI v4.5.15? Please pick a preset: Manually select features? Check the features needed for your project: (*) Choose Vue version (*) Babel ( ) TypeScript ( ) Progressive Web App (PWA) Support (*) Router (*) Vuex ( ) CSS Pre-processors&gt;( ) Linter / Formatter ( ) Unit Testing ( ) E2E Testing 取消原来默认选中的 Linter / Formatter(当然你已经会使用这一项就选上，不知道这一项是做什么的，最好不要选) 在 Choose a version of Vue.js that you want to start the project with (Use arrow keys)(选择项目的 Vue.js 版本) 选择 2.x 123456Vue CLI v4.5.15? Please pick a preset: Manually select features? Check the features needed for your project: Choose Vue version, Babel, Router, Vuex? Choose a version of Vue.js that you want to start the project with (Use arrow keys)&gt; 2.x 3.x 在 Use history mode for router?(路由使用history模式) 中回答 n，不使用 history模式 。 history模式 : 网址的中间不显示 # 号, 但需要服务器端支持. 如果项目最后需要部署到 Github Pages 或 Gitee Pages, 则不要使用 history模式; hash模式: 网址的中间显示 #, 例如: http://localhost:8080/#/ 12345Vue CLI v4.5.15? Please pick a preset: Manually select features? Check the features needed for your project: Choose Vue version, Babel, Router, Vuex? Choose a version of Vue.js that you want to start the project with 2.x? Use history mode for router? (Requires proper server setup for index fallback in production) (Y/n) n 在Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys) (选择Babel, ESLint 等等第三方包的配置文件) 中选择 In dedicated config files(在专用的配置文件中) 12345678Vue CLI v4.5.15? Please pick a preset: Manually select features? Check the features needed for your project: Choose Vue version, Babel, Router, Vuex? Choose a version of Vue.js that you want to start the project with 2.x? Use history mode for router? (Requires proper server setup for index fallback in production) No? Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys)&gt; In dedicated config files In package.json 在Save this as a preset for future projects? (保存刚才的选择到项目预设) 中回答 n。 1234567Vue CLI v4.5.15? Please pick a preset: Manually select features? Check the features needed for your project: Choose Vue version, Babel, Router, Vuex? Choose a version of Vue.js that you want to start the project with 2.x? Use history mode for router? (Requires proper server setup for index fallback in production) No? Where do you prefer placing config for Babel, ESLint, etc.? In dedicated config files? Save this as a preset for future projects? (y/N) 以后建项目的时候如果确定回答和上面的完全一样的，也可以回答y，把刚才的选择项都存为一个预设，以后可以使用该预设完成项目的创建。 对于初学者来说，多做几次才能熟悉操作，所以建议不存预设，给自己一个练习的机会。 完成了创建项目的所有选项，创建项目的过程显示如以下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556PS D:\\sources\\vue_repos&gt; vue create acme-world-appVue CLI v4.5.15? Please pick a preset: Manually select features? Check the features needed for your project: Choose Vue version, Babel, Router, Vuex? Choose a version of Vue.js that you want to start the project with 2.x? Use history mode for router? (Requires proper server setup for index fallback in production) No? Where do you prefer placing config for Babel, ESLint, etc.? In dedicated config files? Save this as a preset for future projects? NoVue CLI v4.5.15✨ Creating project in D:\\sources\\vue_repos\\acme-world-app.🗃 Initializing git repository...⚙️ Installing CLI plugins. This might take a while...yarn install v1.22.5info No lockfile found.[1/4] Resolving packages...[2/4] Fetching packages...info fsevents@2.3.2: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@2.3.2&quot; is an optional dependency and failed compatibility check. Excluding it from installation.info fsevents@1.2.13: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@1.2.13&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...[4/4] Building fresh packages...success Saved lockfile.Done in 20.52s.🚀 Invoking generators...📦 Installing additional dependencies...yarn install v1.22.5[1/4] Resolving packages...[2/4] Fetching packages...info fsevents@2.3.2: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@2.3.2&quot; is an optional dependency and failed compatibility check. Excluding it from installation.info fsevents@1.2.13: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@1.2.13&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...[4/4] Building fresh packages...success Saved lockfile.Done in 5.25s.⚓ Running completion hooks...📄 Generating README.md...🎉 Successfully created project acme-world-app.👉 Get started with the following commands: $ cd acme-world-app $ yarn serve WARN Skipped git commit due to missing username and email in git config, or failed to sign commit.You will need to perform the initial commit yourself. 运行项目进入创建好的项目文件夹根据项目创建完成后倒数第二行提示，输入命令：cd acme-world-app 12PS D:\\sources\\vue_repos&gt; cd acme-world-appPS D:\\sources\\vue_repos\\acme-world-app&gt; 在 Visual Studio Code 中打开项目方法一： 启动 Visual Studio Code， 选择打开文件夹, 选中D:\\sources\\vue_repos\\acme-world-app 打开。 方法二： 在上一步使用命令进入项目文件夹的基础上，直接在命令行中输入：code .(code 和 . 之间至少有一个空格隔开 )， 则可以启动 Visual Studio Code 并打开当前的文件夹。(我比较喜欢这种打开方式。) 1PS D:\\sources\\vue_repos\\acme-world-app&gt; code . 启动开发服务器的时候自动打开默认浏览器在 Visudl Studio Code 打开 package.json 文件。其内容如以下代码所示: 12345678910111213141516171819202122&#123; &quot;name&quot;: &quot;acme-world-app&quot;, &quot;version&quot;: &quot;0.1.0&quot;, &quot;private&quot;: true, &quot;scripts&quot;: &#123; &quot;serve&quot;: &quot;vue-cli-service serve&quot;, &quot;build&quot;: &quot;vue-cli-service build&quot; &#125;, &quot;dependencies&quot;: &#123; &quot;core-js&quot;: &quot;^3.6.5&quot;, &quot;vue&quot;: &quot;^2.6.11&quot;, &quot;vue-router&quot;: &quot;^3.2.0&quot;, &quot;vuex&quot;: &quot;^3.4.0&quot; &#125;, &quot;devDependencies&quot;: &#123; &quot;@vue/cli-plugin-babel&quot;: &quot;~4.5.0&quot;, &quot;@vue/cli-plugin-router&quot;: &quot;~4.5.0&quot;, &quot;@vue/cli-plugin-vuex&quot;: &quot;~4.5.0&quot;, &quot;@vue/cli-service&quot;: &quot;~4.5.0&quot;, &quot;vue-template-compiler&quot;: &quot;^2.6.11&quot; &#125;&#125; 其中 第5行的scripts用于定义脚本命令： 1234&quot;scripts&quot;: &#123; &quot;serve&quot;: &quot;vue-cli-service serve&quot;, &quot;build&quot;: &quot;vue-cli-service build&quot;&#125;, 在上面这个 scripts小节中，定义了两个脚本命令serve和build 每一行冒号左边的名字是命令名称，可以通过类似 npm run serve或是 yarn serve 的方式在控制台运行。 每一行冒号右边的内容侧是该命令执行时实际调用的脚本。 两个脚本命令的说明： vue-cli-service serve 命令会启动一个开发服务器 (基于 webpack-dev-server) 并附带开箱即用的模块热重载 (Hot-Module-Replacement) vue-cli-service build 会在 dist&#x2F; 目录产生一个可用于生产环境的包，带有 JS&#x2F;CSS&#x2F;HTML 的压缩，和为更好的缓存而做的自动的 vendor chunk splitting 复制 &quot;serve&quot;: &quot;vue-cli-service serve&quot;,那一行。并修改冒号左边的命令名称为 dev, 在冒号右边的脚本后加空格，再添加选择 --open(用于自动打开默认浏览器)，修改后的代码如以下所示： 12345&quot;scripts&quot;: &#123; &quot;dev&quot;: &quot;vue-cli-service serve --open&quot;, &quot;serve&quot;: &quot;vue-cli-service serve&quot;, &quot;build&quot;: &quot;vue-cli-service build&quot; &#125;, 以后在项目的控制台中运行命令：yarn dev 或npm run dev 就可以启动开发服务器，并自动打开默认浏览器显示运行的结果了。 启动项目在控制台输入命令：yarn dev, 项目运行成功后将看到内容如下： 123456789101112131415PS D:\\sources\\vue_repos\\acme-world-app&gt; yarn devyarn run v1.22.5$ vue-cli-service serve --open INFO Starting development server...98% after emitting CopyPlugin DONE Compiled successfully in 4008ms App running at: - Local: http://localhost:8080/ - Network: http://192.168.3.52:8080/ Note that the development build is not optimized. To create a production build, run yarn build. 在自动打开的默认浏览器中，可以看到项目运行的结果如下图所示： 添加 Element UIElement UI 是一套采用 Vue 2.0 作为基础框架实现的组件库，提供了配套设计资源，帮助网站快速成型. 安装 Element UInpm 安装 1npm i element-ui -S yarn 安装 1yarn add element-ui yarn 安装过程如下： 12345678910111213141516171819202122232425PS D:\\sources\\vue_repos\\acme-world-app&gt; yarn add element-uiyarn add v1.22.5[1/4] Resolving packages...warning element-ui &gt; async-validator &gt; babel-runtime &gt; core-js@2.6.12: core-js@&lt;3.3 is no longer maintained and not recommended for usage due to the number of issues. Because of the V8 engine whims, feature detection in old core-js versions could cause a slowdown up to 100x even if nothing is polyfilled. Please, upgrade your dependencies to the actual version of core-js.[2/4] Fetching packages...info fsevents@2.3.2: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@2.3.2&quot; is an optional dependency and failed compatibility check. Excluding it from installation.info fsevents@1.2.13: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@1.2.13&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...[4/4] Building fresh packages...success Saved lockfile.success Saved 8 new dependencies.info Direct dependencies└─ element-ui@2.15.6info All dependencies├─ async-validator@1.8.5├─ babel-helper-vue-jsx-merge-props@2.0.3├─ babel-runtime@6.26.0├─ element-ui@2.15.6├─ normalize-wheel@1.0.1├─ regenerator-runtime@0.11.1├─ resize-observer-polyfill@1.5.1└─ throttle-debounce@1.1.0Done in 6.71s. 引入 Element编辑 src/main.js， 内容如以下代码所示： 1234567891011121314151617import Vue from &#x27;vue&#x27;;import App from &#x27;./App.vue&#x27;;import router from &#x27;./router&#x27;;import store from &#x27;./store&#x27;;import ElementUI from &#x27;element-ui&#x27;; // 导入ElementUIimport &#x27;element-ui/lib/theme-chalk/index.css&#x27;; // 导入element ui 主题import &#x27;element-ui/lib/theme-chalk/display.css&#x27;; // 导入用于隐藏断点的样式Vue.use(ElementUI); //通过全局方法 Vue.use() 使用插件Vue.config.productionTip = false;new Vue(&#123; router, store, render: h =&gt; h(App)&#125;).$mount(&#x27;#app&#x27;); 使用 Leancloud Leancloud（原 AVOS Cloud） 是针对移动应用的一站式云端服务，专注于为应用开发者提供工具和平台, 这里使用 leancloud 的 数据存储功能来保存数据。 请提前到 leanclou.cn 注册一个账号。因 华北节点 的 文件服务 功能去年无法使用，建议选择使用 华东节点。 安装 leancloud SDK 在控制台输入命令：yarn add leancloud-storage 安装过程显示如以下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354PS D:\\sources\\vue_repos\\acme-world-app&gt; yarn add leancloud-storageyarn add v1.22.5[1/4] Resolving packages...warning leancloud-storage &gt; leancloud-realtime &gt; uuid@3.4.0: Please upgrade to version 7 or higher. Older versions may use Math.random() in certain circumstances, which is known to be problematic. See https://v8.dev/blog/math-random for details.warning leancloud-storage &gt; @leancloud/platform-adapters-node &gt; @leancloud/adapters-superagent &gt; superagent &gt; formidable@1.2.6: Please upgrade to latest, formidable@v2 or formidable@v3! Check these notes: https://bit.ly/2ZEqIau[2/4] Fetching packages...info fsevents@2.3.2: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@2.3.2&quot; is an optional dependency and failed compatibility check. Excluding it from installation.info fsevents@1.2.13: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@1.2.13&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...[4/4] Building fresh packages...success Saved lockfile.success Saved 35 new dependencies.info Direct dependencies└─ leancloud-storage@4.12.0info All dependencies├─ @leancloud/platform-adapters-browser@1.5.2├─ @leancloud/platform-adapters-node@1.5.2├─ @leancloud/platform-adapters-weapp@1.6.1├─ @types/cookiejar@2.1.2├─ @types/superagent@4.1.13├─ @types/ws@7.4.7├─ ascli@1.0.1├─ base64-arraybuffer@0.1.5├─ bytebuffer@5.0.1├─ charenc@0.0.2├─ code-point-at@1.1.0├─ colour@0.7.1├─ cookiejar@2.1.3├─ crypt@0.0.2├─ event-target-shim@5.0.1├─ eventemitter3@2.0.3├─ fast-safe-stringify@2.1.1├─ formidable@1.2.6├─ invert-kv@1.0.0├─ javascript-state-machine@2.4.0├─ lcid@1.0.0├─ leancloud-realtime-plugin-live-query@1.2.0├─ leancloud-realtime@5.0.0-rc.7├─ leancloud-storage@4.12.0├─ localstorage-memory@1.0.3├─ long@3.2.0├─ md5@2.3.0├─ miniprogram-api-typings@2.12.0├─ number-is-nan@1.0.1├─ optjs@3.2.2├─ os-locale@1.4.0├─ protobufjs@5.0.3├─ superagent@5.3.1├─ underscore@1.13.1└─ window-size@0.1.4Done in 7.98s. 添加 leancloud SDK 配置文件 如果还没有 leancloud 账号，请参考本教程的第六部分 使用 Element UI 和 Leancloud 的 Vue.js 项目开发 VI：实现用户注册、登录、找回密码, 在 leancloud 中创建应用并找到相应的 keys。 在项目中创建文件夹：src/api/config/ 再文件夹中创建文件：src/api/config/lc.config.js, 编辑其内容如以下代码： 1234567891011export default &#123; //&#x27;这里填写 leancloud 的 appId&#x27;, id: &#x27;9MCRS87WVkReLtNbQWbnllm9-********&#x27;, // &#x27;这里填写 leancloud 的 appKey&#x27;, key: &#x27;zAfYTXaiXYGeQUm8********&#x27;, // &#x27;这里填写 leancloud 的 REST API 服务器地址，国际版应用等未绑定自定义域名的此项留空&#x27; url: &#x27;https://********.lc-cn-n1-shared.com&#x27;, &#125; 以上部分字符已经改成了* 以隐藏真实的keys，请用自己的 leancloud 应用keys 中相应的内容替换以上三个值。 添加 leancloud SDK 初始化文件在项目中创建文件：src/api/init.js，编辑其内容如以下代码： 12345678910111213141516171819202122232425import LC from &#x27;leancloud-storage&#x27;; // 导入 leancloud 数据存储模块import config from &#x27;./config/lc.config&#x27;; // 导入 leancloud 的应用keyslet initOptions;if (config.url.trim() === &#x27;&#x27;) &#123; // url 为空的时候，访问国际版：leancloud.app initOptions = &#123; appId: config.id, appKey: config.key, &#125;;&#125; else &#123; // url 不为空的时候，访问国内版:leancloud.cn initOptions = &#123; appId: config.id, appKey: config.key, serverURLs: config.url, &#125;;&#125;// 执行 leanCloud 初始化LC.init(initOptions);// 导出模块export default &#123;&#125; 在 main.js 中导入并执行 leancloud SDK 初始化编辑文件：src/main.js, 内容如以下代码所示: 12345678910111213141516171819import Vue from &#x27;vue&#x27;;import App from &#x27;./App.vue&#x27;;import router from &#x27;./router&#x27;;import store from &#x27;./store&#x27;;import ElementUI from &#x27;element-ui&#x27;; import &#x27;element-ui/lib/theme-chalk/index.css&#x27;; import &#x27;element-ui/lib/theme-chalk/display.css&#x27;; Vue.use(ElementUI); require(&#x27;./api/init.js&#x27;); // 导入并执行 LeanCloud SDK 初始化Vue.config.productionTip = false;new Vue(&#123; router, store, render: h =&gt; h(App)&#125;).$mount(&#x27;#app&#x27;); Moment.js 和 MarkedMoment.js 是一个 JavaScript 日期处理类库，用于解析、检验、操作、以及显示日期。 安装 Moment.jsnpm 安装 1npm install moment -S yarn 安装 1yarn add moment 安装 MarkedMarkdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。 Marked 是一个高效的 Markdown 解析器。 npm 安装 1npm install marked -S yarn 安装 1yarn add marked moment.js 和 marked.js 安装完毕待用。 使用 font-awesome-4.7 图标Element UI 自带的图标少，也不好看，这里使用 font-awesome-4.7 的图标 载 font-awesome-4.7 下载地址 代码到本地, 解压到当前项目的 src/assets 文件夹中。 编辑 main.js ，添加以下引用(和设置 moment 的语言地区一起)： 1234567891011121314151617181920212223import Vue from &#x27;vue&#x27;;import App from &#x27;./App.vue&#x27;;import router from &#x27;./router&#x27;;import store from &#x27;./store&#x27;;import ElementUI from &#x27;element-ui&#x27;; import &#x27;element-ui/lib/theme-chalk/index.css&#x27;; import &#x27;element-ui/lib/theme-chalk/display.css&#x27;; import &#x27;./assets/font-awesome-4.7.0/css/font-awesome.min.css&#x27;; // 导入 font awesome 图标import moment from &#x27;moment&#x27;; // 导入时期时间库moment.locale(&#x27;zh-cn&#x27;); // 设置时期时间的地区Vue.use(ElementUI); require(&#x27;./api/init.js&#x27;); Vue.config.productionTip = false;new Vue(&#123; router, store, render: h =&gt; h(App)&#125;).$mount(&#x27;#app&#x27;); 使用示例：http://www.fontawesome.com.cn/examples/ 查找想要的图标： 网址1(带名字的小图标)： http://www.fontawesome.com.cn/faicons/#web-application 网址2(没有名字的大图标)： http://www.fontawesome.com.cn/icons-ui/ 后继内容：使用 Element UI 和 Leancloud 的 Vue.js 项目开发 II &#x3D;&#x3D;&#x3D; END &#x3D;&#x3D;&#x3D;","categories":[{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/categories/vue-js/"}],"tags":[{"name":"leancloud","slug":"leancloud","permalink":"https://hujiyi.github.io/tags/leancloud/"},{"name":"element ui","slug":"element-ui","permalink":"https://hujiyi.github.io/tags/element-ui/"},{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/tags/vue-js/"}]},{"title":"使用 Butterfly 主题 搭建 Github Pages 上的 Hexo 博客","slug":"hexo-with-butterfly","date":"2021-11-15T13:38:14.000Z","updated":"2022-10-11T01:40:13.254Z","comments":true,"path":"2021/11/15/hexo-with-butterfly/","permalink":"https://hujiyi.github.io/2021/11/15/hexo-with-butterfly/","excerpt":"","text":"安装前提安装 Hexo 需要先安装下列应用程序： Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本) Git 安装 hexo cli1npm install hexo-cli -g 初始化博客项目 创建 hexo 博客项目文件夹： hujiyi.github.io 进入文件后， 打开 Git Bash 命令行窗口 输入命令执行初始化：hexo init 1$ hexo init 程序初始化过程如下所示： 1234567891011$ hexo initINFO Cloning hexo-starter https://github.com/hexojs/hexo-starter.gitINFO Install dependencieswarning hexo-renderer-stylus &gt; stylus &gt; css-parse &gt; css &gt; urix@0.1.0: Please see https://github.com/lydell/urix#deprecatedwarning hexo-renderer-stylus &gt; stylus &gt; css-parse &gt; css &gt; source-map-resolve &gt; urix@0.1.0: Please see https://github.com/lydell/urix#deprecatedwarning hexo-renderer-stylus &gt; stylus &gt; css-parse &gt; css &gt; source-map-resolve &gt; resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecatedwarning Your current version of Yarn is out of date. The latest version is &quot;1.22.15&quot;, while you&#x27;re on &quot;1.22.5&quot;.INFO Start blogging with Hexo! 还原所有的包 12345678910$ yarnyarn install v1.22.5[1/4] Resolving packages...[2/4] Fetching packages...info fsevents@2.3.2: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@2.3.2&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...[4/4] Building fresh packages...Done in 1.39s. 运行测试 Hexo 博客 生成博客文件 1hexo g 生成静态文件过程如以下所示： 1234567891011121314151617181920212223242526272829$ hexo gINFO Validating configINFO Start processingINFO Files loaded in 212 ms(node:1616) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency(Use `node --trace-warnings ...` to show where the warning was created)(node:1616) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency(node:1616) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency(node:1616) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency(node:1616) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency(node:1616) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependencyINFO Generated: archives/index.htmlINFO Generated: archives/2021/index.htmlINFO Generated: index.htmlINFO Generated: archives/2021/11/index.htmlINFO Generated: fancybox/jquery.fancybox.min.cssINFO Generated: js/script.jsINFO Generated: css/fonts/FontAwesome.otfINFO Generated: css/style.cssINFO Generated: fancybox/jquery.fancybox.min.jsINFO Generated: js/jquery-3.4.1.min.jsINFO Generated: css/fonts/fontawesome-webfont.eotINFO Generated: css/images/banner.jpgINFO Generated: css/fonts/fontawesome-webfont.woffINFO Generated: css/fonts/fontawesome-webfont.ttfINFO Generated: 2021/11/16/hello-world/index.htmlINFO Generated: css/fonts/fontawesome-webfont.woff2INFO Generated: css/fonts/fontawesome-webfont.svgINFO 17 files generated in 584 ms 启动本地的测试服务器 1hexo s 过程如以下所示： 1234$ hexo sINFO Validating configINFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 根据提示，在浏览器中打开网址：http://localhost:4000 ， 即可看到博客的运行效果： 配置博客 修改项目根目录的 _config.yml , 配置博客的标题、作者等相关信息： 123456789101112# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: Laohoosubtitle: &#x27;有时间，就多写点Bug，这样大家才有工作。&#x27;description: &#x27;如果你交给某人一个程序，你将折磨他一整天；如果你教某人如何编写程序，你将折磨他一辈子。. ——David Leinweber.&#x27;keywords:author: Laohoolanguage: zh-CNtimezone: &#x27;&#x27; 修改项目根目录的 _config.yml , 配置github pages 仓库地址： 123456# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git repo: git@github.com:hujiyi/hujiyi.github.io.git branch: master 新建博客文章时使用资源文件夹 使用文章资源文件夹(例如存放图片), 编辑 _config.yml 1post_asset_folder: true 改为true 配置 git 用于部署 hexo 博客到 github pages 仓库 特别说明：因为这台电脑 Git 配置了同时使用 gitee 和 github， 不使用全局配置, 需要对每个项目进行本地 git 配置。 和使用了 Git全局配置 操作略有不同。 初始化 git 仓库在根目录下执行命令：git init 12$ git initInitialized empty Git repository in D:/sources/hexo-repos/hujiyi.github.io/.git/ 创建增加本地配置 12git config --local user.name &#x27;你自己的github用户名&#x27;git config --local user.email &#x27;你自己的github邮箱&#x27; git 非全局配置时的增加配置 编辑项目中的文件： .deploy_git/.git/config， 在文件中添加以下内容： 123[user] name = username email = email 安装 hexo-deployer-git 12345678910111213141516$ yarn add hexo-deployer-gityarn add v1.22.5[1/4] Resolving packages...[2/4] Fetching packages...info fsevents@2.3.2: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@2.3.2&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...[4/4] Building fresh packages...success Saved lockfile.success Saved 1 new dependency.info Direct dependencies└─ hexo-deployer-git@3.0.0info All dependencies└─ hexo-deployer-git@3.0.0Done in 1.87s. 生成博客静态文件: hexo g 1234567891011121314151617181920212223242526272829$ hexo gINFO Validating configINFO Start processingINFO Files loaded in 212 ms(node:1616) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency(Use `node --trace-warnings ...` to show where the warning was created)(node:1616) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency(node:1616) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependency(node:1616) Warning: Accessing non-existent property &#x27;lineno&#x27; of module exports inside circular dependency(node:1616) Warning: Accessing non-existent property &#x27;column&#x27; of module exports inside circular dependency(node:1616) Warning: Accessing non-existent property &#x27;filename&#x27; of module exports inside circular dependencyINFO Generated: archives/index.htmlINFO Generated: archives/2021/index.htmlINFO Generated: index.htmlINFO Generated: archives/2021/11/index.htmlINFO Generated: fancybox/jquery.fancybox.min.cssINFO Generated: js/script.jsINFO Generated: css/fonts/FontAwesome.otfINFO Generated: css/style.cssINFO Generated: fancybox/jquery.fancybox.min.jsINFO Generated: js/jquery-3.4.1.min.jsINFO Generated: css/fonts/fontawesome-webfont.eotINFO Generated: css/images/banner.jpgINFO Generated: css/fonts/fontawesome-webfont.woffINFO Generated: css/fonts/fontawesome-webfont.ttfINFO Generated: 2021/11/16/hello-world/index.htmlINFO Generated: css/fonts/fontawesome-webfont.woff2INFO Generated: css/fonts/fontawesome-webfont.svgINFO 17 files generated in 584 ms 上传到 github pages 仓库: hexo d 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556$ hexo dINFO Validating configINFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...warning: LF will be replaced by CRLF in 2021/11/16/hello-world/index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in archives/2021/11/index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in archives/2021/index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in archives/index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in css/fonts/fontawesome-webfont.svg.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in css/style.css.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in fancybox/jquery.fancybox.min.js.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in js/jquery-3.4.1.min.js.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in js/script.js.The file will have its original line endings in your working directory[master (root-commit) ffab492] Site updated: 2021-11-16 16:31:26 17 files changed, 5202 insertions(+) create mode 100644 2021/11/16/hello-world/index.html create mode 100644 archives/2021/11/index.html create mode 100644 archives/2021/index.html create mode 100644 archives/index.html create mode 100644 css/fonts/FontAwesome.otf create mode 100644 css/fonts/fontawesome-webfont.eot create mode 100644 css/fonts/fontawesome-webfont.svg create mode 100644 css/fonts/fontawesome-webfont.ttf create mode 100644 css/fonts/fontawesome-webfont.woff create mode 100644 css/fonts/fontawesome-webfont.woff2 create mode 100644 css/images/banner.jpg create mode 100644 css/style.css create mode 100644 fancybox/jquery.fancybox.min.css create mode 100644 fancybox/jquery.fancybox.min.js create mode 100644 index.html create mode 100644 js/jquery-3.4.1.min.js create mode 100644 js/script.jsEnumerating objects: 31, done.Counting objects: 100% (31/31), done.Delta compression using up to 4 threadsCompressing objects: 100% (25/25), done.Writing objects: 100% (31/31), 881.69 KiB | 2.44 MiB/s, done.Total 31 (delta 4), reused 0 (delta 0), pack-reused 0remote: Resolving deltas: 100% (4/4), done.To github.com:hujiyi/hujiyi.github.io.git + bff8ce1...ffab492 HEAD -&gt; master (forced update)Branch &#x27;master&#x27; set up to track remote branch &#x27;master&#x27; from &#x27;git@github.com:hujiyi/hujiyi.github.io.git&#x27;.INFO Deploy done: git 在相应的 github 仓库中启用 pages 服务后，通过浏览器查看博客运行结果(此项目网址：https://hujiyi.github.io/) 使用 Butterfly 主题安装 Butterfly 主题在项目根目录下执行命令： 1git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly 命令执行如以下过程： 12345678$ git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterflyCloning into &#x27;themes/butterfly&#x27;...remote: Enumerating objects: 4685, done.remote: Counting objects: 100% (719/719), done.remote: Compressing objects: 100% (409/409), done.remote: Total 4685 (delta 389), reused 551 (delta 308), pack-reused 3966Receiving objects: 100% (4685/4685), 2.34 MiB | 5.16 MiB/s, done.Resolving deltas: 100% (3028/3028), done. 切换为 Butterfly 主题编辑项目根目录的文件： _config.yml 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: butterfly # 在这里更改主题名称 安装 Butterfly 主题需要的插件在项目根目录下执行命令： 1yarn add hexo-renderer-pug hexo-renderer-stylus 命令执行如以下过程： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546$ yarn add hexo-renderer-pug hexo-renderer-stylusyarn add v1.22.5[1/4] Resolving packages...[2/4] Fetching packages...info fsevents@2.3.2: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@2.3.2&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...[4/4] Building fresh packages...success Saved lockfile.success Saved 30 new dependencies.info Direct dependencies├─ hexo-renderer-pug@2.0.0└─ hexo-renderer-stylus@2.0.1info All dependencies├─ @babel/helper-validator-identifier@7.15.7├─ @babel/parser@7.16.3├─ assert-never@1.2.1├─ babel-walk@3.0.0-canary-5├─ call-bind@1.0.2├─ character-parser@2.2.0├─ doctypes@1.1.0├─ get-intrinsic@1.1.1├─ has-symbols@1.0.2├─ has-tostringtag@1.0.0├─ hexo-renderer-pug@2.0.0├─ hexo-renderer-stylus@2.0.1├─ is-expression@4.0.0├─ is-promise@2.2.2├─ is-regex@1.1.4├─ jstransformer@1.0.0├─ promise@7.3.1├─ pug-attrs@3.0.0├─ pug-code-gen@3.0.2├─ pug-filters@4.0.0├─ pug-lexer@5.0.1├─ pug-linker@4.0.0├─ pug-load@3.0.0├─ pug-parser@6.0.0├─ pug-strip-comments@2.0.0├─ pug@3.0.2├─ to-fast-properties@2.0.0├─ token-stream@1.0.0├─ void-elements@3.1.0└─ with@7.0.2Done in 2.48s. 重新生成博客 12345678910111213141516171819202122$ hexo gINFO Validating configINFO =================================================================== ##### # # ##### ##### ###### ##### ###### # # # # # # # # # # # # # # # # ##### # # # # ##### # # ##### # # # # # # # # # ##### # # # # # # # # # # # # # # # ##### #### # # ###### # # # ###### # 3.8.4 ===================================================================INFO Start processingINFO Files loaded in 3.37 sINFO Generated: 2021/11/16/hello-world/index.htmlINFO Generated: archives/2021/11/index.htmlINFO Generated: archives/2021/index.htmlINFO Generated: archives/index.htmlINFO Generated: index.htmlINFO 5 files generated in 127 ms 测试运行： 12345678910111213141516$ hexo sINFO Validating configINFO =================================================================== ##### # # ##### ##### ###### ##### ###### # # # # # # # # # # # # # # # # ##### # # # # ##### # # ##### # # # # # # # # # ##### # # # # # # # # # # # # # # # ##### #### # # ###### # # # ###### # 3.8.4 ===================================================================INFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 在浏览器中打开网址： http://localhost:4000 ， 运行效果如下图所示： 添加博客的 page 新建标签 tags 页面 1 新建标签 tags 页面 123456789101112131415$ hexo new page &quot;tags&quot;INFO Validating configINFO =================================================================== ##### # # ##### ##### ###### ##### ###### # # # # # # # # # # # # # # # # ##### # # # # ##### # # ##### # # # # # # # # # ##### # # # # # # # # # # # # # # # ##### #### # # ###### # # # ###### # 3.8.4 ===================================================================INFO Created: D:\\sources\\hexo-repos\\hujiyi.github.io\\source\\tags\\index.md 编辑文件: source/tags/index.md , 修改内容如以下所示: 123456---title: tagsdate: 2021-11-16 16:00:00type: &quot;tags&quot;layout: &quot;tags&quot;--- 新建分类 categories 页面 123456789101112131415$ hexo new page &quot;categories&quot;INFO Validating configINFO =================================================================== ##### # # ##### ##### ###### ##### ###### # # # # # # # # # # # # # # # # ##### # # # # ##### # # ##### # # # # # # # # # ##### # # # # # # # # # # # # # # # ##### #### # # ###### # # # ###### # 3.8.4 ===================================================================INFO Created: D:\\sources\\hexo-repos\\hujiyi.github.io\\source\\categories\\index.md 编辑文件: source/categories/index.md , 修改内容如以下所示: 1234567---title: categoriesdate: 2021-11-16 16:00:00type: &quot;categories&quot;layout: &quot;categories&quot;--- 新建关于 about 页面 123456789101112131415$ hexo new page &quot;about&quot;INFO Validating configINFO =================================================================== ##### # # ##### ##### ###### ##### ###### # # # # # # # # # # # # # # # # ##### # # # # ##### # # ##### # # # # # # # # # ##### # # # # # # # # # # # # # # # ##### #### # # ###### # # # ###### # 3.8.4 ===================================================================INFO Created: D:\\sources\\hexo-repos\\hujiyi.github.io\\source\\about\\index.md 编辑文件: source/about/index.md , 修改内容如以下所示: 12345678---title: aboutdate: 2021-11-16 16:00:00type: &quot;about&quot;layout: &quot;about&quot;---这里什么都没有留下 新建友情链接 link 页面 123456789101112131415$ hexo new page linkINFO Validating configINFO =================================================================== ##### # # ##### ##### ###### ##### ###### # # # # # # # # # # # # # # # # ##### # # # # ##### # # ##### # # # # # # # # # ##### # # # # # # # # # # # # # # # ##### #### # # ###### # # # ###### # 3.8.4 ===================================================================INFO Created: D:\\sources\\hexo-repos\\hujiyi.github.io\\source\\link\\index.md 编辑文件: source/link/index.md , 修改内容如以下所示: 123456---title: linkdate: 2021-11-16 16:00:00type: &quot;link&quot;layout: &quot;link&quot;--- 在 Hexo博客目录 中的 source/_data（如果没有 _data 文件夹，请自行创建），创建一个文件 link.yml 1234567891011121314151617181920212223- class_name: 友情链接 class_desc: 那些人，那些事 link_list: - name: Hexo link: https://hexo.io/zh-tw/ avatar: https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg descr: 快速、简单且强大的网誌框架- class_name: 网站 class_desc: 值得推荐的网站 link_list: - name: Laohoo @gitee.io link: https://hujiyi.gitee.io/ avatar: https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png descr: 博客网站 - name: Weibo link: https://www.weibo.com/ avatar: https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png descr: 中国最大社交分享平台 - name: Twitter link: https://twitter.com/ avatar: https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png descr: 社交分享平台 class_name和class_desc支持html格式书写，如不需要，也可以留空。 新建音乐 music 页面 123456789101112131415$ hexo new page musicINFO Validating configINFO =================================================================== ##### # # ##### ##### ###### ##### ###### # # # # # # # # # # # # # # # # ##### # # # # ##### # # ##### # # # # # # # # # ##### # # # # # # # # # # # # # # # ##### #### # # ###### # # # ###### # 3.8.4 ===================================================================INFO Created: D:\\sources\\hexo-repos\\hujiyi.github.io\\source\\music\\index.md 编辑文件: source/music/index.md , 修改内容如以下所示: 1234567---title: musicdate: 2021-11-16 16:00:00type: &quot;music&quot;layout: &quot;music&quot;---这里什么都没有留下 新建电影 movies 页面 12345678910111213141516$ hexo new page moviesINFO Validating configINFO =================================================================== ##### # # ##### ##### ###### ##### ###### # # # # # # # # # # # # # # # # ##### # # # # ##### # # ##### # # # # # # # # # ##### # # # # # # # # # # # # # # # ##### #### # # ###### # # # ###### # 3.8.4 ===================================================================INFO Created: D:\\sources\\hexo-repos\\hujiyi.github.io\\source\\movies\\index.md 编辑文件: source/movies/index.md , 修改内容如以下所示: 1234567---title: moviesdate: 2021-11-16 16:00:00type: &quot;movies&quot;layout: &quot;movies&quot;---这里什么都没有留下 配置主题在 hexo博客 的根目录创建一个文件 _config.butterfly.yml，并把主题目录的 themes/butterfly/_config.yml 内容复制到 _config.butterfly.yml 去 编辑 _config.butterfly.yml，启用导航主菜单： 123456789101112131415# format: name: link || icon# sub-menu# name || icon:# name: link || iconmenu: Home: / || fas fa-home Archives: /archives/ || fas fa-archive Tags: /tags/ || fas fa-tags Categories: /categories/ || fas fa-folder-open List||fas fa-list: Music: /music/ || fas fa-music Movie: /movies/ || fas fa-video Link: /link/ || fas fa-link About: /about/ || fas fa-heart 注意： 不要把主题目录的 _config.yml 删掉 注意： 以后只需要在 _config.butterfly.yml进行配置就行。如果使用了 _config.butterfly.yml， 配置主题的 themes&#x2F;butterfly&#x2F;_config.yml 将不会有效果。 Hexo会自动合并主题中的themes&#x2F;butterfly&#x2F;_config.yml 和 _config.butterfly.yml 里的配置，如果存在同名配置，会使用_config.butterfly.yml 的配置，其优先度较高 使用本地搜索 hexo-generator-search 安装搜索插件: 12345678910111213141516$ yarn add hexo-generator-searchyarn add v1.22.5[1/4] Resolving packages...[2/4] Fetching packages...info fsevents@2.3.2: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@2.3.2&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...[4/4] Building fresh packages...success Saved lockfile.success Saved 1 new dependency.info Direct dependencies└─ hexo-generator-search@2.4.3info All dependencies└─ hexo-generator-search@2.4.3Done in 2.66s. 编辑 _config.butterfly.yml 123# Local searchlocal_search: enable: true # 改为 true 字数统计 安装插件： 1yarn add hexo-wordcount 编辑 _config.butterfly.yml 123456# wordcount (字數統計)wordcount: enable: true # 改为 true post_wordcount: true min2read: true total_wordcount: true 使用 Gitalk 评论系统创建 OAuth ApplicationGitalk 需要一个 Github Application，打开 https://github.com/settings/applications/new 当然，也可以在用户头像下的 setting 下的 Developer settings 中 new 一个 Application，然后填写相应的参数。 Register a new OAuth application Application name （名字随便填，例如：Hujy blog comments） Something users will recognize and trust. Homepage URL （博客地址：https://hujiyi.github.io/） The full URL to your application homepage. Application description （描述，随便填） This is displayed to all users of your application. Authorization callback URL （博客地址，回调地址：https://hujiyi.github.io/） Your application’s callback URL. Read our OAuth documentation for more information. 完成后会生成相应的 clientID 和 clientSecret。 启用 Gitalk 评论系统打开 _config.butterfly.yml , 找到 # Comments System, 修改如以下内容： 12345678910111213141516# Comments System# --------------------------------------comments: # Up to two comments system, the first will be shown as default # Choose: Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo use: - Gitalk # - Valine # - Disqus text: true # Display the comment name next to the button # lazyload: The comment system will be load when comment element enters the browser&#x27;s viewport. # If you set it to true, the comment count will be invalid lazyload: true count: true # Display comment count in post&#x27;s top_img card_post_count: true # Display comment count in Home Page 继续在 _config.butterfly.yml中 , 找到 # gitalk, 修改如以下内容： 1234567891011121314# gitalk# https://github.com/gitalk/gitalkgitalk: client_id: 66************** #必须. GitHub Application Client ID. client_secret: abac*************************************** #必须. GitHub Application Client Secret. repo: blogcomments #必须. GitHub repository. owner: hujiyi #必须. GitHub repository 所有者，可以是个人或者组织。 admin: hujiyi #必须. GitHub repository 的所有者和合作者 (对这个 repository 有写权限的用户)。 language: zh-CN # en, zh-CN, zh-TW, es-ES, fr, ru perPage: 10 # Pagination size, with maximum 100. distractionFreeMode: false # Facebook-like distraction free mode. pagerDirection: last # Comment sorting direction, available values are last and first. createIssueManually: false # Gitalk will create a corresponding github issue for your every single page automatically option: 以上内容中的 client_id 和 client_secret 的值已用 * 进行隐藏; &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hujiyi.github.io/categories/Hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://hujiyi.github.io/tags/hexo/"},{"name":"butterfly","slug":"butterfly","permalink":"https://hujiyi.github.io/tags/butterfly/"},{"name":"github pages","slug":"github-pages","permalink":"https://hujiyi.github.io/tags/github-pages/"}]},{"title":"flutter introduction part II：使用Provider 的深浅色模式和多语言切换","slug":"flutter-introduction-part-II","date":"2021-02-04T02:50:29.000Z","updated":"2022-10-11T01:40:13.254Z","comments":true,"path":"2021/02/04/flutter-introduction-part-II/","permalink":"https://hujiyi.github.io/2021/02/04/flutter-introduction-part-II/","excerpt":"","text":"上一节创建了项目，并通过 Intl 实现在项目的多语言国际化支持。但是还没有在项目提供多语言的切换功能。 这一节除了实现多语言的选择切换功能，还同时实现项目的深色、浅色主题切换，需要用过以下两个包： Provider: Provider是 Google I/O 2019官方推荐的状态管理方式，是一套实现跨组件状态共享的解决方案。 shared_preferences : shared_preferences 是一个轻量级存储类，以键值对的形式保存设置，属性和数据。 准备工作在项目的 pubspec.yaml 文件中增加以下包依赖： Provider的最新版本查询：https://pub.dev/packages/providershared_preferences的最新版本查询：https://pub.dev/packages/shared_preferences 123456789101112dependencies: flutter: sdk: flutter # 国际化 flutter_localizations: sdk: flutter cupertino_icons: ^1.0.0 intl: ^0.16.1 intl_translation: ^0.17.10+1 provider: ^4.3.3 # 增加这一行 shared_preferences: ^0.5.12+4 # 增加这一行 保存 pubspec.yaml 文件以获取包文件 打开语言文件 lib\\l10n\\intl_en.arb，编辑其内容如以下代码： 123456789101112&#123; &quot;appName&quot;: &quot;Deep Sky&quot;, &quot;login&quot;: &quot;Login&quot;, &quot;tabHome&quot;: &quot;Home&quot;, &quot;tabProject&quot;: &quot;Project&quot;, &quot;settings&quot;: &quot;Settings&quot;, &quot;settingLanguage&quot;: &quot;Language&quot;, &quot;autoBySystem&quot;: &quot;Auto&quot;, &quot;themeMode&quot;: &quot;Theme Mode&quot;, &quot;darkMode&quot;: &quot;Dark Mode&quot;, &quot;lightMode&quot;:&quot;Light Mode&quot;&#125; 打开语言文件 lib\\l10n\\intl_zh.arb，编辑其内容如以下代码： 123456789101112&#123; &quot;appName&quot;: &quot;深处天空&quot;, &quot;login&quot;: &quot;登录&quot;, &quot;tabHome&quot;: &quot;首页&quot;, &quot;tabProject&quot;: &quot;项目&quot;, &quot;settings&quot;: &quot;设置&quot;, &quot;settingLanguage&quot;: &quot;语言设置&quot;, &quot;autoBySystem&quot;: &quot;跟随系统&quot;, &quot;themeMode&quot;: &quot;主题模式&quot;, &quot;darkMode&quot;: &quot;深色模式&quot;, &quot;lightMode&quot;:&quot;浅色模式&quot;&#125; 主导航页在项目中新建文件夹: lib\\views 在项目中新建文件: lib\\views\\home_page.dart 在项目中新建文件夹: lib\\views\\settings 在项目中新建文件：lib\\views\\settings\\settings_page.dart 打开文件 lib\\views\\home_page.dart ， 编辑其内容如以下代码： 12345678910import &#x27;package:flutter/material.dart&#x27;;class HomePage extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return Container( child: Text(&#x27;Home&#x27;), ); &#125;&#125; 打开文件 lib\\views\\settings\\settings_page.dart， 编辑其内容如以下代码： 12345678910import &#x27;package:flutter/material.dart&#x27;;class SettingsPage extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return Container( child: Text(&#x27;Settings&#x27;), ); &#125;&#125; 打开文件 lib\\views\\tab_navigator_page.dart， 编辑其内容如以下代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:deep_sky_app/generated/l10n.dart&#x27;;import &#x27;package:deep_sky_app/views/home_page.dart&#x27;;import &#x27;package:deep_sky_app/views/settings/settings_page.dart&#x27;;class TabNavigatorPage extends StatefulWidget &#123; @override _TabNavigatorPageState createState() =&gt; _TabNavigatorPageState();&#125;class _TabNavigatorPageState extends State&lt;TabNavigatorPage&gt; &#123; int _selectedIndex = 0; List&lt;Widget&gt; widgets = [HomePage(), HomePage(), SettingsPage()]; @override Widget build(BuildContext context) &#123; return Container( child: Scaffold( body: widgets[_selectedIndex], bottomNavigationBar: BottomNavigationBar( onTap: (index) &#123; setState(() &#123; _selectedIndex = index; &#125;); &#125;, currentIndex: _selectedIndex, type: BottomNavigationBarType.fixed, items: [ BottomNavigationBarItem( icon: Icon(Icons.home_outlined), activeIcon: Icon(Icons.home), label: S.of(context).tabHome, ), BottomNavigationBarItem( icon: Icon(Icons.adb_outlined), label: S.of(context).tabProject, ), BottomNavigationBarItem( icon: Icon(Icons.account_circle_outlined), activeIcon: Icon(Icons.account_circle), label: S.of(context).settings, ), ], ), ), ); &#125;&#125; 项目运行 添加 Provider 状态管理类新建文件夹：lib\\provider, 然后新建两个状态管理文件：lib\\provider\\locale_provider.dart 和 lib\\provider\\theme_provider.dart 主题模式状态管理打开文件 lib\\provider\\theme_provider.dart, 编辑其内容如以下代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:shared_preferences/shared_preferences.dart&#x27;;import &#x27;package:deep_sky_app/generated/l10n.dart&#x27;;// 参考资料：https://omadijaya.id/flutter-dynamic-dark-mode-with-provider-and-shared-preferences/class ThemeProvider extends ChangeNotifier &#123; final String key = &#x27;theme&#x27;; // 用于保存当前主题状态的键名 // 定义用于三种主题模式的字典 Map themeModeList = &lt;String, ThemeMode&gt;&#123; &#x27;dark&#x27;: ThemeMode.dark, // 深色模式 &#x27;light&#x27;: ThemeMode.light, // 浅色模式 &#x27;system&#x27;: ThemeMode.system // 跟随系统 &#125;; SharedPreferences _preferences; String _themeMode; // 返回当前的主题模式 String get themeMode =&gt; _themeMode; // 构造方法 ThemeProvider() &#123; _themeMode = &#x27;system&#x27;; // 默认为跟随系统 _loadFromPreferences(); // 读取已有模式设置 &#125; // 返回用于显示在界面上的主题选项名称 static String getThemeModeName(String mode, context) &#123; switch (mode) &#123; case &#x27;dark&#x27;: return S.of(context).darkMode; case &#x27;light&#x27;: return S.of(context).lightMode; default: return S.of(context).autoBySystem; &#125; &#125; // 返回当前的主题模式 ThemeMode getThemeMode(String mode) &#123; return themeModeList[mode]; &#125; // 深色、浅色模式设置 ThemeData getThemeData(&#123;bool isDark = false&#125;) &#123; return ThemeData(brightness: isDark ? Brightness.dark : Brightness.light); &#125; // 初始化 SharedPreferences _initialPreferences() async &#123; if (_preferences == null) _preferences = await SharedPreferences.getInstance(); &#125; // 保存状态 _savePreferences() async &#123; await _initialPreferences(); _preferences.setString(key, _themeMode); &#125; // 读取状态 _loadFromPreferences() async &#123; await _initialPreferences(); _themeMode = _preferences.getString(key) ?? &#x27;system&#x27;; notifyListeners(); // 变更通知，在数据处理完成后执行 &#125; // 深浅色切换状态 toggleChangeTheme(val) &#123; _themeMode = val; print(&#x27;current theme mode: $_themeMode&#x27;); _savePreferences(); notifyListeners(); // 变更通知，在数据处理完成后执行 &#125;&#125; 多语言状态管理打开文件 lib\\provider\\locale_provider.dart， 编辑其内容如以下代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:shared_preferences/shared_preferences.dart&#x27;;import &#x27;package:deep_sky_app/generated/l10n.dart&#x27;;class LocaleProvider extends ChangeNotifier &#123; final String key = &#x27;locale&#x27;; // 用于保存当前语言的键名 SharedPreferences _preferences; String _language; // 当前的语言名称，例如：&#x27;zh&#x27;，&#x27;en&#x27;等 String get language =&gt; _language; // 返回当前语言名称 Locale get locale &#123; if (_language != &#x27;&#x27;) &#123; return Locale(_language); &#125; return null; &#125; // 返回用于显示在界面中的语言名字 static String localeName(String lang, context) &#123; switch (lang) &#123; case &#x27;en&#x27;: return &#x27;English&#x27;; case &#x27;zh&#x27;: // case &#x27;zh_CN&#x27;: return &#x27;简体中文&#x27;; case &#x27;&#x27;: return S.of(context).autoBySystem; &#125; &#125; // 构造方法 LocaleProvider() &#123; _language = &#x27;&#x27;; // 默认语言跟随系统 _loadFromPreferences(); &#125; // 初始化 SharedPreferences _initialPreferences() async &#123; if (_preferences == null) _preferences = await SharedPreferences.getInstance(); &#125; // 保存当前的语言名称 _savePreferences() async &#123; await _initialPreferences(); _preferences.setString(key, _language); &#125; // 读取已保存的语言名称 _loadFromPreferences() async &#123; await _initialPreferences(); _language = _preferences.getString(key) ?? &#x27;&#x27;; notifyListeners(); // 变更通知，在数据处理完成后执行 &#125; // 切换语言 toggleChangeLocale(String language) &#123; _language = language; print(&#x27;current locale: $language&#x27;); _savePreferences(); notifyListeners(); // 变更通知，在数据处理完成后执行 &#125;&#125; 修改入口文件 main.dart打开文件lib\\main.dart， 编辑其内容如以下代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:flutter_localizations/flutter_localizations.dart&#x27;;import &#x27;package:provider/provider.dart&#x27;;import &#x27;package:deep_sky_app/generated/l10n.dart&#x27;;import &#x27;package:deep_sky_app/provider/locale_provider.dart&#x27;;import &#x27;package:deep_sky_app/provider/theme_provider.dart&#x27;;import &#x27;package:deep_sky_app/views/tab_navigator_page.dart&#x27;;void main() &#123; runApp(MyApp());&#125;class MyApp extends StatelessWidget &#123; // This widget is the root of your application. @override Widget build(BuildContext context) &#123; // MultiProvider 用于管理多个 Provider return MultiProvider( providers: [ // ChangeNotifierProvider 用于对 ChangeNotifier 进行监听 ChangeNotifierProvider&lt;ThemeProvider&gt;( create: (context) =&gt; ThemeProvider()), // ChangeNotifierProvider 用于对 ChangeNotifier 进行监听 ChangeNotifierProvider&lt;LocaleProvider&gt;( create: (context) =&gt; LocaleProvider()), ], // 通过 Consumer2 来组合同时监听两个结果，&lt;&gt;内的对象数量与 Consumer 后面的数字一致 child: Consumer2&lt;ThemeProvider, LocaleProvider&gt;( builder: (context, ThemeProvider themeProvider, LocaleProvider localeProvider, child) &#123; return MaterialApp( localizationsDelegates: const [ S.delegate, GlobalMaterialLocalizations.delegate, GlobalCupertinoLocalizations.delegate, GlobalWidgetsLocalizations.delegate ], // 语言列表方式一：自动获取所有语言列表 // supportedLocales: S.delegate.supportedLocales, // 语言列表方式二：自动获取并设置一个默认语言 supportedLocales: [ const Locale(&#x27;en&#x27;, &#x27;&#x27;), ...S.delegate.supportedLocales ], // 语言列表方式三：手动添加语言列表 // supportedLocales: [ // const Locale(&#x27;zh&#x27;, &#x27;CN&#x27;), // const Locale(&#x27;en&#x27;, &#x27;US&#x27;), // ], // localeListResolutionCallback: (locale, supportedLocales) &#123; // print(locale); // 在控制台显示当前语言 // return null; // &#125;, // 插件目前不完善手动处理简繁体 // 也用于处理 zh 和 zh_CN 这样有两个不同名字的语言 localeResolutionCallback: (locale, supportLocales) &#123; // 中文 简繁体处理 if (locale?.languageCode == &#x27;zh&#x27;) &#123; if (locale?.scriptCode == &#x27;Hant&#x27;) &#123; return const Locale(&#x27;zh&#x27;, &#x27;HK&#x27;); //繁体 &#125; else &#123; return const Locale(&#x27;zh&#x27;, &#x27;CN&#x27;); //简体 &#125; &#125; return null; &#125;, // 获取 当前的语言 locale: Provider.of&lt;LocaleProvider&gt;(context, listen: false).locale, title: &#x27;Deep Sky&#x27;, // 生成应用标题 onGenerateTitle: (context) &#123; return S.of(context).appName; &#125;, // 深色、浅色主题选择 的第一种方式 // theme: themeProvider.darkMode ? dark_mode : light_mode, theme: ThemeData( primarySwatch: Colors.blue, visualDensity: VisualDensity.adaptivePlatformDensity, ), // 深色、浅色主题选择 的第二种方式的第一个选项 themeMode: themeProvider.getThemeMode( Provider.of&lt;ThemeProvider&gt;(context, listen: false).themeMode), // 深色、浅色主题选择 的第二种方式的第二个选项, 少了这个上面的第一个选项不起作用 darkTheme: ThemeData(brightness: Brightness.dark), // 设置文字大小不随系统设置改变 builder: (context, widget) &#123; return MediaQuery( data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0), child: widget); &#125;, // 主页 home: TabNavigatorPage(), ); &#125;, ), ); &#125;&#125; 设置页新建文件夹：lib\\views\\settings\\widgets 然后新建文件：lib\\views\\settings\\widgets\\account_info.dart 和 lib\\views\\settings\\widgets\\common_settings.dart 设置页的用户信息部分打开文件lib\\views\\settings\\widgets\\account_info.dart， 编辑其内容如以下代码： 123456789101112131415161718192021import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:deep_sky_app/generated/l10n.dart&#x27;;class AccountInfo extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return Container( width: MediaQuery.of(context).size.width, padding: EdgeInsets.only(top: 80, bottom: 50), child: CircleAvatar( backgroundColor: Theme.of(context).primaryColor, radius: 50, child: Text( S.of(context).login, style: TextStyle(fontSize: 20), ), ), ); &#125;&#125; 设置页的 主题模式切换和多语言切换部分打开文件lib\\views\\settings\\widgets\\common_settings.dart，编辑其内容如以下代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:provider/provider.dart&#x27;;import &#x27;package:deep_sky_app/generated/l10n.dart&#x27;;import &#x27;package:deep_sky_app/provider/locale_provider.dart&#x27;;import &#x27;package:deep_sky_app/provider/theme_provider.dart&#x27;;class CommonSettings extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return Container( // 使用 MediaQuery 获取屏幕宽度 width: MediaQuery.of(context).size.width, child: Column( // 交叉轴对齐方式 crossAxisAlignment: CrossAxisAlignment.start, children: [ Padding( padding: EdgeInsets.only(left: 15, top: 10), child: Text(S.of(context).settings), ), SizedBox( height: 10, ), Container( child: ExpansionTile( title: Row( // 主轴对齐方式 mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [ Text(S.of(context).themeMode), Text(ThemeProvider.getThemeModeName( Provider.of&lt;ThemeProvider&gt;(context).themeMode, context)), ], ), children: [ // system: 表示主题模式跟随系统 _themeModeItem(Icon(Icons.sync), &#x27;system&#x27;, context), // dark: 深色模式 _themeModeItem(Icon(Icons.brightness_2), &#x27;dark&#x27;, context), // light：浅色模式 _themeModeItem(Icon(Icons.wb_sunny_outlined), &#x27;light&#x27;, context), ], ), ), Container( child: ExpansionTile( title: Row( mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [ Text(S.of(context).settingLanguage), Text(LocaleProvider.localeName( Provider.of&lt;LocaleProvider&gt;(context).language, context)), ], ), children: [ // &#x27;&#x27;: 表示 语言跟随系统 _languageItem(&#x27;&#x27;, context), // &#x27;zh&#x27;: 表示(简体)中文 _languageItem(&#x27;zh&#x27;, context), // &#x27;en&#x27;: 表示 English _languageItem(&#x27;en&#x27;, context), ], ), ), ], ), ); &#125; // 多语言设置选项 Widget _languageItem(String lang, context) &#123; return InkWell( onTap: () &#123; // Provider 状态修改方式一： Provider.of&lt;LocaleProvider&gt;(context, listen: false) .toggleChangeLocale(lang); &#125;, child: Container( padding: EdgeInsets.only( left: 15, right: 15, top: 0, bottom: 0, ), child: Container( // 添加 ListTile 选中项的背景颜色 decoration: new BoxDecoration( color: Provider.of&lt;LocaleProvider&gt;(context).language == lang ? Theme.of(context).buttonColor : null, ), child: ListTile( leading: Icon(Icons.drag_handle), title: Container( // 缩小 leading 和 title之的间隔 transform: Matrix4.translationValues(-20, 0.0, 0.0), child: Text( LocaleProvider.localeName(lang, context), // style: TextStyle( // color: Provider.of&lt;LocaleProvider&gt;(context).language == lang // ? Theme.of(context).primaryColor // : null, // ), ), ), // title: Text(LocaleProvider.localeName(lang, context)), // trailing: Opacity( // opacity: // Provider.of&lt;LocaleProvider&gt;(context).language == lang ? 1 : 0, // child: Icon(Icons.done), // ), trailing: Provider.of&lt;LocaleProvider&gt;(context).language == lang ? Icon(Icons.done) : null, ), ), ), ); &#125; // 主题选择选项 Widget _themeModeItem(Icon icon, String mode, context) &#123; // Provider 状态修改方式二：1. Consumer&lt;ThemeProvider&gt;(builder:) return Consumer&lt;ThemeProvider&gt;( builder: (context, themeProvider, child) =&gt; InkWell( onTap: () &#123; // Provider 状态修改方式二：2. 调用 themeProvider.toggleChangeTheme(mode); &#125;, child: Container( padding: EdgeInsets.only( left: 15, right: 15, top: 0, bottom: 0, ), child: ListTile( leading: icon, title: Container( // 缩小 leading 和 title之的间隔 transform: Matrix4.translationValues(-20, 0.0, 0.0), child: Text(ThemeProvider.getThemeModeName(mode, context)), ), // trailing: Opacity( // opacity: themeProvider.themeMode == mode ? 1 : 0, // child: Icon(Icons.done), // ), trailing: themeProvider.themeMode == mode ? Icon(Icons.done) : null, ), ), ), ); &#125;&#125; 编辑设置页打开文件lib\\views\\settings\\settings_page.dart，编辑其内容如以下代码： 123456789101112131415161718192021222324252627import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:deep_sky_app/views/settings/widgets/account_info.dart&#x27;;import &#x27;package:deep_sky_app/views/settings/widgets/common_settings.dart&#x27;;class SettingsPage extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return SingleChildScrollView( child: Container( width: MediaQuery.of(context).size.width, child: Column( children: [ AccountInfo(), SizedBox( height: 5, ), CommonSettings(), SizedBox( height: 5, ), ], ), ), ); &#125;&#125; 运行项目启动项目调试，程序运行结果如下： 简体中文、浅色主题： English、深色主题： &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"flutter","slug":"flutter","permalink":"https://hujiyi.github.io/categories/flutter/"}],"tags":[{"name":"flutter","slug":"flutter","permalink":"https://hujiyi.github.io/tags/flutter/"},{"name":"provider","slug":"provider","permalink":"https://hujiyi.github.io/tags/provider/"},{"name":"shared_preferences","slug":"shared-preferences","permalink":"https://hujiyi.github.io/tags/shared-preferences/"}]},{"title":"flutter introduction part I：创建项目及多语言国际化支持","slug":"flutter-introduction-part-I","date":"2021-02-02T04:41:21.000Z","updated":"2023-02-27T07:38:42.458Z","comments":true,"path":"2021/02/02/flutter-introduction-part-I/","permalink":"https://hujiyi.github.io/2021/02/02/flutter-introduction-part-I/","excerpt":"","text":"特别说明：Flutter SDK 1.22.5 及以上版本需要依赖 Git ， 所以下面输入 flutter命令的时候，一般都是在 Git Bash 命令行窗口 中进行。 D:\\sources\\flutter_repos 是专门用于保存 Flutter 项目的文件夹。 创建项目在 D:\\sources\\flutter_repos(或其他用于保存 Flutter 项目的文件夹) 文件夹下鼠标右键，在弹出的快捷菜单中选择Git Bash Here 打开 Git Bash 命令行窗口 在打开的Git Bash 命令行窗口中输入命令： flutter create deep_sky_app 完整的命令执行过程如以下所示： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293Laohoo@DESKTOP-NUNPB7R MINGW64 /d/sources/flutter_repos$ flutter create deep_sky_appCreating project deep_sky_app... deep_sky_app\\.gitignore (created) deep_sky_app\\.idea\\libraries\\Dart_SDK.xml (created) deep_sky_app\\.idea\\libraries\\KotlinJavaRuntime.xml (created) deep_sky_app\\.idea\\modules.xml (created) deep_sky_app\\.idea\\runConfigurations\\main_dart.xml (created) deep_sky_app\\.idea\\workspace.xml (created) deep_sky_app\\.metadata (created) deep_sky_app\\android\\app\\build.gradle (created) deep_sky_app\\android\\app\\src\\main\\kotlin\\com\\example\\deep_sky_app\\MainActivity.kt (created) deep_sky_app\\android\\build.gradle (created) deep_sky_app\\android\\deep_sky_app_android.iml (created) deep_sky_app\\android\\.gitignore (created) deep_sky_app\\android\\app\\src\\debug\\AndroidManifest.xml (created) deep_sky_app\\android\\app\\src\\main\\AndroidManifest.xml (created) deep_sky_app\\android\\app\\src\\main\\res\\drawable\\launch_background.xml (created) deep_sky_app\\android\\app\\src\\main\\res\\drawable-v21\\launch_background.xml (created) deep_sky_app\\android\\app\\src\\main\\res\\mipmap-hdpi\\ic_launcher.png (created) deep_sky_app\\android\\app\\src\\main\\res\\mipmap-mdpi\\ic_launcher.png (created) deep_sky_app\\android\\app\\src\\main\\res\\mipmap-xhdpi\\ic_launcher.png (created) deep_sky_app\\android\\app\\src\\main\\res\\mipmap-xxhdpi\\ic_launcher.png (created) deep_sky_app\\android\\app\\src\\main\\res\\mipmap-xxxhdpi\\ic_launcher.png (created) deep_sky_app\\android\\app\\src\\main\\res\\values\\styles.xml (created) deep_sky_app\\android\\app\\src\\main\\res\\values-night\\styles.xml (created) deep_sky_app\\android\\app\\src\\profile\\AndroidManifest.xml (created) deep_sky_app\\android\\gradle\\wrapper\\gradle-wrapper.properties (created) deep_sky_app\\android\\gradle.properties (created) deep_sky_app\\android\\settings.gradle (created) deep_sky_app\\ios\\Runner\\AppDelegate.swift (created) deep_sky_app\\ios\\Runner\\Runner-Bridging-Header.h (created) deep_sky_app\\ios\\Runner.xcodeproj\\project.pbxproj (created) deep_sky_app\\ios\\Runner.xcodeproj\\xcshareddata\\xcschemes\\Runner.xcscheme (created) deep_sky_app\\ios\\.gitignore (created) deep_sky_app\\ios\\Flutter\\AppFrameworkInfo.plist (created) deep_sky_app\\ios\\Flutter\\Debug.xcconfig (created) deep_sky_app\\ios\\Flutter\\Release.xcconfig (created) deep_sky_app\\ios\\Runner\\Assets.xcassets\\AppIcon.appiconset\\Contents.json (created) deep_sky_app\\ios\\Runner\\Assets.xcassets\\AppIcon.appiconset\\Icon-App-1024x1024@1x.png (created) deep_sky_app\\ios\\Runner\\Assets.xcassets\\AppIcon.appiconset\\Icon-App-20x20@1x.png (created) deep_sky_app\\ios\\Runner\\Assets.xcassets\\AppIcon.appiconset\\Icon-App-20x20@2x.png (created) deep_sky_app\\ios\\Runner\\Assets.xcassets\\AppIcon.appiconset\\Icon-App-20x20@3x.png (created) deep_sky_app\\ios\\Runner\\Assets.xcassets\\AppIcon.appiconset\\Icon-App-29x29@1x.png (created) deep_sky_app\\ios\\Runner\\Assets.xcassets\\AppIcon.appiconset\\Icon-App-29x29@2x.png (created) deep_sky_app\\ios\\Runner\\Assets.xcassets\\AppIcon.appiconset\\Icon-App-29x29@3x.png (created) deep_sky_app\\ios\\Runner\\Assets.xcassets\\AppIcon.appiconset\\Icon-App-40x40@1x.png (created) deep_sky_app\\ios\\Runner\\Assets.xcassets\\AppIcon.appiconset\\Icon-App-40x40@2x.png (created) deep_sky_app\\ios\\Runner\\Assets.xcassets\\AppIcon.appiconset\\Icon-App-40x40@3x.png (created) deep_sky_app\\ios\\Runner\\Assets.xcassets\\AppIcon.appiconset\\Icon-App-60x60@2x.png (created) deep_sky_app\\ios\\Runner\\Assets.xcassets\\AppIcon.appiconset\\Icon-App-60x60@3x.png (created) deep_sky_app\\ios\\Runner\\Assets.xcassets\\AppIcon.appiconset\\Icon-App-76x76@1x.png (created) deep_sky_app\\ios\\Runner\\Assets.xcassets\\AppIcon.appiconset\\Icon-App-76x76@2x.png (created) deep_sky_app\\ios\\Runner\\Assets.xcassets\\AppIcon.appiconset\\Icon-App-83.5x83.5@2x.png (created) deep_sky_app\\ios\\Runner\\Assets.xcassets\\LaunchImage.imageset\\Contents.json (created) deep_sky_app\\ios\\Runner\\Assets.xcassets\\LaunchImage.imageset\\LaunchImage.png (created) deep_sky_app\\ios\\Runner\\Assets.xcassets\\LaunchImage.imageset\\LaunchImage@2x.png (created) deep_sky_app\\ios\\Runner\\Assets.xcassets\\LaunchImage.imageset\\LaunchImage@3x.png (created) deep_sky_app\\ios\\Runner\\Assets.xcassets\\LaunchImage.imageset\\README.md (created) deep_sky_app\\ios\\Runner\\Base.lproj\\LaunchScreen.storyboard (created) deep_sky_app\\ios\\Runner\\Base.lproj\\Main.storyboard (created) deep_sky_app\\ios\\Runner\\Info.plist (created) deep_sky_app\\ios\\Runner.xcodeproj\\project.xcworkspace\\contents.xcworkspacedata (created) deep_sky_app\\ios\\Runner.xcodeproj\\project.xcworkspace\\xcshareddata\\IDEWorkspaceChecks.plist (created) deep_sky_app\\ios\\Runner.xcodeproj\\project.xcworkspace\\xcshareddata\\WorkspaceSettings.xcsettings (created) deep_sky_app\\ios\\Runner.xcworkspace\\contents.xcworkspacedata (created) deep_sky_app\\ios\\Runner.xcworkspace\\xcshareddata\\IDEWorkspaceChecks.plist (created) deep_sky_app\\ios\\Runner.xcworkspace\\xcshareddata\\WorkspaceSettings.xcsettings (created) deep_sky_app\\lib\\main.dart (created) deep_sky_app\\deep_sky_app.iml (created) deep_sky_app\\pubspec.yaml (created) deep_sky_app\\README.md (created) deep_sky_app\\test\\widget_test.dart (created) deep_sky_app\\web\\favicon.png (created) deep_sky_app\\web\\icons\\Icon-192.png (created) deep_sky_app\\web\\icons\\Icon-512.png (created) deep_sky_app\\web\\index.html (created) deep_sky_app\\web\\manifest.json (created)Running &quot;flutter pub get&quot; in deep_sky_app... 2,585msWrote 78 files.All done!In order to run your application, type: $ cd deep_sky_app $ flutter runTo enable null safety, type: $ cd deep_sky_app $ dart migrate --apply-changesYour application code is in deep_sky_app\\lib\\main.dart. 名为 deep_sky_app 的项目创建成功。使用以下两个命令进入项目文件夹，并使用 Visual Studio Code 打开项目： 12cd deep_sky_appcode . 使用 Intl 添加多语言国际化支持在 Visual Studio Code 中安装 Flutter Intl 插件(如果还没有安装该插件的话) 在项目的 pubspec.yaml 文件中增加以下包依赖： Intl 的最新版本查询： https://pub.dev/packages/intl intl_translation 的最新版本查询：https://pub.dev/packages/intl_translation 123456789dependencies: # 国际化 flutter_localizations: sdk: flutter intl: ^0.16.1 使用 Intl 初始化项目在Visual Studio Code中打开命令面板: View -&gt; Command Palette… 在打开的命令面板中输入 flutter intl, 在下拉的命令项中选择：Flutter Intl: Initialize， 开始执行项目的初始化。 初始化执行成功后，在 pubspec.yaml 末尾会自动增加： 123flutter_intl: enabled: true 同时在 lib 文件夹下生成 generated 和 l10n 两个文件夹： generated包下的intl目录默认生成 messages_all.dart 和 messages_en.dart 文件，messages开头的文件无需手动修改，是自动生成的。 generated 包下的 I10n.dart 是 Localizations和 Delegate 的实现，无需手动修改，是自动生成的。 l10n包下存在一个intl_en.arb文件，文案存放在此处。 ARB文件扩展名为：Application Resource Bundle 意为应用程序资源包，并得到Google的支持，每个.arb文件都包含一个JSON表，该表从资源ID映射到本地化值，文件名包含已为其转换值的语言环境。 添加语言在 Visual Studio Code 中打开命令面板: View -&gt; Command Palette… 在打开的命令面板中输入 flutter intl, 在下拉的命令项中选择：Flutter Intl: Add Locale。 在命令面板中输入新的语言名称：zh 添加新的语言成功后，在 generated\\intl 文件夹下多了一个名为messages_zh.dart 的文件 在 l10n 文件夹下多了一个名为 intl_zh.arb 的文件 添加系统国际化支持在 intl_en.arb 和 intl_zh.arb 下添加文案 打开文件lib\\l10n\\intl_en.arb，修改内容如以下代码所示： 123&#123; &quot;appName&quot;:&quot;Deep Sky&quot;&#125; 打开文件lib\\l10n\\intl_zh.arb，修改内容如以下代码所示： 123&#123; &quot;appName&quot;:&quot;深处天空&quot;&#125; 打开文件 lib\\main.dart，在文件的前面添加以下两个引用： 12import &#x27;package:flutter_localizations/flutter_localizations.dart&#x27;;import &#x27;package:deep_sky_app/generated/l10n.dart&#x27;; 然后在 MaterialApp 中添加如以下所示代码： 1234567891011MaterialApp( ... localizationsDelegates: [ S.delegate, GlobalMaterialLocalizations.delegate, GlobalWidgetsLocalizations.delegate, GlobalCupertinoLocalizations.delegate, ], supportedLocales:S.delegate.supportedLocales, ...) 解释下上面这段代码出现的变量: localizationsDelegates 列表中的元素是生成本地化值集合的工厂。 S.delegate 项目的本地化委托类，插件自动生成，它会根据你的arb文件自动生成对应的函数。 GlobalMaterialLocalizations.delegate 为Material Components库提供了本地化的字符串和其他值。 GlobalCupertinoLocalizations.delegate 为Cupertino Components库提供了本地化的字符串和其他值。 GlobalWidgetsLocalizations.delegate定义widget默认的文本方向，从左到右或从右到左。 supportedLocales支持的本地化。 S.delegate.supportedLocales 项目支持的本地化，插件自动生成，它会在你添加arb文件时自动更新你的支持的本地化。 在组件中使用国际化的值在需要配置国际化的地方调用 S.of(context).key 即可. 没有context 时可以使用 S.current.key 。 当不能使用 S.of(context).key 进行调用时，会看到类似以下的错误信息： 12345════════ Exception caught by widgets library ═══════════════════════════════════The following NoSuchMethodError was thrown building MyApp(dirty):The getter &#x27;appName&#x27; was called on null.Receiver: nullTried calling: appName 将 MaterialApp 中 title 的值修改为：S.of(context).appName (如果提示出错，则改为：S.current.appName) 修改完成后 lib\\main.dart 文件中前段的代码如以下所示： 123456789101112131415161718192021222324252627282930313233343536373839404142import &#x27;package:flutter/material.dart&#x27;;import &#x27;package:flutter_localizations/flutter_localizations.dart&#x27;;import &#x27;package:deep_sky_app/generated/l10n.dart&#x27;;void main() &#123; runApp(MyApp());&#125;class MyApp extends StatelessWidget &#123; // This widget is the root of your application. @override Widget build(BuildContext context) &#123; return MaterialApp( localizationsDelegates: const [ S.delegate, GlobalMaterialLocalizations.delegate, GlobalCupertinoLocalizations.delegate, GlobalWidgetsLocalizations.delegate ], supportedLocales: S.delegate.supportedLocales, localeListResolutionCallback: (locales, supportedLocales) &#123; print(locales); // 在控制台显示当前语言 return; &#125;, title: &#x27;Deep Sky&#x27;, // 生成应用标题 onGenerateTitle: (context) &#123; // 在需要配置国际化的地方调用 S.of(context).key 即可. // 没有context 时可以使用 S.current.key return S.of(context).appName; &#125;, theme: ThemeData( primarySwatch: Colors.blue, visualDensity: VisualDensity.adaptivePlatformDensity, ), home: MyHomePage(title: &#x27;Flutter demo&#x27;), ); &#125;&#125; 运行项目在 Visual Studio Code 菜单中选择: Run -&gt; Start Debugging，运行成功后，选择手机（或模拟器）上的程序切换，在APP的缩略图上看到显示的标题文字。 &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"flutter","slug":"flutter","permalink":"https://hujiyi.github.io/categories/flutter/"}],"tags":[{"name":"flutter","slug":"flutter","permalink":"https://hujiyi.github.io/tags/flutter/"},{"name":"多语言","slug":"多语言","permalink":"https://hujiyi.github.io/tags/%E5%A4%9A%E8%AF%AD%E8%A8%80/"},{"name":"国际化","slug":"国际化","permalink":"https://hujiyi.github.io/tags/%E5%9B%BD%E9%99%85%E5%8C%96/"}]},{"title":"Visual Studio Code 中使用 flutter_intl 实现 Flutter 应用国际化","slug":"use-flutter-intl-to-internationalize","date":"2021-01-26T06:08:09.000Z","updated":"2023-02-27T07:08:27.659Z","comments":true,"path":"2021/01/26/use-flutter-intl-to-internationalize/","permalink":"https://hujiyi.github.io/2021/01/26/use-flutter-intl-to-internationalize/","excerpt":"","text":"·Flutter Intl· 插件，包含用于处理国际化&#x2F;本地化消息，日期和数字格式和解析，双向文本以及其他国际化问题。 安装 Flutter Intl 插件 在项目的 pubspec.yaml 文件中添加依赖： 123456dependencies: flutter: sdk: flutter # 国际化 flutter_localizations: sdk: flutter 初始化项目在Visual Studio Code中打开命令面板: View -&gt; Command Palette… 在打开的命令面板中输入 flutter intl, 在下拉的命令项中选择：Flutter Intl: Initialze， 开始执行项目的初始化。 初始化执行成功后，会自动在 pubspec.yaml 末尾增加： 12flutter_intl: enabled: true 同时在 lib 文件夹下生成 generated 和 l10n 两个文件夹 generated包下的intl目录默认生成 messages_all.dart 和 messages_en.dart 文件，messages开头的文件无需手动修改，是自动生成的。 generated 包下的 I10n.dart 是 Localizations和 Delegate 的实现，无需手动修改，是自动生成的。 l10n包下存在一个intl_en.arb文件，文案存放在此处。 ARB文件扩展名为：Application Resource Bundle 意为应用程序资源包，并得到Google的支持，每个.arb文件都包含一个JSON表，该表从资源ID映射到本地化值，文件名包含已为其转换值的语言环境。 添加语言在Visual Studio Code中打开命令面板: View -&gt; Command Palette… 在打开的命令面板中输入 flutter intl, 在下拉的命令项中选择：Flutter Intl: Add Locale。 在命令面板中输入中文的语言名称：zh 添加语言成功后，在 generated\\intl 文件夹下多了一个名为messages_zh.dart 的文件 在 l10n 文件夹下多了一个名为 intl_zh.arb 的文件 添加系统国际化支持MaterialApp 修改如下： 1234567891011121314151617181920212223242526272829303132MaterialApp( ... localizationsDelegates: [ S.delegate, GlobalMaterialLocalizations.delegate, GlobalWidgetsLocalizations.delegate, GlobalCupertinoLocalizations.delegate, ], // 将 en设置为第一项, 没有适配语言时, 英语为首选项 supportedLocales: [ const Locale(&#x27;en&#x27;, &#x27;&#x27;), ...S.delegate.supportedLocales ], // 插件目前不完善手动处理简繁体 localeResolutionCallback: (locale, supportLocales) &#123; // 中文 简繁体处理 if (locale?.languageCode == &#x27;zh&#x27;) &#123; // zh-CN：地区限制匹配规范，表示用在中国大陆区域的中文。 // 包括各种大方言、小方言、繁体、简体等等都可以被匹配到。 if (locale?.scriptCode == &#x27;Hant&#x27;) &#123; // zh-Hant和zh-CHT相同相对应; return const Locale(&#x27;zh&#x27;, &#x27;HK&#x27;); //繁体 &#125; else &#123; // zh-Hans：语言限制匹配规范，表示简体中文 return const Locale(&#x27;zh&#x27;, &#x27;CN&#x27;); //简体 &#125; &#125; return null; &#125;, ...) 解释下上面这段代码出现的变量 localizationsDelegates 列表中的元素是生成本地化值集合的工厂。 S.delegate 项目的本地化委托类，插件自动生成，它会根据你的arb文件自动生成对应的函数。 GlobalMaterialLocalizations.delegate 为Material Components库提供了本地化的字符串和其他值。 GlobalCupertinoLocalizations.delegate 为Cupertino Components库提供了本地化的字符串和其他值。 GlobalWidgetsLocalizations.delegate定义widget默认的文本方向，从左到右或从右到左。 supportedLocales支持的本地化。 S.delegate.supportedLocales 项目支持的本地化，插件自动生成，它会在你添加arb文件时自动更新你的支持的本地化。 在 intl_en.arb 和 intl_zh.arb 下添加文案 添加一个 title 文案，intl_en.arb： 123&#123; &quot;title&quot;: &quot;hello word&quot;&#125; intl_zh.arb： 123&#123; &quot;title&quot;: &quot;你好&quot;&#125; 保存修改，generated 目录下相关文件将会重新生成。 使用Flutter Intl普通使用 12&#123;&quot;content&quot;: &quot;内容&quot;&#125;S.of(context).content 占位 12&#123;&quot;welcome&quot;: &quot;welcome &#123;name&#125;&quot;&#125;S.of(context).welcome(&quot;phoenixsky&quot;) 重复占位 12&#123;&quot;goodStudy&quot;: &quot;&#123;good&#125;&#123;good&#125;学习,&#123;day&#125;&#123;day&#125;向上&quot;&#125;S.of(context).goodStudy(&quot;好&quot;, &quot;天&quot;) 复数形式 12&#123;&quot;getMessageTips&quot;: &quot;&#123;howMany, plural, zero&#123;You have no message&#125; one&#123;You have 1 message&#125; other&#123;You have &#123;howMany&#125; messages&#125;&#125;&quot;&#125;S.of(context).getMessageTips(2) 参考:https://github.com/localizely/flutter-intl-plugin-sample-app &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"flutter","slug":"flutter","permalink":"https://hujiyi.github.io/categories/flutter/"}],"tags":[{"name":"flutter","slug":"flutter","permalink":"https://hujiyi.github.io/tags/flutter/"},{"name":"国际化","slug":"国际化","permalink":"https://hujiyi.github.io/tags/%E5%9B%BD%E9%99%85%E5%8C%96/"}]},{"title":"创建基于 Vuetify 和 leancloud 的 Vue.js 应用程序(二)","slug":"create-a-vue-app-based-vuetify-and-leancloud-part-II","date":"2021-01-20T10:02:40.000Z","updated":"2022-10-11T01:40:12.872Z","comments":true,"path":"2021/01/20/create-a-vue-app-based-vuetify-and-leancloud-part-II/","permalink":"https://hujiyi.github.io/2021/01/20/create-a-vue-app-based-vuetify-and-leancloud-part-II/","excerpt":"","text":"路由规划本项目在实现的是一个论坛网站，网站划分为三个部分: 前台用户界面：主要是论坛的主题；主题的详细内容及评论； 帐号管理界面：主要是注册、登录等功能； 后台管理界面：主要是主题的管理；评论内容的管理等功能； 修改路由文件打开文件：src/router/index.js， 编辑其内容如以下代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788import Vue from &#x27;vue&#x27;;import VueRouter from &#x27;vue-router&#x27;;Vue.use(VueRouter);const routes = [ &#123; path: &#x27;/&#x27;, // 前台页面模块及其嵌套子路由 component: () =&gt; import(&#x27;@/views/home/Index.vue&#x27;), // 父路由指向的文件一般用于整个模块布局 children: [ &#123; path: &#x27;&#x27;, // 此处实际访问路径为父子path的结合: / alias: &#x27;home&#x27;, // alias（别名）相当于第二个path， 类似重定向的效果, 指向实际路径： /home name: &#x27;home&#x27;, // 命名路由 component: () =&gt; import(&#x27;@/views/home/pages/TopicList.vue&#x27;), // 指向的实际文件 &#125;, &#123; path: &#x27;topicdetails/:id&#x27;, // 此处实际访问路径为父子path的结合: /topicdetails/:id name: &#x27;topic-details&#x27;, // 命令路由建议使用 短横线命名 或 Pascal 命名 component: () =&gt; import(&#x27;@/views/home/pages/TopicDetails.vue&#x27;), &#125;, ] &#125;, &#123; path: &#x27;/dashboard&#x27;, // 后台管理模块及嵌套子路由 component: () =&gt; import(&#x27;@/views/dashboard/Index.vue&#x27;), // 父路由指向的文件一般用于整个模块布局 children: [ &#123; path: &#x27;&#x27;, // 此处实际访问路径为父子path的结合: /dashboard/ alias: &#x27;topiclist&#x27;, // 别名指向实际路径: /dashboard/topiclist name: &#x27;topic-manager&#x27;, component: () =&gt; import(&#x27;@/views/dashboard/pages/TopicManager.vue&#x27;), &#125;, &#123; path: &#x27;commentclist&#x27;, // 此处实际访问路径为父子path的结合: /dashboard/commentclist name: &#x27;comment-manager&#x27;, component: () =&gt; import(&#x27;@/views/dashboard/pages/CommentManager.vue&#x27;), &#125;, &#123; path: &#x27;createtopic&#x27;, // 此处实际访问路径为父子path的结合: /dashboard/createtopic name: &#x27;create-topic&#x27;, component: () =&gt; import(&#x27;@/views/dashboard/pages/CreateTopic.vue&#x27;), &#125;, &#123; // 动态路由， 冒号后面的 id 为传递参数的变量名 // 例如：/dashboard/createtopic/5 , 则参数值 5， 会以变量名 id 传递进去 // 在目标组件可以用 this.$route.params.id 来接收这个值 path: &#x27;edittopic/:id&#x27;, // 实际指向路径为: /dashboard/createtopic/:id, name: &#x27;edit-topic&#x27;, component: () =&gt; import(&#x27;@/views/dashboard/pages/EditTopic.vue&#x27;), &#125;, ] &#125;, &#123; path: &#x27;/account&#x27;, // 账号模块及其嵌套子路由 component: () =&gt; import(&#x27;@/views/account/Index.vue&#x27;), // 父路由指向的文件一般用于整个模块布局 children: [ &#123; path: &#x27;&#x27;, // 此处实际访问路径为: /account alias: &#x27;login&#x27;, // 别名指向实际路径：/account/login name: &#x27;login&#x27;, component: () =&gt; import(&#x27;@/views/account/pages/Login.vue&#x27;), &#125;, &#123; path: &#x27;signup&#x27;, // 此处实际访问路径为父子path的结合: /account/signup name: &#x27;signup&#x27;, component: () =&gt; import(&#x27;@/views/account/pages/SignUp.vue&#x27;), &#125;, ] &#125;,]const router = new VueRouter(&#123; routes&#125;);// 使用路由拦截保存跳转到登录页的地址，登录成功后跳转回该页(回跳功能在登录页实现)router.beforeEach((to, from, next) =&gt; &#123; // 如果 跳转的目标 path 是登录页（看上面的路由设置中对应的path ） if (to.path == &#x27;/account&#x27; || to.path == &#x27;/account/login&#x27;) &#123; // 保存当前路由， 用于登录成功后跳转到登录前的页面 localStorage.setItem(&quot;preRoute&quot;, router.currentRoute.fullPath); &#125; next();&#125;);export default router; 创建与路由对应的文件夹及文件分别创建以下三个文件夹： src/views/home：存放前台用户界面的 vue 文件； src/views/account：存放用户帐号相关的 vue 文件； src/views/dashboard：存放后台管理界面的 vue 文件； 分别在以上三个文件夹各添加一个 Index.vue 文件，用于该模块的页面布局。 分别在以上三个文件夹内各添加一个 pages 文件夹，并在里面创建各模块所需的视图文件。 具体的各个文件请参照路由 src/router/index.js 中各个 component: () =&gt; import(&#39;&#39;) 内的文件路径进行创建。 创建完毕后的项目结构如下图所示： 编辑 App.vue打开文件： src/App.vue， 编辑其内容如以下代码： 123456789101112131415161718&lt;template&gt; &lt;v-app&gt; &lt;!-- 路由出口 --&gt; &lt;!-- 路由匹配到的组件将渲染在这里 --&gt; &lt;router-view /&gt; &lt;/v-app&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;App&quot;, data: () =&gt; (&#123; // &#125;),&#125;;&lt;/script&gt; 在上面的代码中, 标签 v-app 是所有应用都需要的组件。 这是 Vuetify 组件和功能的挂载点，并确保它将默认的应用 变体 （dark&#x2F;light）传递给子组件，并可以保证它将默认的应用程序变种（暗色或亮色）传递给子组件，还可以保证跨浏览器支持 Safari 等浏览器中某些点击事件。v-app 应该在应用程序中仅使用一次。 &lt;router-view /&gt; 是路由出口，用于渲染路由匹配到的组件。 在本例中使用了两层的嵌套路由配置，App.vue里面的 &lt;router-view /&gt; 是最顶层的出口，渲染最高级路由匹配到的组件。 对于嵌套的二级路由，则需要在每个模块的 Index.vue 文件中再添加一个 &lt;router-view /&gt; 用于渲染匹配到的组件。 前台用户界面模块布局打开文件: src/views/home/Index.vue, 编辑其内容如以下代码: 123456789101112131415&lt;template&gt; &lt;div&gt;Home&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;home&quot;, data: () =&gt; (&#123; // &#125;),&#125;;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 多语言国际化Vue I18n 是 Vue.js 的国际化插件, Vuetify 支持其组件的语言国际化 (i18n), 可以非常容易地将Vue I18n与 Vuetify 进行集成。 安装多语言国际化组件在控制台输入命令：yarn add vue-i18n 安装的过程显示如下: 12345678910111213141516171819202122PS D:\\sources\\vue_repos\\mad-world-app&gt; yarn add vue-i18nyarn add v1.22.5[1/4] Resolving packages...[2/4] Fetching packages...info fsevents@2.3.1: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@2.3.1&quot; is an optional dependency and failed compatibility check. Excluding it from installation.info fsevents@1.2.13: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@1.2.13&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...warning &quot; &gt; sass-loader@8.0.2&quot; has unmet peer dependency &quot;webpack@^4.36.0 || ^5.0.0&quot;.warning &quot;vue-cli-plugin-vuetify &gt; null-loader@3.0.0&quot; has unmet peer dependency &quot;webpack@^4.3.0&quot;.warning &quot; &gt; vuetify-loader@1.6.0&quot; has unmet peer dependency &quot;webpack@^4.0.0&quot;.[4/4] Building fresh packages...success Saved lockfile.success Saved 1 new dependency.info Direct dependencies└─ vue-i18n@8.22.4info All dependencies└─ vue-i18n@8.22.4Done in 78.80s. 添加国际化语言包文件在项目中创建文件夹：src/locale 添加 English 的语言文件：src/locale/en.js， 编辑其内容如以下代码： 123456789101112131415161718import en from &#x27;vuetify/es5/locale/en&#x27;;export default &#123; label: &#x27;English&#x27;, //page login login: &#x27;Log In&#x27;, signup: &#x27;Sign Up&#x27;, username: &#x27;Username&#x27;, password: &#x27;Password&#x27;, login_account: &#x27;Login accoount&#x27;, // menu menu: &#123; home: &#x27;Home&#x27;, dashboard: &#x27;Dashboard&#x27;, &#125;, // ...en,&#125; 创建简体中文的语言文件：src/locale/zh-Hans.js, 编辑其内容如以下代码： 123456789101112131415161718import zhHans from &#x27;vuetify/es5/locale/zh-Hans&#x27;; // 导入Vuetify 自带的简体中文语言包export default &#123; label: &#x27;简体中文&#x27;, // 登录页 login: &#x27;登录&#x27;, signup: &#x27;注册&#x27;, username: &#x27;用户名&#x27;, password: &#x27;密码&#x27;, login_account: &#x27;登录帐户&#x27;, // 菜单 menu: &#123; home: &#x27;首页&#x27;, dashboard: &#x27;仪表盘&#x27;, &#125;, // 展开 简体中文语言包的所有项目 ...zhHans,&#125; 如果还需要其他的语言文件，添加相应的文件并按照上面的格式进行修改即可。 国际化的配置文件打开 Vuetify 的配置文件： src/plugins/vuetify.js&#96;， 修改其内容如以下代码： 1234567891011121314151617import Vue from &#x27;vue&#x27;;import Vuetify from &#x27;vuetify/lib/framework&#x27;;// @ 是项目中文件夹 src 的别名import zhHans from &#x27;@/locale/zh-Hans&#x27;; // 导入简体中文语言import en from &#x27;@/locale/en&#x27;; // 导入English语言Vue.use(Vuetify);export default new Vuetify(&#123; lang: &#123; locales: &#123; zhHans, en &#125;, // 所有可用的语言 current: &#x27;en&#x27;, // 当前语言 &#125;&#125;); 添加多语言选择菜单组件添加新文件：src/components/LocaleLanguage.vue，编辑其内容如以下代码所示： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;template&gt; &lt;div&gt; &lt;!-- 多语言选择菜单 --&gt; &lt;v-menu offset-y origin=&quot;center center&quot; class=&quot;elelvation-1&quot; transition=&quot;scale-transition&quot; &gt; &lt;template v-slot:activator=&quot;&#123; on &#125;&quot;&gt; &lt;v-btn text slot=&quot;activator&quot; v-on=&quot;on&quot;&gt; &lt;v-icon medium&gt;mdi-translate&lt;/v-icon&gt; &lt;!-- 显示当前语言名称 --&gt; &lt;span class=&quot;ml-2&quot;&gt; &#123;&#123; localeText &#125;&#125; &lt;/span&gt; &lt;v-icon small&gt;mdi-menu-down&lt;/v-icon&gt; &lt;/v-btn&gt; &lt;/template&gt; &lt;!-- 显示所有语言包组成的下拉菜单 --&gt; &lt;v-list&gt; &lt;v-list-item-group v-model=&quot;$vuetify.lang.current&quot;&gt; &lt;v-list-item @click=&quot;handleChangeLocale(item)&quot; v-for=&quot;item in availableLanguages&quot; :key=&quot;item.value&quot; :value=&quot;item.value&quot; &gt; &lt;v-list-item-title v-text=&quot;item.text&quot; /&gt; &lt;/v-list-item&gt; &lt;/v-list-item-group&gt; &lt;/v-list&gt; &lt;/v-menu&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;locale-language&quot;, methods: &#123; // 设置当前语言 handleChangeLocale(&#123; value &#125;) &#123; this.$vuetify.lang.current = value; &#125;, &#125;, computed: &#123; // 遍历并获取项目中的所有语言包 availableLanguages() &#123; const &#123; locales &#125; = this.$vuetify.lang; // 所有的语言，来自 src/plugins/vuetify.js 中的配置 return Object.keys(locales).map((lang) =&gt; &#123; return &#123; text: locales[lang].label, // 语言包显示的名字 value: lang, // 语言包的值 &#125;; &#125;); &#125;, // 当前语言, 用于语言切换菜单中显示的当前语言名字 localeText() &#123; const find = this.availableLanguages.find( (item) =&gt; item.value === this.$vuetify.lang.current ); return find.text; &#125;, &#125;,&#125;;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 在需要切换多语言的地方，添加对 LocaleLanguage 组件的引用和注册，并调用该组件即可(这个部分将在后台管理和前台页面完成)。 使用多语言国际化功能在其他需要使用多语言功能的地方，可以通过类似 &#123;&#123; $vuetify.lang.t(\"$vuetify.label\") &#125;&#125; 的形式来使用事先在 语言包中定义好的名字，这里的 label 就是在语言包中定义好的变量。 &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/categories/vue-js/"}],"tags":[{"name":"vuetify","slug":"vuetify","permalink":"https://hujiyi.github.io/tags/vuetify/"},{"name":"leancloud","slug":"leancloud","permalink":"https://hujiyi.github.io/tags/leancloud/"}]},{"title":"创建基于 Vuetify 和 leancloud 的 Vue.js 应用程序(一)","slug":"create-a-vue-app-based-vuetify-and-leancloud-part-I","date":"2021-01-20T04:41:30.000Z","updated":"2022-10-11T01:40:12.857Z","comments":true,"path":"2021/01/20/create-a-vue-app-based-vuetify-and-leancloud-part-I/","permalink":"https://hujiyi.github.io/2021/01/20/create-a-vue-app-based-vuetify-and-leancloud-part-I/","excerpt":"","text":"假设各位的电脑已经安装好配置了相应的开发环境： node.js yarn @vue&#x2F;cli Visual Studio Code 创建项目包管理工具 npm 和 yarn npm 和 yarn 都是包管理工具， npm 是node.js自带的，yarn 需要额外安装。在使用一段时间之后，我现在比较喜欢使用 yarn, 至于优点，网上列出来的主要有这么几个：速度快、安装版本统一、输出信息更简洁等等。 所以在下面的操作过程中，基本上就按照自己的习惯使用yarn 来完成，如果自己不习惯这个命令的话，也可以自行使用相应的 npm 命令来操作。只要得到的结果一样就可以了。 Vue.js 2.x 和 Vue.js 3.x 的选择 Vue.js 3.x 的正式版发布已经有一段时间了，而且和 Vue.js 2.x 相比变化非常大，这就导致了现在很多和 Vue.js配套的库，特别是和 UI 有关的库大部分都还没有来得及未完成新版本的适配。虽然以后肯定是会升级到 Vue.js 3.x，但就目前阶段来说，继续使用 Vue.js 2.x 来开发项目不失为一个明智的选择。 使用 @vue&#x2F;cli 创建项目打开Powershell窗口首先，我在自己的电脑建了一个专门的文件夹 D:\\sources\\vue_repos 用来存放 Vue.js 项目。按住Shift键，然后在该文件夹空白处点鼠标右键，在弹出的快捷菜单中选择 在此处打开Powershell窗口(s)。（打开CMD窗口中完成以下命令也是一样的） 创建项目 mad-world-app在Powershell窗口 中输入命令：vue create mad-world-app mad-world-app 为项目名称，请把它替换为你自己的项目名。 在 Please pick a preset(请选择一个预设) 中选择 Manually select features(手动选择项目): 12345Vue CLI v4.5.10? Please pick a preset: Default ([Vue 2] babel, eslint) Default (Vue 3 Preview) ([Vue 3] babel, eslint)&gt; Manually select features 在Check the features needed for your project()中选择以下几项： Choose Vue version Babel Router Vuex 取消原来默认选中的 Linter / Formatter(当然你已经会使用这一项就选上，不知道这一项是做什么的，最好不要选) 以下是选择后的结果： 12345678910111213Vue CLI v4.5.10? Please pick a preset: Manually select features? Check the features needed for your project: (*) Choose Vue version (*) Babel ( ) TypeScript ( ) Progressive Web App (PWA) Support (*) Router (*) Vuex ( ) CSS Pre-processors&gt;( ) Linter / Formatter ( ) Unit Testing ( ) E2E Testing 在 Choose a version of Vue.js that you want to start the project with (Use arrow keys)(选择项目的 Vue.js 版本) 选择 2.x 123456Vue CLI v4.5.10? Please pick a preset: Manually select features? Check the features needed for your project: Choose Vue version, Babel, Router, Vuex? Choose a version of Vue.js that you want to start the project with (Use arrow keys)&gt; 2.x 3.x (Preview) 在 Use history mode for router?(路由使用history模式) 中回答 n，不使用history模式。(当然了，这一项目y或n都没有任何影响，只是个人的习惯而已) 12345Vue CLI v4.5.10? Please pick a preset: Manually select features? Check the features needed for your project: Choose Vue version, Babel, Router, Vuex? Choose a version of Vue.js that you want to start the project with 2.x? Use history mode for router? (Requires proper server setup for index fallback in production) (Y/n)n 在Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys) (选择Babel, ESLint 等等第三方包的配置文件) 中选择 In dedicated config files(在专用的配置文件中) 12345678Vue CLI v4.5.10? Please pick a preset: Manually select features? Check the features needed for your project: Choose Vue version, Babel, Router, Vuex? Choose a version of Vue.js that you want to start the project with 2.x? Use history mode for router? (Requires proper server setup for index fallback in production) No? Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys)&gt; In dedicated config files In package.json 在Save this as a preset for future projects? (保存刚才的选择到项目预设) 中回答 n。 以后建项目的时候如果确定回答和上面的完全一样的，也可以回答y，把刚才的选择项都存为一个预设，以后可以使用该预设完成项目的创建。 对于初学者来说，多做几次才能熟悉操作，所以建议不存预设，给自己一个练习的机会。 1234567Vue CLI v4.5.10? Please pick a preset: Manually select features? Check the features needed for your project: Choose Vue version, Babel, Router, Vuex? Choose a version of Vue.js that you want to start the project with 2.x? Use history mode for router? (Requires proper server setup for index fallback in production) No? Where do you prefer placing config for Babel, ESLint, etc.? In dedicated config files? Save this as a preset for future projects? (y/N)n 完成了创建项目的所有选项，创建项目的过程显示如以下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253PS D:\\sources\\vue_repos&gt; vue create mad-world-appVue CLI v4.5.10? Please pick a preset: Manually select features? Check the features needed for your project: Choose Vue version, Babel, Router, Vuex? Choose a version of Vue.js that you want to start the project with 2.x? Use history mode for router? (Requires proper server setup for index fallback in production) No? Where do you prefer placing config for Babel, ESLint, etc.? In dedicated config files? Save this as a preset for future projects? NoVue CLI v4.5.10✨ Creating project in D:\\sources\\vue_repos\\mad-world-app.⚙️ Installing CLI plugins. This might take a while...yarn install v1.22.5info No lockfile found.[1/4] Resolving packages...[2/4] Fetching packages...info fsevents@2.3.1: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@2.3.1&quot; is an optional dependency and failed compatibility check. Excluding it from installation.info fsevents@1.2.13: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@1.2.13&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...success Saved lockfile.Done in 22.18s.🚀 Invoking generators...📦 Installing additional dependencies...yarn install v1.22.5[1/4] Resolving packages...[2/4] Fetching packages...info fsevents@2.3.1: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@2.3.1&quot; is an optional dependency and failed compatibility check. Excluding it from installation.info fsevents@1.2.13: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@1.2.13&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...[4/4] Building fresh packages...success Saved lockfile.Done in 5.81s.⚓ Running completion hooks...📄 Generating README.md...🎉 Successfully created project mad-world-app.👉 Get started with the following commands: $ cd mad-world-app $ yarn serve 进入创建好的项目文件夹根据项目创建完成后倒数第二行提示，输入命令：cd mad-world-app 12PS D:\\sources\\vue_repos&gt; cd mad-world-appPS D:\\sources\\vue_repos\\mad-world-app&gt; 在 Visual Studio Code 中打开项目方法一： 启动 Visual Studio Code， 选择打开文件夹, 选中D:\\sources\\vue_repos\\mad-world-app 打开。 方法二： 在上一步使用命令进入项目文件夹的基础上，直接在命令行中输入：code .(code 和 . 之间至少有一个空格隔开 )， 则可以启动 Visual Studio Code 并打开当前的文件夹。(我比较喜欢这种打开方式。) 1PS D:\\sources\\vue_repos\\mad-world-app&gt; code . 启动开发服务器的时候自动打开默认浏览器在 Visudl Studio Code 打开 package.json 文件。其内容如以下代码所示: 12345678910111213141516171819202122&#123; &quot;name&quot;: &quot;mad-world-app&quot;, &quot;version&quot;: &quot;0.1.0&quot;, &quot;private&quot;: true, &quot;scripts&quot;: &#123; &quot;serve&quot;: &quot;vue-cli-service serve&quot;, &quot;build&quot;: &quot;vue-cli-service build&quot; &#125;, &quot;dependencies&quot;: &#123; &quot;core-js&quot;: &quot;^3.6.5&quot;, &quot;vue&quot;: &quot;^2.6.11&quot;, &quot;vue-router&quot;: &quot;^3.2.0&quot;, &quot;vuex&quot;: &quot;^3.4.0&quot; &#125;, &quot;devDependencies&quot;: &#123; &quot;@vue/cli-plugin-babel&quot;: &quot;~4.5.0&quot;, &quot;@vue/cli-plugin-router&quot;: &quot;~4.5.0&quot;, &quot;@vue/cli-plugin-vuex&quot;: &quot;~4.5.0&quot;, &quot;@vue/cli-service&quot;: &quot;~4.5.0&quot;, &quot;vue-template-compiler&quot;: &quot;^2.6.11&quot; &#125;&#125; 其中 第5行的scripts用于定义脚本命令： 1234&quot;scripts&quot;: &#123; &quot;serve&quot;: &quot;vue-cli-service serve&quot;, &quot;build&quot;: &quot;vue-cli-service build&quot;&#125;, 在上面这个 scripts小节中，定义了两个脚本命令serve和build 每一行冒号左边的名字是命令名称，可以通过类似 npm run serve或是 yarn serve 的方式在控制台运行。 每一行冒号右边的内容侧是该命令执行时实际调用的脚本。 两个脚本命令的说明： vue-cli-service serve 命令会启动一个开发服务器 (基于 webpack-dev-server) 并附带开箱即用的模块热重载 (Hot-Module-Replacement) vue-cli-service build 会在 dist&#x2F; 目录产生一个可用于生产环境的包，带有 JS&#x2F;CSS&#x2F;HTML 的压缩，和为更好的缓存而做的自动的 vendor chunk splitting 复制 &quot;serve&quot;: &quot;vue-cli-service serve&quot;,那一行。并修改冒号左边的命令名称为 dev, 在冒号右边的脚本后加空格，再添加选择 --open(用于自动打开默认浏览器)，修改后的代码如以下所示： 12345&quot;scripts&quot;: &#123; &quot;dev&quot;: &quot;vue-cli-service serve --open&quot;, &quot;serve&quot;: &quot;vue-cli-service serve&quot;, &quot;build&quot;: &quot;vue-cli-service build&quot; &#125;, 以后在项目的控制台中运行命令：yarn dev 或npm run dev 就可以启动开发服务器，并自动打开默认浏览器显示运行的结果了。 运行项目在控制台输入命令：yarn dev, 项目运行成功后将看到内容如下： 12345678910DONE Compiled successfully in 144ms App running at: - Local: http://localhost:8080/ - Network: http://192.168.1.80:8080/ Note that the development build is not optimized. To create a production build, run yarn build. 在自动打开的默认浏览器中，可以看到项目运行的结果如下图所示： 安装 Vuetify 和 leancloud SDK开发 Vue.js 应用程序的时候，需要给程序做一个好看的界面，同时还需要后台服务器端。 应用程序界面这里选择使用 Vuetify 框架，同时使用 LeanCloud 为应用程序提供后端支持，免去自己开发后台服务器端，还有布置、管理服务器等诸多难题。 要使用 LeanCloud 的数据存储服务，需要先到 leancloud.cn 或 leancloud.app注册一个帐号，并创建应用。 在项目中添加 VuetifyVuetify 完全按照 Material Design specification 开发, 是一个用于 Vue.js 的 Material Design 组件框架, 语义化的 Material 组件非常方便使用。 在控制台输入命令：vue add vuetify 出现以下选项时，选择第一项：Default (recommended)(默认) 即可。 1234? Choose a preset: (Use arrow keys)&gt; Default (recommended) Prototype (rapid development) Configure (advanced) 完整的安装命令过程如以下显示： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950PS D:\\sources\\vue_repos\\mad-world-app&gt; vue add vuetify📦 Installing vue-cli-plugin-vuetify...yarn add v1.22.5[1/4] Resolving packages...[2/4] Fetching packages...info fsevents@2.3.1: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@2.3.1&quot; is an optional dependency and failed compatibility check. Excluding it from installation.info fsevents@1.2.13: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@1.2.13&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...[4/4] Building fresh packages...success Saved lockfile.success Saved 5 new dependencies.info Direct dependencies└─ vue-cli-plugin-vuetify@2.0.9info All dependencies├─ interpret@1.4.0├─ null-loader@3.0.0├─ rechoir@0.6.2├─ shelljs@0.8.4└─ vue-cli-plugin-vuetify@2.0.9Done in 10.36s.✔ Successfully installed plugin: vue-cli-plugin-vuetify? Choose a preset: Default (recommended)🚀 Invoking generator for vue-cli-plugin-vuetify...📦 Installing additional dependencies...yarn install v1.22.5[1/4] Resolving packages...[2/4] Fetching packages...info fsevents@2.3.1: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@2.3.1&quot; is an optional dependency and failed compatibility check. Excluding it from installation.info fsevents@1.2.13: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@1.2.13&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...[4/4] Building fresh packages...success Saved lockfile.Done in 10.99s.⚓ Running completion hooks...✔ Successfully invoked generator for plugin: vue-cli-plugin-vuetify vuetify Discord community: https://community.vuetifyjs.com vuetify Github: https://github.com/vuetifyjs/vuetify vuetify Support Vuetify: https://github.com/sponsors/johnleider 使用 vue add vuetify 安装的 Vuetify 已经自动完成相应的配置，之后直接使用就可以了。 使用本地的图标和样式(可选) (这一项不是必须的，内容待定) 安装 leancloud SDK LeanCloud（原 AVOS Cloud） 是针对移动应用的一站式云端服务，专注于为应用开发者提供工具和平台, 这里使用 leancloud 的 数据存储功能来保存数据。 在控制台输入命令：yarn add leancloud-storage (在命令后面添加使用淘宝源的选项加快安装速度： --registry https://registry.npm.taobao.org) 安装过程显示如以下所示： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657PS D:\\sources\\vue_repos\\mad-world-app&gt; yarn add leancloud-storageyarn add v1.22.5[1/4] Resolving packages...warning leancloud-storage &gt; babel-runtime &gt; core-js@2.6.12: core-js@&lt;3 is no longer maintained and not recommended for usage due to the number of issues. Please, upgrade your dependencies to the actual version of core-js@3.[2/4] Fetching packages...info fsevents@2.3.1: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@2.3.1&quot; is an optional dependency and failed compatibility check. Excluding it from installation.info fsevents@1.2.13: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@1.2.13&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...warning &quot; &gt; sass-loader@8.0.2&quot; has unmet peer dependency &quot;webpack@^4.36.0 || ^5.0.0&quot;.warning &quot;vue-cli-plugin-vuetify &gt; null-loader@3.0.0&quot; has unmet peer dependency &quot;webpack@^4.3.0&quot;.warning &quot; &gt; vuetify-loader@1.6.0&quot; has unmet peer dependency &quot;webpack@^4.0.0&quot;.[4/4] Building fresh packages...success Saved lockfile.success Saved 37 new dependencies.info Direct dependencies└─ leancloud-storage@4.10.0info All dependencies├─ @leancloud/platform-adapters-browser@1.5.2├─ @leancloud/platform-adapters-node@1.5.2├─ @leancloud/platform-adapters-weapp@1.6.1├─ @types/cookiejar@2.1.2├─ @types/superagent@4.1.10├─ @types/ws@7.4.0├─ ascli@1.0.1├─ babel-runtime@6.26.0├─ base64-arraybuffer@0.1.5├─ bytebuffer@5.0.1├─ charenc@0.0.2├─ code-point-at@1.1.0├─ colour@0.7.1├─ cookiejar@2.1.2├─ crypt@0.0.2├─ event-target-shim@5.0.1├─ eventemitter3@2.0.3├─ fast-safe-stringify@2.0.7├─ formidable@1.2.2├─ invert-kv@1.0.0├─ javascript-state-machine@2.4.0├─ lcid@1.0.0├─ leancloud-realtime-plugin-live-query@1.2.0├─ leancloud-realtime@5.0.0-rc.5├─ leancloud-storage@4.10.0├─ localstorage-memory@1.0.3├─ long@3.2.0├─ md5@2.3.0├─ miniprogram-api-typings@2.12.0├─ number-is-nan@1.0.1├─ optjs@3.2.2├─ os-locale@1.4.0├─ protobufjs@5.0.3├─ regenerator-runtime@0.11.1├─ superagent@5.3.1├─ underscore@1.12.0└─ window-size@0.1.4Done in 210.00s. 在项目中初始化 leancloud SDK设置 leancloud 应用keys在项目中创建文件夹：src/api/config/ 再文件夹中创建文件：src/api/config/lc.config.js, 编辑其内容如以下代码： 1234567891011export default &#123; //&#x27;这里填写 leancloud 的 appId&#x27;, id: &#x27;9MCRS87WVkReLtNbQWbnllm9-********&#x27;, // &#x27;这里填写 leancloud 的 appKey&#x27;, key: &#x27;zAfYTXaiXYGeQUm8********&#x27;, // &#x27;这里填写 leancloud 的 REST API 服务器地址，国际版应用等未绑定自定义域名的此项留空&#x27; url: &#x27;https://********.lc-cn-n1-shared.com&#x27;, &#125; 以上部分字符已经改成了* 以隐藏真实的keys，请用自己的 leancloud 应用keys 中相应的内容替换以上三个值。 leancloud SDK 初始化在项目中创建文件：src/api/init.js，编辑其内容如以下代码： 12345678910111213141516171819202122232425import LC from &#x27;leancloud-storage&#x27;; // 导入 leancloud 数据存储模块import config from &#x27;./config/lc.config&#x27;; // 导入 leancloud 的应用keyslet initOptions;if (config.url.trim() === &#x27;&#x27;) &#123; // url 为空的时候，访问国际版：leancloud.app initOptions = &#123; appId: config.id, appKey: config.key, &#125;;&#125; else &#123; // url 不为空的时候，访问国内版:leancloud.cn initOptions = &#123; appId: config.id, appKey: config.key, serverURLs: config.url, &#125;;&#125;// 执行 leanCloud 初始化LC.init(initOptions);// 导出模块export default &#123;&#125; 在 main.js 中导入并执行 leancloud 初始化编辑文件：src/main.js, 添加 leancloud 导入并执行初始化的代码如以下所示: 12345678910111213141516import Vue from &#x27;vue&#x27;;import App from &#x27;./App.vue&#x27;;import router from &#x27;./router&#x27;;import store from &#x27;./store&#x27;;import vuetify from &#x27;./plugins/vuetify&#x27;;require(&#x27;./api/init.js&#x27;); // 导入并执行 LeanCloud 初始化Vue.config.productionTip = false;new Vue(&#123; router, store, vuetify, render: h =&gt; h(App)&#125;).$mount(&#x27;#app&#x27;); &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/categories/vue-js/"}],"tags":[{"name":"vuetify","slug":"vuetify","permalink":"https://hujiyi.github.io/tags/vuetify/"},{"name":"leancloud","slug":"leancloud","permalink":"https://hujiyi.github.io/tags/leancloud/"}]},{"title":"在 Vuetify 中使用 vue-i18n 实现多语言国际化","slug":"use-both-vuetify-and-vue-i18n","date":"2021-01-08T10:35:26.000Z","updated":"2022-10-11T01:40:13.282Z","comments":true,"path":"2021/01/08/use-both-vuetify-and-vue-i18n/","permalink":"https://hujiyi.github.io/2021/01/08/use-both-vuetify-and-vue-i18n/","excerpt":"","text":"安装 Vue I18n在项目(此前已经安装好 Vuetify )的控制台下输入命令：yarn add vue-i18n 安装的过程显示如以下： 123456789101112131415161718192021$ yarn add vue-i18n --registry https://registry.npm.taobao.orgyarn add v1.22.5[1/4] Resolving packages...[2/4] Fetching packages...info fsevents@2.1.3: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@2.1.3&quot; is an optional dependency and failed compatibility check. Excluding it from installation.info fsevents@1.2.13: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@1.2.13&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...warning &quot; &gt; sass-loader@8.0.2&quot; has unmet peer dependency &quot;webpack@^4.36.0 || ^5.0.0&quot;.warning &quot;vue-cli-plugin-vuetify &gt; null-loader@3.0.0&quot; has unmet peer dependency &quot;webpack@^4.3.0&quot;.warning &quot; &gt; vuetify-loader@1.6.0&quot; has unmet peer dependency &quot;webpack@^4.0.0&quot;.[4/4] Building fresh packages...success Saved lockfile.success Saved 1 new dependency.info Direct dependencies└─ vue-i18n@8.22.3info All dependencies└─ vue-i18n@8.22.3Done in 7.19s. 添加语言文件在项目中新建文件夹 src/locale, 然后添加 English 的语言文件：src/locale/en.js 和简体中文的语言文件：src/locale/zh-Hans.js 。 分别修改以上两个语言文件，src/locale/en.js 的内容如以下代码所示： 1234567891011121314151617181920// src/locale/en.jsimport en from &#x27;vuetify/es5/locale/en&#x27;;export default &#123; label: &#x27;English&#x27;, //page login login: &#x27;Login&#x27;, register: &#x27;Register&#x27;, username: &#x27;Username&#x27;, password: &#x27;Password&#x27;, login_account: &#x27;Login accoount&#x27;, // menu menu: &#123; home: &#x27;Home&#x27;, dashboard: &#x27;Dashboard&#x27;, &#125;, // ...en,&#125; src/locale/zh-Hans.js 的内容如以下代码所示： 12345678910111213141516171819// src/locale/zh-Hans.jsimport zhHans from &#x27;vuetify/es5/locale/zh-Hans&#x27;; // 导入Vuetify 自带的简体中文语言包export default &#123; label: &#x27;简体中文&#x27;, // page login login: &#x27;登录&#x27;, register: &#x27;注册&#x27;, username: &#x27;用户名&#x27;, password: &#x27;密码&#x27;, login_account: &#x27;登录帐户&#x27;, // menu menu: &#123; home: &#x27;首页&#x27;, dashboard: &#x27;仪表盘&#x27;, &#125;, // 展开 简体中文语言包的所有项目 ...zhHans, &#125; 如果还需要其他的语言文件，则按照上面的格式进行修改即可。 修改配置文件打开 Vuetify 的配置文件： src/plugins/vuetify.js， 修改其内容如以下代码所示： 1234567891011121314// src/plugins/vuetify.jsimport Vue from &#x27;vue&#x27;;import Vuetify from &#x27;vuetify/lib/framework&#x27;;import zhHans from &#x27;@/locale/zh-Hans&#x27;; // 导入简体中文语言import en from &#x27;@/locale/en&#x27;; // 导入English语言Vue.use(Vuetify);export default new Vuetify(&#123; lang: &#123; locales: &#123; zhHans, en &#125;, // 所有的语言 current: &#x27;en&#x27;, // 当前语言 &#125;&#125;); 添加多语言选择菜单组件添加新文件：src/components/LocaleLanguage.vue，编辑其内容如以下代码所示： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;!-- src/components/LocaleLanguage.vue --&gt;&lt;template&gt; &lt;div&gt; &lt;!-- 多语言选择菜单 --&gt; &lt;v-menu offset-y origin=&quot;center center&quot; class=&quot;elelvation-1&quot; transition=&quot;scale-transition&quot; &gt; &lt;template v-slot:activator=&quot;&#123; on &#125;&quot;&gt; &lt;v-btn text slot=&quot;activator&quot; v-on=&quot;on&quot;&gt; &lt;v-icon medium&gt;mdi-translate&lt;/v-icon&gt; &lt;!-- 显示当前语言名称 --&gt; &lt;span class=&quot;ml-2&quot;&gt; &#123;&#123; localeText &#125;&#125; &lt;/span&gt; &lt;v-icon small&gt;mdi-menu-down&lt;/v-icon&gt; &lt;/v-btn&gt; &lt;/template&gt; &lt;!-- 显示所有语言包组成的下拉菜单 --&gt; &lt;v-list&gt; &lt;v-list-item-group v-model=&quot;$vuetify.lang.current&quot;&gt; &lt;v-list-item @click=&quot;handleChangeLocale(item)&quot; v-for=&quot;item in availableLanguages&quot; :key=&quot;item.value&quot; :value=&quot;item.value&quot; &gt; &lt;v-list-item-title v-text=&quot;item.text&quot; /&gt; &lt;/v-list-item&gt; &lt;/v-list-item-group&gt; &lt;/v-list&gt; &lt;/v-menu&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;locale-language&quot;, methods: &#123; // 设置当前语言 handleChangeLocale(&#123; value &#125;) &#123; this.$vuetify.lang.current = value; &#125;, &#125;, computed: &#123; // 遍历并获取项目中的所有语言包 availableLanguages() &#123; const &#123; locales &#125; = this.$vuetify.lang; // 所有的语言，来自 src/plugins/vuetify.js 中的配置 return Object.keys(locales).map((lang) =&gt; &#123; return &#123; text: locales[lang].label, // 语言包显示的名字 value: lang, // 语言包的值 &#125;; &#125;); &#125;, // 当前语言, 用于语言切换菜单中显示的当前语言名字 localeText() &#123; const find = this.availableLanguages.find( (item) =&gt; item.value === this.$vuetify.lang.current ); return find.text; &#125;, &#125;,&#125;;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 在 AppBar 中添加语言选择菜单将上一步编写好的组件添加到顶部的 AppBar 中，打开 src/components/AppBar.vue，添加对 LocaleLanguage组件的引用和注册，并调用该组件，修改其代码如以下所示： 12345678910111213141516171819202122232425262728293031323334353637383940&lt;!-- * @FilePath: \\chat-zone-app\\src\\components\\AppBar.vue--&gt;&lt;template&gt; &lt;v-app-bar app&gt; &lt;v-toolbar-title&gt; Char Zone App &lt;/v-toolbar-title&gt; &lt;v-btn text class=&quot;mx-3&quot; to=&quot;/&quot;&gt; Home &lt;/v-btn&gt; &lt;v-btn v-if=&quot;current_user&quot; text class=&quot;mx-3&quot; to=&quot;/dashboard&quot;&gt; Dashboard &lt;/v-btn&gt; &lt;v-spacer&gt;&lt;/v-spacer&gt; &lt;!-- 第 2 步：这里添加多语言选择菜单组件的调用 --&gt; &lt;locale-language /&gt; &lt;!-- 此处省略了与当前功能无关的其他代码 --&gt; &lt;/v-app-bar&gt;&lt;/template&gt;&lt;script&gt;// 此处省略了与当前功能无关的其他代码export default &#123; name: &quot;cz-app-bar&quot;, components: &#123; // 第 1 步：导入并注册 多语言选择组件 LocaleLanguage: () =&gt; import(&quot;@/components/LocaleLanguage.vue&quot;), &#125;, // 此处省略了与当前功能无关的其他代码&#125;;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 完成后，在 AppBar 上已经可以看到用于多语言选择的下拉菜单 应用多语言在其他需要使用多语言功能的地方，可以通过类似 &#123;&#123; $vuetify.lang.t(\"$vuetify.label\") &#125;&#125; 的形式来使用事先在 语言包中定义好的名字，这里的 label 就是在语言包中定义好的变量。 下面来看一个实例， 打开 src/components/AppBar.vue 文件，找到 template 中的文字Home 和 Dashboard， 待修改的代码如以下所示： 123456789101112&lt;!-- * @FilePath: \\chat-zone-app\\src\\components\\AppBar.vue--&gt;&lt;template&gt; &lt;v-app-bar app&gt; &lt;v-toolbar-title&gt; Char Zone App &lt;/v-toolbar-title&gt; &lt;v-btn text class=&quot;mx-3&quot; to=&quot;/&quot;&gt; Home &lt;/v-btn&gt; &lt;v-btn v-if=&quot;current_user&quot; text class=&quot;mx-3&quot; to=&quot;/dashboard&quot;&gt; Dashboard &lt;/v-btn&gt; 将这两个文字修改为如以下代码： 1234567891011121314&lt;!-- * @FilePath: \\chat-zone-app\\src\\components\\AppBar.vue--&gt;&lt;template&gt; &lt;v-app-bar app&gt; &lt;v-toolbar-title&gt; Char Zone App &lt;/v-toolbar-title&gt; &lt;v-btn text class=&quot;mx-3&quot; to=&quot;/&quot;&gt; &#123;&#123; $vuetify.lang.t(&quot;$vuetify.menu.home&quot;) &#125;&#125; &lt;/v-btn&gt; &lt;v-btn v-if=&quot;current_user&quot; text class=&quot;mx-3&quot; to=&quot;/dashboard&quot;&gt; &#123;&#123; $vuetify.lang.t(&quot;$vuetify.menu.dashboard&quot;) &#125;&#125; &lt;/v-btn&gt; &lt;!-- 后面的代码与当前功能无关， 省略了。 --&gt; 现在可以进行语言切换，并看到效果了 当前语言为：English 当前语言更改为：简体中文 &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/categories/vue-js/"}],"tags":[{"name":"vuetify","slug":"vuetify","permalink":"https://hujiyi.github.io/tags/vuetify/"},{"name":"leancloud","slug":"leancloud","permalink":"https://hujiyi.github.io/tags/leancloud/"}]},{"title":"使用 Vuetify 的 v-data-table 组件实现基于 leancloud 的 CRUD 应用","slug":"vuetify-data-table-with-leancloud","date":"2020-12-23T10:38:17.000Z","updated":"2022-10-11T01:40:13.298Z","comments":true,"path":"2020/12/23/vuetify-data-table-with-leancloud/","permalink":"https://hujiyi.github.io/2020/12/23/vuetify-data-table-with-leancloud/","excerpt":"","text":"创建项目使用 @vue/cli 新建项目 vuetify-data-table-example输入命令：vue create vuetify-data-table-example 在看到的选项中选择以下几项： Choose Vue version Babel Router Vuex 控制台显示安装过程如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051D:\\sources\\vue_repos&gt;vue create vuetify-data-table-exampleVue CLI v4.5.9? Please pick a preset: Manually select features? Check the features needed for your project: Choose Vue version, Babel, Router, Vuex? Choose a version of Vue.js that you want to start the project with 2.x? Use history mode for router? (Requires proper server setup for index fallback in production) No? Where do you prefer placing config for Babel, ESLint, etc.? In dedicated config files? Save this as a preset for future projects? NoVue CLI v4.5.9✨ Creating project in D:\\sources\\vue_repos\\vuetify-data-table-example.⚙️ Installing CLI plugins. This might take a while...yarn install v1.22.5info No lockfile found.[1/4] Resolving packages...[2/4] Fetching packages...info fsevents@2.1.3: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@2.1.3&quot; is an optional dependency and failed compatibility check. Excluding it from installation.info fsevents@1.2.13: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@1.2.13&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...#################################################################################################] 1060/1060[4/4] Building fresh packages...success Saved lockfile.Done in 16.28s.🚀 Invoking generators...📦 Installing additional dependencies...yarn install v1.22.5[1/4] Resolving packages...[2/4] Fetching packages...info fsevents@2.1.3: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@2.1.3&quot; is an optional dependency and failed compatibility check. Excluding it from installation.info fsevents@1.2.13: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@1.2.13&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...[4/4] Building fresh packages...success Saved lockfile.Done in 5.71s.⚓ Running completion hooks...📄 Generating README.md...🎉 Successfully created project vuetify-data-table-example.👉 Get started with the following commands: $ cd vuetify-data-table-example $ yarn serve 安装 Vuetify 和 leancloud SDK添加 vuetify当vue 项目创建成功后，输入以下命令进入项目文件夹： cd vuetify-data-table-example 然后再使用命令在项目中安装 vuetify: vue add vuetify 遇到以下选项时，选择 Default(默认) 项： 1234? Choose a preset: (Use arrow keys)&gt; Default (recommended) Prototype (rapid development) Configure (advanced) 控制台显示安装过程如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748D:\\sources\\vue_repos\\vuetify-data-table-example&gt;vue add vuetify📦 Installing vue-cli-plugin-vuetify...yarn add v1.22.5[1/4] Resolving packages...[2/4] Fetching packages...info fsevents@2.1.3: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@2.1.3&quot; is an optional dependency and failed compatibility check. Excluding it from installation.info fsevents@1.2.13: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@1.2.13&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...[4/4] Building fresh packages...success Saved lockfile.success Saved 5 new dependencies.info Direct dependencies└─ vue-cli-plugin-vuetify@2.0.8info All dependencies├─ interpret@1.4.0├─ null-loader@3.0.0├─ rechoir@0.6.2├─ shelljs@0.8.4└─ vue-cli-plugin-vuetify@2.0.8Done in 9.23s.✔ Successfully installed plugin: vue-cli-plugin-vuetify? Choose a preset: Default (recommended)🚀 Invoking generator for vue-cli-plugin-vuetify...📦 Installing additional dependencies...yarn install v1.22.5[1/4] Resolving packages...[2/4] Fetching packages...info fsevents@2.1.3: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@2.1.3&quot; is an optional dependency and failed compatibility check. Excluding it from installation.info fsevents@1.2.13: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@1.2.13&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...[4/4] Building fresh packages...success Saved lockfile.Done in 6.94s.⚓ Running completion hooks...✔ Successfully invoked generator for plugin: vue-cli-plugin-vuetify vuetify Discord community: https://community.vuetifyjs.com vuetify Github: https://github.com/vuetifyjs/vuetify vuetify Support Vuetify: https://github.com/sponsors/johnleider 安装 leancloud SDK在控制台输入以下命令安装 leancloud SDK, 建议使用淘宝源以加快安装速度（在 npm install 后添加 –registry&#x3D;https://registry.npm.taobao.org 参数）： npm install leancloud-storage --save 控制台显示安装过程如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354D:\\sources\\vue_repos\\vuetify-data-table-example&gt;npm install leancloud-storage --save --registry https://registry.npm.taobao.orgnpm WARN deprecated core-js@2.6.12: core-js@&lt;3 is no longer maintained and not recommended for usage due to the number of issues. Please, upgrade your dependencies to the actual version of core-js@3.npm WARN deprecated @hapi/address@2.1.4: This version has been deprecated and is no longer supported or maintainednpm WARN deprecated @hapi/topo@3.1.6: This version has been deprecated and is no longer supported or maintainednpm WARN deprecated @hapi/hoek@8.5.1: This version has been deprecated and is no longer supported or maintainednpm WARN deprecated @hapi/bourne@1.3.2: This version has been deprecated and is no longer supported or maintainednpm WARN deprecated @hapi/joi@15.1.1: joi is leaving the @hapi organization and moving back to &#x27;joi&#x27; (https://github.com/sideway/joi/issues/2411)npm WARN deprecated request@2.88.2: request has been deprecated, see https://github.com/request/request/issues/3142npm WARN deprecated har-validator@5.1.5: this library is no longer supportednpm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecatednpm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecatednpm WARN deprecated chokidar@2.1.8: Chokidar 2 will break on node v14+. Upgrade to chokidar 3 with 15x less dependencies.npm WARN deprecated fsevents@1.2.13: fsevents 1 will break on node v14+ and could be using insecure binaries. Upgrade to fsevents 2.npm WARN rm not removing D:\\sources\\vue_repos\\vuetify-data-table-example\\node_modules\\.bin\\semver.cmd as it wasn&#x27;t installed by D:\\sources\\vue_repos\\vuetify-data-table-example\\node_modules\\semvernpm WARN rm not removing D:\\sources\\vue_repos\\vuetify-data-table-example\\node_modules\\.bin\\semver as it wasn&#x27;t installed by D:\\sources\\vue_repos\\vuetify-data-table-example\\node_modules\\semvernpm WARN rm not removing D:\\sources\\vue_repos\\vuetify-data-table-example\\node_modules\\.bin\\json5.cmd as it wasn&#x27;t installed by D:\\sources\\vue_repos\\vuetify-data-table-example\\node_modules\\json5npm WARN rm not removing D:\\sources\\vue_repos\\vuetify-data-table-example\\node_modules\\.bin\\json5 as it wasn&#x27;t installed by D:\\sources\\vue_repos\\vuetify-data-table-example\\node_modules\\json5&gt; core-js@3.8.1 postinstall D:\\sources\\vue_repos\\vuetify-data-table-example\\node_modules\\@vue\\babel-preset-app\\node_modules\\core-js&gt; node -e &quot;try&#123;require(&#x27;./postinstall&#x27;)&#125;catch(e)&#123;&#125;&quot;Thank you for using core-js ( https://github.com/zloirock/core-js ) for polyfilling JavaScript standard library!The project needs your help! Please consider supporting of core-js on Open Collective or Patreon:&gt; https://opencollective.com/core-js&gt; https://www.patreon.com/zloirockAlso, the author of core-js ( https://github.com/zloirock ) is looking for a good job -)&gt; core-js@2.6.12 postinstall D:\\sources\\vue_repos\\vuetify-data-table-example\\node_modules\\babel-runtime\\node_modules\\core-js&gt; node -e &quot;try&#123;require(&#x27;./postinstall&#x27;)&#125;catch(e)&#123;&#125;&quot;&gt; ejs@2.7.4 postinstall D:\\sources\\vue_repos\\vuetify-data-table-example\\node_modules\\ejs&gt; node ./postinstall.jsThank you for installing EJS: built with the Jake JavaScript build tool (https://jakejs.com/)npm notice created a lockfile as package-lock.json. You should commit this file.npm WARN optional SKIPPING OPTIONAL DEPENDENCY: vue-loader-v16@npm:vue-loader@^16.0.0-beta.7 (node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16):npm WARN notarget SKIPPING OPTIONAL DEPENDENCY: No matching version found for vue-loader-v16@16.1.2.npm WARN @vue/babel-preset-app@4.5.9 requires a peer of core-js@^3 but none is installed. You must install peer dependencies yourself.npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules\\chokidar\\node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.1.3 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.1.3: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)+ leancloud-storage@4.9.0added 157 packages from 87 contributors, removed 70 packages and updated 1093 packages in 101.605s64 packages are looking for funding run `npm fund` for details leancloud 初始化在项目中添加以下文件及文件夹： src/api/init.js src/api/config/lc.config.js 编辑 src/api/config/lc.config.js 内容如以下所示(部分字符已经更改为 * , 请使用自己 leancloud 中 应用Keys 进行替换)： 123456789101112// src/api/config/lc.config.jsexport default &#123; //&#x27;这里填写 leancloud 的 appId&#x27;, id: &#x27;9MCRS87WVkReLtNbQWbnllm9-********&#x27;, // &#x27;这里填写 leancloud 的 appKey&#x27;, key: &#x27;zAfYTXaiXYGeQUm8********&#x27;, // &#x27;这里填写 leancloud 的 REST API 服务器地址，国际版应用等未绑定自定义域名的此项留空&#x27; url: &#x27;https://*******.lc-cn-n1-shared.com&#x27;, &#125; 编辑 src/api/init.js， 内容如以下代码所示： 12345678910111213141516171819202122232425// src/api/init.jsimport LC from &#x27;leancloud-storage&#x27;;import config from &#x27;./config/lc.config&#x27;;let initOptions;if (config.url.trim() === &#x27;&#x27;) &#123; // url 为空的时候，访问国际版：leancloud.app initOptions = &#123; appId: config.id, appKey: config.key, &#125;;&#125; else &#123; // url 不为空的时候，访问国内版:leancloud.cn initOptions = &#123; appId: config.id, appKey: config.key, serverURLs: config.url, &#125;;&#125;// 执行 leanCloud 初始化LC.init(initOptions);export default &#123;&#125; 编辑 src/main.js, 添加导入并执行LeanCloud初始化的语句，如以下代码所示: 12345678910111213141516// src/main.jsimport Vue from &#x27;vue&#x27;;import App from &#x27;./App.vue&#x27;;import router from &#x27;./router&#x27;;import store from &#x27;./store&#x27;;import vuetify from &#x27;./plugins/vuetify&#x27;;require(&#x27;./api/init.js&#x27;); // 导入并执行LeanCloud初始化Vue.config.productionTip = false;new Vue(&#123; router, store, vuetify, render: h =&gt; h(App)&#125;).$mount(&#x27;#app&#x27;); 完成以上操作之后，项目的结构如下图所示： 开发基于 leancloud 的 CRUD 应用在 leancloud 添加 class登录到 leancloud 官方网站，在应用中添加名为 Tutorial 的 class。 在 Tutorial 类中添加以下三列: 属性名 类型 含义 title String 标题 description String 描述 published Boolean 状态 小技巧：上述在 leancloud 中创建Tutorial的步骤可以省略，当第一次执行添加记录操作时，会自动完成相应类以及列的创建。 创建数据服务层添加文件 src/api/services/TutorialDataService.js, 编辑其文件内容如以下代码所示： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106// src/api/services/TutorialDataService.jsimport LC from &#x27;leancloud-storage&#x27;;class TutorialDataService &#123; // 获取所有数据，此例使用数据表组件自带的分页功能 // 如要使用手动分页，请参加vuetify 数据表组件进行修改 getAll() &#123; return new Promise((resolve, reject) =&gt; &#123; let query = new LC.Query(&#x27;Tutorial&#x27;); // 按 createdAt 降序 query.descending(&#x27;createdAt&#x27;) .find() .then(resp =&gt; &#123; console.log(&#x27;getAll:&#x27;, resp); resolve(resp); &#125;) .catch(error =&gt; &#123; console.log(&#x27;getAll:&#x27;, error); reject(error); &#125;); &#125;); &#125; // 使用id 查询一条记录 get(id) &#123; return new Promise((resolve, reject) =&gt; &#123; let query = new LC.Query(&#x27;Tutorial&#x27;); query.get(id) .then(resp =&gt; &#123; console.log(&#x27;get(id):&#x27;, resp); resolve(resp); &#125;).catch(error =&gt; &#123; console.log(&#x27;get(id):&#x27;, error); reject(error); &#125;); &#125;); &#125; // 添加新记录，data包含添加的字段及对应的值 create(data) &#123; return new Promise((resolve, reject) =&gt; &#123; let Tutorial = LC.Object.extend(&#x27;Tutorial&#x27;); let tutorial = new Tutorial(data); tutorial.save() .then(resp =&gt; &#123; console.log(&#x27;create:&#x27;, resp); resolve(resp); &#125;) .catch(error =&gt; &#123; console.log(&#x27;create:&#x27;, error); reject(error) &#125;); &#125;); &#125; // 修改记录, data 包含要修改的值 update(id, data) &#123; return new Promise((resolve, reject) =&gt; &#123; let tutorial = LC.Object.createWithoutData(&#x27;Tutorial&#x27;, id); tutorial.set(data); tutorial.save() .then(resp =&gt; &#123; console.log(&#x27;delete(id):&#x27;, resp); resolve(resp) &#125;) .catch(error =&gt; &#123; console.log(&#x27;delete(id):&#x27;, error); reject(error) &#125;); &#125;); &#125; // 删除一条记录 delete(id) &#123; return new Promise((resolve, reject) =&gt; &#123; let tutorial = LC.Object.createWithoutData(&#x27;Tutorial&#x27;, id); tutorial.destroy() .then(resp =&gt; &#123; console.log(&#x27;delete(id):&#x27;, resp); resolve(resp) &#125;) .catch(error =&gt; &#123; console.log(&#x27;delete(id):&#x27;, error); reject(error) &#125;); &#125;); &#125; // 批量删除记录，data 为包含批量操作记录的数组 deletaAll(data) &#123; return new Promise((resolve, reject) =&gt; &#123; // 获取所有待删除记录的id let ids = data.map(item=&gt;&#123;return item.id&#125;); let query = new LC.Query(&#x27;Tutorial&#x27;); query.containedIn(&#x27;objectId&#x27;,ids) // 使用id 把所有要删除的记录打出来 .destroyAll() // 执行批量删除操作 .then(resp =&gt; &#123; console.log(&#x27;deletaAll(data):&#x27;, resp); resolve(resp); &#125;) .catch(error =&gt; &#123; console.log(&#x27;deletaAll(data):&#x27;, error); reject(error); &#125;); &#125;); &#125;&#125;export default new TutorialDataService(); 编辑路由打开 src/router/index.js 文件，编辑内容如以下代码所示: 123456789101112131415161718192021222324252627282930// src/router/index.jsimport Vue from &#x27;vue&#x27;;import VueRouter from &#x27;vue-router&#x27;;Vue.use(VueRouter);const routes = [ &#123; path: &#x27;/&#x27;, // 路由 alias: &#x27;/tutorials&#x27;, // 别名 name: &#x27;tutorials&#x27;, component: () =&gt; import(&#x27;@/views/TutorialsList.vue&#x27;), &#125;, &#123; path: &#x27;/tutorials/:id&#x27;, name: &#x27;tutorial-details&#x27;, component: () =&gt; import(&#x27;@/views/Tutorial.vue&#x27;) &#125;, &#123; path: &#x27;/add&#x27;, name: &#x27;add&#x27;, component: () =&gt; import(&#x27;@/views/AddTutorial.vue&#x27;), &#125;,];const router = new VueRouter(&#123; routes&#125;);export default router; 添加视图文件打开src/App.vue 文件，编辑其内容所以下代码所示： 1234567891011121314151617181920212223&lt;template&gt; &lt;v-app&gt; &lt;v-app-bar app&gt; &lt;div class=&quot;d-flex align-center mr-2&quot;&gt;bezKoder&lt;/div&gt; &lt;v-btn to=&quot;/tutorials&quot; text&gt;Tutorials&lt;/v-btn&gt; &lt;v-btn to=&quot;/add&quot; text&gt;Add&lt;/v-btn&gt; &lt;/v-app-bar&gt; &lt;v-main&gt; &lt;router-view /&gt; &lt;/v-main&gt; &lt;/v-app&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: &quot;App&quot;, data: () =&gt; (&#123; // &#125;),&#125;;&lt;/script&gt; 添加 Vuetify 视图(组件)分别添加以下文件，以便和路由文件的设置相匹配： src/views/TutorialsList.vue src/views/Tutorial.vue src/views/AddTutorial.vue 新增记录的视图打开 src/views/AddTutorial.vue 文件，编辑其内容如以下代码所示： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485&lt;template&gt; &lt;div class=&quot;submit-form mt-3 mx-auto&quot;&gt; &lt;p class=&quot;headline&quot;&gt;Add Tutorial&lt;/p&gt; &lt;div v-if=&quot;!submitted&quot;&gt; &lt;v-form ref=&quot;form&quot; lazy-validation&gt; &lt;v-text-field v-model=&quot;tutorial.title&quot; :rules=&quot;[(v) =&gt; !!v || &#x27;Title is required&#x27;]&quot; label=&quot;Title&quot; required &gt;&lt;/v-text-field&gt; &lt;v-text-field v-model=&quot;tutorial.description&quot; :rules=&quot;[(v) =&gt; !!v || &#x27;Description is required&#x27;]&quot; label=&quot;Description&quot; required &gt;&lt;/v-text-field&gt; &lt;/v-form&gt; &lt;v-btn color=&quot;primary&quot; class=&quot;mt-3&quot; @click=&quot;saveTutorial&quot;&gt;Submit&lt;/v-btn&gt; &lt;/div&gt; &lt;div v-else&gt; &lt;v-card class=&quot;mx-auto&quot;&gt; &lt;v-card-title&gt; Submitted successfully! &lt;/v-card-title&gt; &lt;v-card-subtitle&gt; Click the button to add new Tutorial. &lt;/v-card-subtitle&gt; &lt;v-card-actions&gt; &lt;v-btn color=&quot;success&quot; @click=&quot;newTutorial&quot;&gt;Add&lt;/v-btn&gt; &lt;/v-card-actions&gt; &lt;/v-card&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import TutorialDataService from &quot;@/api/services/TutorialDataService.js&quot;;export default &#123; name: &quot;add-tutorial&quot;, data: () =&gt; (&#123; tutorial: &#123; id: null, title: &quot;&quot;, description: &quot;&quot;, published: false, &#125;, submitted: false, // &#125;), methods: &#123; saveTutorial() &#123; var data = &#123; title: this.tutorial.title, description: this.tutorial.description, published: false, &#125;; TutorialDataService.create(data) .then((response) =&gt; &#123; this.tutorial.id = response.id; this.submitted = true; &#125;) .catch((e) =&gt; &#123; console.log(e); &#125;); &#125;, newTutorial() &#123; this.submitted = false; this.tutorial = &#123;&#125;; &#125;, &#125;,&#125;;&lt;/script&gt;&lt;style&gt;.submit-form &#123; max-width: 300px;&#125;&lt;/style&gt; 使用 v-data-table 组件展示所有数据打开 src/views/TutorialsList.vue 文件，编辑其内容如以下文件所示： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154&lt;template&gt; &lt;v-row align=&quot;center&quot; class=&quot;list px-3 mx-auto&quot;&gt; &lt;v-spacer /&gt; &lt;v-col cols=&quot;12&quot; md=&quot;4&quot;&gt; &lt;v-text-field v-model=&quot;search&quot; append-icon=&quot;mdi-magnify&quot; label=&quot;Search&quot; single-line hide-details &gt;&lt;/v-text-field&gt; &lt;/v-col&gt; &lt;v-col cols=&quot;12&quot; sm=&quot;12&quot;&gt; &lt;v-card class=&quot;mx-auto&quot; tile&gt; &lt;v-card-title&gt;Tutorials&lt;/v-card-title&gt; &lt;v-data-table :headers=&quot;headers&quot; :items=&quot;tutorials&quot; :search=&quot;search&quot; v-model=&quot;selected&quot; show-select disable-pagination :hide-default-footer=&quot;true&quot; &gt; &lt;template v-slot:[`item.actions`]=&quot;&#123; item &#125;&quot;&gt; &lt;v-icon small class=&quot;mr-2&quot; @click=&quot;editTutorial(item.id)&quot; &gt;mdi-pencil&lt;/v-icon &gt; &lt;v-icon small @click=&quot;deleteTutorial(item.id)&quot;&gt;mdi-delete&lt;/v-icon&gt; &lt;/template&gt; &lt;/v-data-table&gt; &lt;v-card-actions&gt; &lt;v-btn :disabled=&quot;selected.length&lt;=0&quot; small color=&quot;error&quot; @click=&quot;removeAllTutorials&quot;&gt; Remove Selected &lt;/v-btn&gt; &lt;/v-card-actions&gt; &lt;/v-card&gt; &lt;/v-col&gt; &lt;/v-row&gt;&lt;/template&gt;&lt;script&gt;import TutorialDataService from &quot;@/api/services/TutorialDataService.js&quot;;export default &#123; name: &quot;tutorials-list&quot;, data() &#123; return &#123; tutorials: [], // 数据表的显示的所有数据 selected: [], //多选框选中的项 search: &quot;&quot;, // 用于搜索功能，分别绑定到搜索框和数据表组件 // 数据表的表头 headers: [ &#123; text: &quot;Title&quot;, align: &quot;start&quot;, sortable: false, value: &quot;title&quot; &#125;, &#123; text: &quot;Description&quot;, value: &quot;description&quot;, sortable: false &#125;, &#123; text: &quot;Status&quot;, value: &quot;status&quot;, sortable: false &#125;, &#123; text: &quot;Actions&quot;, value: &quot;actions&quot;, sortable: false &#125;, ], &#125;; &#125;, methods: &#123; // 获取所有数据 retrieveTutorials() &#123; this.tutorials = []; // 每次要先清空数据 TutorialDataService.getAll() .then((response) =&gt; &#123; // 遍历获取的数据，并提取需要的字段 response.forEach((item) =&gt; &#123; this.tutorials.push(&#123; id: item.id, // leancloud中的id值直接获取 title: item.get(&quot;title&quot;), // 自定义字段要使用 get() 获取值 description: item.get(&quot;description&quot;), // 此处将 published 以 status 进行显示 status: item.get(&quot;published&quot;) ? &quot;Published&quot; : &quot;Pending&quot;, &#125;); &#125;); &#125;) .catch((e) =&gt; &#123; console.log(e); &#125;); &#125;, // 刷新数据 refreshList() &#123; this.retrieveTutorials(); &#125;, // 批量删除选中的记录 removeAllTutorials() &#123; // 判断是否有已选中的记录 if (this.selected.length&gt;0) &#123; console.log(&quot;selected: &quot;, this.selected); TutorialDataService.deletaAll(this.selected) .then((response) =&gt; &#123; console.log(response); this.refreshList(); // 更新数据 this.selected =[]; // 清空已选中数据 &#125;) .catch((e) =&gt; &#123; console.log(e); &#125;); &#125; &#125;, // 搜索标题， 此功能未使用，可以注释或是删除，搜索功能直接由数据表组件提供 searchTitle() &#123; // this.tutorials=this.tutorials.filter(item=&gt;&#123; // return !item.title.indexOf(this.title); // &#125;); &#125;, // 编辑记录 editTutorial(id) &#123; // 使用命名路由跳转到 Tutorial.vue ，传递参数为记录的id this.$router.push(&#123; name: &quot;tutorial-details&quot;, params: &#123; id: id &#125; &#125;); &#125;, // 删除一条记录 deleteTutorial(id) &#123; TutorialDataService.delete(id) .then(() =&gt; &#123; this.refreshList(); &#125;) .catch((e) =&gt; &#123; console.log(e); &#125;); &#125;, // 格式化显示数据，对标题和描述只显示前 30个字符的内容 getDisplayTutorial(tutorial) &#123; return &#123; id: tutorial.id, title: tutorial.title.length &gt; 30 ? tutorial.title.substr(0, 30) + &quot;...&quot; : tutorial.title, description: tutorial.description.length &gt; 30 ? tutorial.description.substr(0, 30) + &quot;...&quot; : tutorial.description, status: tutorial.published ? &quot;Published&quot; : &quot;Pending&quot;, &#125;; &#125;, &#125;, mounted() &#123; this.retrieveTutorials(); &#125;,&#125;;&lt;/script&gt;&lt;style&gt;.list &#123; max-width: 750px;&#125;&lt;/style&gt; 显示详细信息以及修改数据打开 src/views/Tutorial.vue 文件，编辑其内容如以下代码所示： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141&lt;template&gt; &lt;div v-if=&quot;currentTutorial&quot; class=&quot;edit-form py-3&quot;&gt; &lt;p class=&quot;headline&quot;&gt;Edit Tutorial&lt;/p&gt; &lt;v-form ref=&quot;form&quot; lazy-validation&gt; &lt;v-text-field v-model=&quot;currentTutorial.title&quot; :rules=&quot;[(v) =&gt; !!v || &#x27;Title is required&#x27;]&quot; label=&quot;Title&quot; required &gt;&lt;/v-text-field&gt; &lt;v-text-field v-model=&quot;currentTutorial.description&quot; :rules=&quot;[(v) =&gt; !!v || &#x27;Description is required&#x27;]&quot; label=&quot;Description&quot; required &gt;&lt;/v-text-field&gt; &lt;label&gt;&lt;strong&gt;Status:&lt;/strong&gt;&lt;/label&gt; &#123;&#123; currentTutorial.published ? &quot;Published&quot; : &quot;Pending&quot; &#125;&#125; &lt;v-divider class=&quot;my-5&quot;&gt;&lt;/v-divider&gt; &lt;v-btn v-if=&quot;currentTutorial.published&quot; @click=&quot;updatePublished(false)&quot; color=&quot;primary&quot; small class=&quot;mr-2&quot; &gt; UnPublish &lt;/v-btn&gt; &lt;v-btn v-else @click=&quot;updatePublished(true)&quot; color=&quot;primary&quot; small class=&quot;mr-2&quot; &gt; Publish &lt;/v-btn&gt; &lt;v-btn color=&quot;error&quot; small class=&quot;mr-2&quot; @click=&quot;deleteTutorial&quot;&gt; Delete &lt;/v-btn&gt; &lt;v-btn color=&quot;success&quot; small @click=&quot;updateTutorial&quot;&gt; Update &lt;/v-btn&gt; &lt;/v-form&gt; &lt;p class=&quot;mt-3&quot;&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt; &lt;/div&gt; &lt;div v-else&gt; &lt;p&gt;Please click on a Tutorial...&lt;/p&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import TutorialDataService from &quot;@/api/services/TutorialDataService.js&quot;;export default &#123; name: &quot;tutorial&quot;, data() &#123; return &#123; currentTutorial: null, message: &quot;&quot;, &#125;; &#125;, methods: &#123; getTutorial(id) &#123; TutorialDataService.get(id) .then((item) =&gt; &#123; this.currentTutorial = &#123; id: item.id, title: item.get(&quot;title&quot;), description: item.get(&quot;description&quot;), published: item.get(&quot;published&quot;), &#125;; console.log(this.currentTutorial); &#125;) .catch((e) =&gt; &#123; console.log(e); &#125;); &#125;, updatePublished(status) &#123; var data = &#123; id: this.currentTutorial.id, title: this.currentTutorial.title, description: this.currentTutorial.description, published: status, &#125;; TutorialDataService.update(this.currentTutorial.id, data) .then((response) =&gt; &#123; this.currentTutorial.published = status; console.log(response); &#125;) .catch((e) =&gt; &#123; console.log(e); &#125;); &#125;, updateTutorial() &#123; TutorialDataService.update(this.currentTutorial.id, this.currentTutorial) .then((response) =&gt; &#123; console.log(response); this.message = &quot;The tutorial was updated successfully!&quot;; &#125;) .catch((e) =&gt; &#123; console.log(e); &#125;); &#125;, deleteTutorial() &#123; TutorialDataService.delete(this.currentTutorial.id) .then((response) =&gt; &#123; console.log(response.data); this.$router.push(&#123; name: &quot;tutorials&quot; &#125;); &#125;) .catch((e) =&gt; &#123; console.log(e); &#125;); &#125;, &#125;, mounted() &#123; this.message = &quot;&quot;; this.getTutorial(this.$route.params.id); &#125;,&#125;;&lt;/script&gt;&lt;style&gt;.edit-form &#123; max-width: 300px; margin: auto;&#125;&lt;/style&gt; 运行程序在项目文件夹打开CMD控制台 或 PowerShell窗口，输入以下命令运行程序： 1npm run serve 如果运行成功，将看到类似以下的信息： 12345DONE Compiled successfully in 266ms App running at: - Local: http://localhost:8080/ - Network: http://192.168.1.80:8080/ 打开浏览器，并输入以上网址回车就可以看到运行的结果了。 项目源代码查看源代码，请浏览以下网址：https://gitee.com/hujiyi/vuetify-data-table-example &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/categories/vue-js/"}],"tags":[{"name":"vuetify","slug":"vuetify","permalink":"https://hujiyi.github.io/tags/vuetify/"},{"name":"leancloud","slug":"leancloud","permalink":"https://hujiyi.github.io/tags/leancloud/"}]},{"title":"vue.js with vuetify and leancloud","slug":"vue-js-with-vuetify-and-leancloud","date":"2020-12-12T05:03:30.000Z","updated":"2022-10-11T01:40:13.298Z","comments":true,"path":"2020/12/12/vue-js-with-vuetify-and-leancloud/","permalink":"https://hujiyi.github.io/2020/12/12/vue-js-with-vuetify-and-leancloud/","excerpt":"","text":"安装 Vue CLI检查正确已经安装 Vue CLI123D:\\sources\\vue_repos&gt;vue --version&#x27;vue&#x27; 不是内部或外部命令，也不是可运行的程序或批处理文件。 出现以上提示时，表示还没有安装 Vue CLI， 则需要先安装 Vue CLI 安装 Vue CLI执行命令：npm install -g @vue/cli 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152D:\\sources\\vue_repos&gt;npm install -g @vue/clinpm WARN deprecated @hapi/joi@15.1.1: joi is leaving the @hapi organization and moving back to &#x27;joi&#x27; (https://github.com/sideway/joi/issues/2411)npm WARN deprecated request@2.88.2: request has been deprecated, see https://github.com/request/request/issues/3142npm WARN deprecated @hapi/address@2.1.4: This version has been deprecated and is no longer supported or maintainednpm WARN deprecated @hapi/bourne@1.3.2: This version has been deprecated and is no longer supported or maintainednpm WARN deprecated @hapi/topo@3.1.6: This version has been deprecated and is no longer supported or maintainednpm WARN deprecated @hapi/hoek@8.5.1: This version has been deprecated and is no longer supported or maintainednpm WARN deprecated har-validator@5.1.5: this library is no longer supportednpm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecatednpm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecatednpm WARN deprecated chokidar@2.1.8: Chokidar 2 will break on node v14+. Upgrade to chokidar 3 with 15x less dependencies.npm WARN deprecated fsevents@1.2.13: fsevents 1 will break on node v14+ and could be using insecure binaries. Upgrade to fsevents 2.&gt; yarn@1.22.10 preinstall C:\\Users\\Laohoo\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli\\node_modules\\yarn&gt; :; (node ./preinstall.js &gt; /dev/null 2&gt;&amp;1 || true)C:\\Users\\Laohoo\\AppData\\Roaming\\npm\\vue -&gt; C:\\Users\\Laohoo\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli\\bin\\vue.js&gt; core-js@3.8.1 postinstall C:\\Users\\Laohoo\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli\\node_modules\\core-js&gt; node -e &quot;try&#123;require(&#x27;./postinstall&#x27;)&#125;catch(e)&#123;&#125;&quot;Thank you for using core-js ( https://github.com/zloirock/core-js ) for polyfilling JavaScript standard library!The project needs your help! Please consider supporting of core-js on Open Collective or Patreon:&gt; https://opencollective.com/core-js&gt; https://www.patreon.com/zloirockAlso, the author of core-js ( https://github.com/zloirock ) is looking for a good job -)&gt; @apollo/protobufjs@1.0.5 postinstall C:\\Users\\Laohoo\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli\\node_modules\\@apollo\\protobufjs&gt; node scripts/postinstall&gt; nodemon@1.19.4 postinstall C:\\Users\\Laohoo\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli\\node_modules\\nodemon&gt; node bin/postinstall || exit 0Love nodemon? You can now support the project via the open collective: &gt; https://opencollective.com/nodemon/donate&gt; ejs@2.7.4 postinstall C:\\Users\\Laohoo\\AppData\\Roaming\\npm\\node_modules\\@vue\\cli\\node_modules\\ejs&gt; node ./postinstall.jsThank you for installing EJS: built with the Jake JavaScript build tool (https://jakejs.com/)npm WARN @vue/compiler-sfc@3.0.4 requires a peer of vue@3.0.4 but none is installed. You must install peer dependencies yourself.npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules\\@vue\\cli\\node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)+ @vue/cli@4.5.9added 1347 packages from 699 contributors in 72.435s 使用 Vue CLI 创建项目 执行命令：vue create book-store-app 1234D:\\sources\\vue_repos&gt;vue create book-store-app? Your connection to the default yarn registry seems to be slow. Use https://registry.npm.taobao.org for faster installation? Yes ( 是否选择使用 tabbao 源来加快安装速度，回答: y) 此处使用了 yarn 包管理工具，如果没有安装 yarn 将没有类似提示及选择 选择预设选项 12345Vue CLI v4.5.9? Please pick a preset: Default ([Vue 2] babel, eslint) ( Vue2 默认选项) Default (Vue 3 Preview) ([Vue 3] babel, eslint) ( Vue3 默认选项)&gt; Manually select features (手动选择功能，选择这一项，回车) 手动选择功能（星号表示选中该项； 空格用于 选择/取消 ） 12345678910111213Vue CLI v4.5.9? Please pick a preset: Manually select features? Check the features needed for your project: (*) Choose Vue version (选择版本) (*) Babel (编码转换) ( ) TypeScript (TypeScript 开发支持) ( ) Progressive Web App (PWA) Support (渐进式网页支持，国内网络目前对这一项支持不好) (*) Router (路由功能) (*) Vuex (状态管理) ( ) CSS Pre-processors (CSS预处理)&gt;( ) Linter / Formatter (代码规范) ( ) Unit Testing (单元测试) ( ) E2E Testing (ESE测试) 选择 Vue 2.x 版本 123456Vue CLI v4.5.9? Please pick a preset: Manually select features? Check the features needed for your project: Choose Vue version, Babel, Router, Vuex? Choose a version of Vue.js that you want to start the project with (Use arrow keys)&gt; 2.x 3.x (Preview) 路由是否使用 history 模式，选择 n 12345Vue CLI v4.5.9? Please pick a preset: Manually select features? Check the features needed for your project: Choose Vue version, Babel, Router, Vuex? Choose a version of Vue.js that you want to start the project with 2.x? Use history mode for router? (Requires proper server setup for index fallback in production) No Babel, ESLint等配置使用专用配置文件或使用 package.json 12345678Vue CLI v4.5.9? Please pick a preset: Manually select features? Check the features needed for your project: Choose Vue version, Babel, Router, Vuex? Choose a version of Vue.js that you want to start the project with 2.x? Use history mode for router? (Requires proper server setup for index fallback in production) No? Where do you prefer placing config for Babel, ESLint, etc.? (Use arrow keys)&gt; In dedicated config files In package.json 是否保存选项到预设中 1234567Vue CLI v4.5.9? Please pick a preset: Manually select features? Check the features needed for your project: Choose Vue version, Babel, Router, Vuex? Choose a version of Vue.js that you want to start the project with 2.x? Use history mode for router? (Requires proper server setup for index fallback in production) No? Where do you prefer placing config for Babel, ESLint, etc.? In dedicated config files? Save this as a preset for future projects? (y/N) 所有选项以及安装过程 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849Vue CLI v4.5.9? Please pick a preset: Manually select features? Check the features needed for your project: Choose Vue version, Babel, Router, Vuex? Choose a version of Vue.js that you want to start the project with 2.x? Use history mode for router? (Requires proper server setup for index fallback in production) No? Where do you prefer placing config for Babel, ESLint, etc.? In dedicated config files? Save this as a preset for future projects? NoVue CLI v4.5.9✨ Creating project in D:\\sources\\vue_repos\\book-store-app.⚙️ Installing CLI plugins. This might take a while...yarn install v1.22.5info No lockfile found.[1/4] Resolving packages...[2/4] Fetching packages...info fsevents@2.1.3: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@2.1.3&quot; is an optional dependency and failed compatibility check. Excluding it from installation.info fsevents@1.2.13: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@1.2.13&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...success Saved lockfile.Done in 16.82s.🚀 Invoking generators...📦 Installing additional dependencies...yarn install v1.22.5[1/4] Resolving packages...[2/4] Fetching packages...info fsevents@2.1.3: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@2.1.3&quot; is an optional dependency and failed compatibility check. Excluding it from installation.info fsevents@1.2.13: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@1.2.13&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...[4/4] Building fresh packages...success Saved lockfile.Done in 5.36s.⚓ Running completion hooks...📄 Generating README.md...🎉 Successfully created project book-store-app.👉 Get started with the following commands: $ cd book-store-app $ yarn serve 安装 vuetify 和 leancloud SDK进入项目文件夹1cd book-store-app 安装 vuetify输入命令：vue add vuetify 123456789101112131415161718192021222324252627282930D:\\sources\\vue_repos\\book-store-app&gt;vue add vuetify📦 Installing vue-cli-plugin-vuetify...yarn add v1.22.5[1/4] Resolving packages...[2/4] Fetching packages...info fsevents@2.1.3: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@2.1.3&quot; is an optional dependency and failed compatibility check. Excluding it from installation.info fsevents@1.2.13: The platform &quot;win32&quot; is incompatible with this module.info &quot;fsevents@1.2.13&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...[4/4] Building fresh packages...success Saved lockfile.success Saved 5 new dependencies.info Direct dependencies└─ vue-cli-plugin-vuetify@2.0.8info All dependencies├─ interpret@1.4.0├─ null-loader@3.0.0├─ rechoir@0.6.2├─ shelljs@0.8.4└─ vue-cli-plugin-vuetify@2.0.8Done in 6.29s.✔ Successfully installed plugin: vue-cli-plugin-vuetify? Choose a preset: (Use arrow keys) (选择预设，使用方向键)&gt; Default (recommended) (默认值，推荐 -- 选择这一项) Prototype (rapid development) (原型， 快速开发) Configure (advanced) (配置，高级) 安装 leancloud SDK输入命令： npm install leancloud-storage --save --registry https://registry.npm.taobao.org 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657D:\\sources\\vue_repos\\book-store-app&gt; npm install leancloud-storage --save --registry https://registry.npm.taobao.orgnpm WARN deprecated core-js@2.6.12: core-js@&lt;3 is no longer maintained and not recommended for usage due to the number of issues. Please, upgrade your dependencies to the actual version of core-js@3.npm WARN deprecated @hapi/address@2.1.4: This version has been deprecated and is no longer supported or maintainednpm WARN deprecated @hapi/bourne@1.3.2: This version has been deprecated and is no longer supported or maintainednpm WARN deprecated @hapi/topo@3.1.6: This version has been deprecated and is no longer supported or maintainednpm WARN deprecated @hapi/hoek@8.5.1: This version has been deprecated and is no longer supported or maintainednpm WARN deprecated @hapi/joi@15.1.1: joi is leaving the @hapi organization and moving back to &#x27;joi&#x27; (https://github.com/sideway/joi/issues/2411)npm WARN deprecated request@2.88.2: request has been deprecated, see https://github.com/request/request/issues/3142npm WARN deprecated har-validator@5.1.5: this library is no longer supportednpm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecatednpm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecatednpm WARN deprecated chokidar@2.1.8: Chokidar 2 will break on node v14+. Upgrade to chokidar 3 with 15x less dependencies.npm WARN deprecated fsevents@1.2.13: fsevents 1 will break on node v14+ and could be using insecure binaries. Upgrade to fsevents 2.npm WARN rm not removing D:\\sources\\vue_repos\\book-store-app\\node_modules\\.bin\\semver.cmd as it wasn&#x27;t installed by D:\\sources\\vue_repos\\book-store-app\\node_modules\\semvernpm WARN rm not removing D:\\sources\\vue_repos\\book-store-app\\node_modules\\.bin\\semver as it wasn&#x27;t installed by D:\\sources\\vue_repos\\book-store-app\\node_modules\\semvernpm WARN rm not removing D:\\sources\\vue_repos\\book-store-app\\node_modules\\.bin\\json5.cmd as it wasn&#x27;t installed by D:\\sources\\vue_repos\\book-store-app\\node_modules\\json5npm WARN rm not removing D:\\sources\\vue_repos\\book-store-app\\node_modules\\.bin\\json5 as it wasn&#x27;t installed by D:\\sources\\vue_repos\\book-store-app\\node_modules\\json5&gt; core-js@2.6.12 postinstall D:\\sources\\vue_repos\\book-store-app\\node_modules\\@babel\\runtime-corejs2\\node_modules\\core-js&gt; node -e &quot;try&#123;require(&#x27;./postinstall&#x27;)&#125;catch(e)&#123;&#125;&quot;Thank you for using core-js ( https://github.com/zloirock/core-js ) for polyfilling JavaScript standard library!The project needs your help! Please consider supporting of core-js on Open Collective or Patreon:&gt; https://opencollective.com/core-js&gt; https://www.patreon.com/zloirockAlso, the author of core-js ( https://github.com/zloirock ) is looking for a good job -)&gt; core-js@3.8.1 postinstall D:\\sources\\vue_repos\\book-store-app\\node_modules\\@vue\\babel-preset-app\\node_modules\\core-js&gt; node -e &quot;try&#123;require(&#x27;./postinstall&#x27;)&#125;catch(e)&#123;&#125;&quot;&gt; core-js@2.6.12 postinstall D:\\sources\\vue_repos\\book-store-app\\node_modules\\babel-runtime\\node_modules\\core-js&gt; node -e &quot;try&#123;require(&#x27;./postinstall&#x27;)&#125;catch(e)&#123;&#125;&quot;&gt; ejs@2.7.4 postinstall D:\\sources\\vue_repos\\book-store-app\\node_modules\\ejs&gt; node ./postinstall.jsThank you for installing EJS: built with the Jake JavaScript build tool (https://jakejs.com/)npm notice created a lockfile as package-lock.json. You should commit this file.npm WARN optional SKIPPING OPTIONAL DEPENDENCY: vue-loader-v16@npm:vue-loader@^16.0.0-beta.7 (node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16):npm WARN notarget SKIPPING OPTIONAL DEPENDENCY: No matching version found for vue-loader-v16@16.1.1.npm WARN @vue/babel-preset-app@4.5.9 requires a peer of core-js@^3 but none is installed. You must install peer dependencies yourself.npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules\\chokidar\\node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.1.3 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.1.3: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)+ leancloud-storage@4.8.2added 162 packages from 87 contributors, removed 70 packages and updated 1097 packages in 72.668s64 packages are looking for funding run `npm fund` for details 配置 leancloud SDK创建文件夹: src\\api\\config\\ 创建并编辑文件： src\\api\\config\\lc.config.js ， 内容如以下所示： 12345678910export default &#123; //&#x27;这里填写 leancloud 的 appId&#x27;, id: &#x27;9MCRS87WVkReLtNbQWbnllm9-********&#x27;, // &#x27;这里填写 leancloud 的 appKey&#x27;, key: &#x27;zAfYTXaiXYGeQUm8********&#x27;, // &#x27;这里填写 leancloud 的 REST API 服务器地址，国际版应用等未绑定自定义域名的此项留空&#x27; url: &#x27;https://********.lc-cn-n1-shared.com&#x27;,&#125; 以上部分内容已经用 星号 隐藏，请用自己的 leancloud 应用 key 代替以上三个内容 leancloud SDK 初始化创建并编辑文件：src\\api\\init.js， 文件内容如以下所示： 123456789101112131415161718192021222324import LC from &#x27;leancloud-storage&#x27;;import config from &#x27;./config/lc.config&#x27;;let initOptions;if (config.url.trim() === &#x27;&#x27;) &#123; // url 为空的时候，访问国际版：leancloud.app initOptions = &#123; appId: config.id, appKey: config.key, &#125;;&#125; else &#123; // url 不为空的时候，访问国内版:leancloud.cn initOptions = &#123; appId: config.id, appKey: config.key, serverURLs: config.url, &#125;;&#125;// 执行 leanCloud 初始化LC.init(initOptions);export default &#123;&#125; 在 main.js 中导入并执行 leancloud 初始化编辑 src\\main.js, 添加 leancloud 初始化 123456789101112131415import Vue from &#x27;vue&#x27;;import App from &#x27;./App.vue&#x27;;import router from &#x27;./router&#x27;;import store from &#x27;./store&#x27;;import vuetify from &#x27;./plugins/vuetify&#x27;;require(&#x27;./api/init.js&#x27;); // 导入并执行 leanCloud 初始化Vue.config.productionTip = false;new Vue(&#123; router, store, vuetify, render: h =&gt; h(App)&#125;).$mount(&#x27;#app&#x27;); &#x3D;&#x3D;&#x3D; END &#x3D;&#x3D;&#x3D;","categories":[{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/categories/vue-js/"}],"tags":[{"name":"vuetify","slug":"vuetify","permalink":"https://hujiyi.github.io/tags/vuetify/"},{"name":"leancloud","slug":"leancloud","permalink":"https://hujiyi.github.io/tags/leancloud/"}]},{"title":"在 .NET Core 的 HttpClient 爬虫中处理 GB2312/GBK 字符","slug":"HttpClient-with-GB2312-GBK","date":"2020-03-14T13:09:50.000Z","updated":"2022-10-11T01:40:12.486Z","comments":true,"path":"2020/03/14/HttpClient-with-GB2312-GBK/","permalink":"https://hujiyi.github.io/2020/03/14/HttpClient-with-GB2312-GBK/","excerpt":"","text":"最近开始尝试使用 .NET Core 的 HttpClient 来学习写爬虫程序，第一步就遇到了某个使用 GB2312 编码的网页， 爬到的结果里面中文都是乱码， 于是想当然地在 Headers 里面添加了 &quot;Content-Type: text/html; charset=utf-8&quot;, 却被无情地抛出一个不支持这个头部的异常，于是走了很多的弯路，才发觉，这个问题原来是 HttpClient的默认字符集支持问题 。 创建 HttpClient 服务接口在 .Application 项目中添加名为 ISampleClient 的接口，其代码如下： 12345678910111213 using System;using System.Collections.Generic;using System.Text;using System.Threading.Tasks;namespace Marcin.Application&#123; public interface ISampleClient &#123; Task&lt;string&gt; GetDataAsync(string uri, string charset = &quot;UTF-8&quot;); &#125;&#125; 实现 HttpClient 服务接口HttpClient 默认不支持 GB2312 和 GBK, 所以如果使用它来下载， 网页编码为 GB2312 和 GBK 的话，其内的中文将显示为乱码。 解决办法：添加 NuGet 包：System.Text.Encoding.CodePages， 在代码中还需要添加注册 EncodingProvider的方法 Encoding.RegisterProvider(CodePagesEncodingProvider.Instance); 添加接口的实现类 SampleClient，其代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768using Microsoft.Extensions.Logging;using System;using System.Collections.Generic;using System.Net;using System.Net.Http;using System.Text;using System.Threading.Tasks;using HtmlAgilityPack;using System.IO;using System.Diagnostics;namespace Marcin.Application&#123; public class SampleClient : ISampleClient &#123; private readonly HttpClient _httpClient; private readonly ILogger _logger; public SampleClient(ILogger&lt;SampleClient&gt; logger, HttpClient httpClient) &#123; // 先添加这一个，才能使用 UTF 以外的其他编码 Encoding.RegisterProvider(CodePagesEncodingProvider.Instance); httpClient.DefaultRequestHeaders.Add(&quot;Accept&quot;, &quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;); httpClient.DefaultRequestHeaders.Add(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0&quot;); _httpClient = httpClient; _logger = logger; &#125; // charset 默认为 UTF-8, 根据需要可以修改为 GBK,GB2312等 public async Task&lt;string&gt; GetDataAsync(string uri, string charset = &quot;UTF-8&quot;) &#123; _logger.LogInformation(&quot;SampleClient &#123;0&#125; at &#123;1&#125;&quot;, &quot;Started&quot;, DateTime.UtcNow); Stopwatch sw = new Stopwatch(); sw.Start(); try &#123; var response = await _httpClient.GetAsync(uri).ConfigureAwait(false); // 读取字符流 var result = await response.Content.ReadAsStreamAsync(); // 使用指定的字符编码读取字符流， 默认编码：UTF-8，其他如：GBK var stream = new StreamReader(result, Encoding.GetEncoding(charset)); // 字符流转为字符串并返回 return stream.ReadToEnd(); &#125; catch (HttpRequestException hre) &#123; hre.ToString(); throw; &#125; catch (Exception ex) &#123; throw; &#125; finally &#123; sw.Stop(); _logger.LogInformation(&quot;response.Content.ReadAsStreamAsync time cost: &#123;0&#125; &quot;, sw.ElapsedMilliseconds.ToString()); &#125; &#125; &#125;&#125; &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":".NET Core","slug":"NET-Core","permalink":"https://hujiyi.github.io/categories/NET-Core/"}],"tags":[{"name":"HttpClient","slug":"HttpClient","permalink":"https://hujiyi.github.io/tags/HttpClient/"},{"name":"GB2312","slug":"GB2312","permalink":"https://hujiyi.github.io/tags/GB2312/"},{"name":"GBK","slug":"GBK","permalink":"https://hujiyi.github.io/tags/GBK/"}]},{"title":"在 .NET Core 3.1 Console 应用程序中使用依赖注入","slug":"dependency-injection-net-core-console-app-using-generic-hostbuilder","date":"2020-03-14T12:39:35.000Z","updated":"2022-10-11T01:40:12.919Z","comments":true,"path":"2020/03/14/dependency-injection-net-core-console-app-using-generic-hostbuilder/","permalink":"https://hujiyi.github.io/2020/03/14/dependency-injection-net-core-console-app-using-generic-hostbuilder/","excerpt":"","text":"创建 .NET Core Console App在 Visual Studio 2019 中创建一个 Console App 在解决方案中添加其他层， 创建类似于下图的解决方案项目结构： 添加 NuGet 包在 控制台项目中添加以下三个NuGet包： Microsoft.Extensions.DependencyInjection; Microsoft.Extensions.Hosting; Microsoft.Extensions.Logging; 添加 DI 容器打包 控制台项目中的 program.cs 文件，将其代码中的 main() 修改为以下内容: 1234567891011121314151617181920212223242526272829class Program&#123; static async System.Threading.Tasks.Task Main(string[] args) &#123; var builder = new HostBuilder() .ConfigureServices((hostContext, services)=&gt; &#123; services.AddLogging(configure =&gt; configure.AddConsole()); services.AddTransient&lt;MyApplication&gt;(); services.AddSingleton&lt;ISampleClient, SampleClient&gt;(); services.AddTransient&lt;HttpClient&gt;(); &#125;); var host = builder.Build(); using (var serviceScope = host.Services.CreateScope()) &#123; var services = serviceScope.ServiceProvider; try &#123; var myService = services.GetRequiredService&lt;MyApplication&gt;(); await myService.Run(); &#125; catch (Exception ex) &#123; Console.WriteLine(&quot;Error Occured: &#123;0&#125;&quot;, ex); &#125; &#125; &#125;&#125; 控制台项目中的 MyApplication.cs 文件类似于以下内容： 12345678910111213141516171819202122public class MyApplication &#123; private readonly ILogger _logger; private readonly IBusinessLayer _business; public MyApplication(ILogger&lt;MyApplication&gt; logger, IBusinessLayer business) &#123; _logger = logger; _business = business; &#125; internal async Task Run() &#123; _logger.LogInformation(&quot;Application &#123;applicationEvent&#125; at &#123;dateTime&#125;&quot;, &quot;Started&quot;, DateTime.UtcNow); _business.PerformBusiness(); _logger.LogInformation(&quot;Application &#123;applicationEvent&#125; at &#123;dateTime&#125;&quot;, &quot;Ended&quot;, DateTime.UtcNow); Console.WriteLine(&quot;PRESS &lt;ENTER&gt; TO EXIT&quot;); Console.ReadKey(); &#125; &#125; &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":".NET Core","slug":"NET-Core","permalink":"https://hujiyi.github.io/categories/NET-Core/"}],"tags":[{"name":"Console","slug":"Console","permalink":"https://hujiyi.github.io/tags/Console/"},{"name":"Dependency Injection","slug":"Dependency-Injection","permalink":"https://hujiyi.github.io/tags/Dependency-Injection/"},{"name":"HostBuilder","slug":"HostBuilder","permalink":"https://hujiyi.github.io/tags/HostBuilder/"}]},{"title":"在 Hexo 博客中使用标签云 hexo-tag-cloud","slug":"use-hexo-tag-cloud","date":"2020-02-29T08:53:20.000Z","updated":"2022-10-11T01:40:13.298Z","comments":true,"path":"2020/02/29/use-hexo-tag-cloud/","permalink":"https://hujiyi.github.io/2020/02/29/use-hexo-tag-cloud/","excerpt":"","text":"Hexo 标签云插件效果图 安装 hexo-tag-cloud进入到 Hexo 的根目录，打开终端，输入以下命令： 1yarn add hexo-tag-cloud 去修改主题的 tagcloud 的模板打开文件：themes&#x2F;pure&#x2F;layout&#x2F;_widget&#x2F;tagcloud.ejs， 将这个文件修改为如下内容： 123456789101112&lt;% if (site.tags.length) &#123; %&gt; &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;&lt;%- url_for(&#x27;/js/tagcloud.js&#x27;) %&gt;&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;&lt;%- url_for(&#x27;/js/tagcanvas.js&#x27;) %&gt;&quot;&gt;&lt;/script&gt; &lt;div class=&quot;widget-wrap&quot;&gt; &lt;h3 class=&quot;widget-title&quot;&gt;&lt;%= __(&#x27;tagcloud&#x27;) %&gt;&lt;/h3&gt; &lt;div id=&quot;myCanvasContainer&quot; class=&quot;widget tagcloud&quot;&gt; &lt;canvas width=&quot;250&quot; height=&quot;250&quot; id=&quot;resCanvas&quot; style=&quot;width:100%&quot;&gt; &lt;%- tagcloud() %&gt; &lt;/canvas&gt; &lt;/div&gt; &lt;/div&gt;&lt;% &#125; %&gt; 最后一步完成安装和显示，可以通过 hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 来进行本地预览, hexo clean 为必须选项。 PS:不要使用 hexo g -d 或者 hexo d -g 这类组合命令 &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hujiyi.github.io/categories/Hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://hujiyi.github.io/tags/hexo/"},{"name":"tag","slug":"tag","permalink":"https://hujiyi.github.io/tags/tag/"},{"name":"cloud","slug":"cloud","permalink":"https://hujiyi.github.io/tags/cloud/"}]},{"title":"Nginx 配置文件参数详解","slug":"nginx-configuration-file-parameters","date":"2020-02-28T06:12:56.000Z","updated":"2022-10-11T01:40:13.267Z","comments":true,"path":"2020/02/28/nginx-configuration-file-parameters/","permalink":"https://hujiyi.github.io/2020/02/28/nginx-configuration-file-parameters/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235#定义Nginx运行的用户和用户组user www www;#nginx进程数，建议设置为等于CPU总核心数。worker_processes 8;#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]error_log /var/log/nginx/error.log info;#进程文件pid /var/run/nginx.pid;#一个nginx进程打开的最多文件描述符数目，#理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，#但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。worker_rlimit_nofile 65535;#工作模式与连接数上限events&#123; #epoll是多路复用IO(I/O Multiplexing)中的一种方式, #仅用于linux2.6以上内核,可以大大提高nginx的性能 use epoll; #单个后台worker process进程的最大并发链接数 , #并发总数是 worker_processes 和 worker_connections 的乘积 worker_connections 1024;&#125;#设定http服务器http&#123; #文件扩展名与文件类型映射表 include mime.types; default_type application/octet-stream; #默认文件类型 #charset utf-8; #默认编码 server_names_hash_bucket_size 128; #服务器名字的hash表大小 client_header_buffer_size 32k; #上传文件大小限制 large_client_header_buffers 4 64k; #设定请求缓 client_max_body_size 8m; #设定请求缓 #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件， #对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off， #以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。 sendfile on; autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。 tcp_nopush on; #防止网络阻塞 tcp_nodelay on; #防止网络阻塞 keepalive_timeout 60; #长连接超时时间，单位是秒 #gzip模块设置 gzip on; #开启gzip压缩输出 gzip_min_length 1k; #最小压缩文件大小 gzip_buffers 4 16k; #压缩缓冲区 gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0） gzip_comp_level 2; #压缩等级 gzip_types text/plain application/x-javascript text/css application/xml; #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。 gzip_vary on; #limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用 #虚拟主机的配置 server &#123; #监听端口 listen 80; #域名可以有多个，用空格隔开 server_name en.codeday.me; #默认首页 index index.html index.htm index.php; #站点文件存放路径 root /data/www/codeday; #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置. location ~ ..(php|php5)?$ &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi.conf; &#125; #静态文件，nginx自己处理 location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123; #过期30天，静态文件不怎么更新，过期可以设大一点， #如果频繁更新，则可以设置得小一点。 expires 30d; &#125; #定义本虚拟主机的访问日志 access_log /var/log/nginx/access.log access; #默认请求 location / &#123; #反向代理 proxy_pass http://127.0.0.1:88; proxy_redirect off; proxy_set_header X-Real-IP $remote_addr; #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #以下是一些反向代理的配置，可选。 proxy_set_header Host $host; client_max_body_size 10m; #允许客户端请求的最大单文件字节数 client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数， proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时) proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时) proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时) proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小 proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置 proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers2） proxy_temp_file_write_size 64k; #设定缓存文件夹大小，大于这个值，将从upstream服务器传 &#125; #本地动静分离反向代理配置 #所有jsp的页面均交由tomcat或resin处理 location ~ .(jsp|jspx|do)?$ &#123; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://127.0.0.1:8080; &#125; #所有静态文件由nginx直接读取不经过tomcat或resin location ~ ..(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$ &#123; expires 15d; &#125; location ~ ..(js|css)?$ &#123; expires 1h; &#125; &#125;&#125; &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"Nginx","slug":"Nginx","permalink":"https://hujiyi.github.io/categories/Nginx/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"https://hujiyi.github.io/tags/Nginx/"}]},{"title":"在 Linux Mint 19.3 中使用 JetBrains Rider 2019 开发 ABP vNext 应用程序","slug":"use-abp-vnext-with-rider-on-linux-mint-19","date":"2020-02-25T09:05:01.000Z","updated":"2022-10-11T01:40:13.282Z","comments":true,"path":"2020/02/25/use-abp-vnext-with-rider-on-linux-mint-19/","permalink":"https://hujiyi.github.io/2020/02/25/use-abp-vnext-with-rider-on-linux-mint-19/","excerpt":"","text":"创建项目在 ABP vNext 网站的 Get Started 创建一个名字为 Acorn.BookStore 的 MVC 项目 将下载后的 BookStore.zip 解压缩到 Acron.BookStore 文件夹，并用 Rider 2019 打开该文件夹下名为 Acorn.BookStore.sln 的解决方案。 切换到 EF Core MySql 提供程序安装 Volo.Abp.EntityFrameworkCore.MySQL包在解决方案的 src 文件夹中的 Acorn.BookStore.EntityFrameworkCore 项目上 右键 选择 Manage NuGet Packages, 在下面出现的搜索框输入 Volo.Abp.EntityFrameworkCore.MySQL ， 并选择安装到 Acorn.BookStore.EntityFrameworkCore 项目中。 替换模块依赖项在 .EntityFrameworkCore 项目中找到 BookStoreEntityFrameworkCoreModule 类(BookStoreEntityFrameworkCoreModule 前面的 BookStore为创建项目时使用的名称，如果使用了不同的名字，找到对应的即可), 删除 DependsOn attribute 上的 typeof(AbpEntityFrameworkCoreSqlServerModule), 添加 typeof(AbpEntityFrameworkCoreMySQLModule) (或者替换 using Volo.Abp.EntityFrameworkCore.SqlServer; 为 using Volo.Abp.EntityFrameworkCore.MySQL;). 使用 UseMySQL() 在 BookStoreEntityFrameworkCoreModule 的 ConfigureServices 方法中找到以下代码： 123456Configure&lt;AbpDbContextOptions&gt;(options =&gt;&#123; /* The main point to change your DBMS. * See also BookStoreMigrationsDbContextFactory for EF Core tooling. */ options.UseSqlServer();&#125;); 替换为： 1234567Configure&lt;AbpDbContextOptions&gt;(options =&gt;&#123; /* The main point to change your DBMS. * See also BookStoreMigrationsDbContextFactory for EF Core tooling. */ // options.UseSqlServer(); options.UseMySQL();&#125;); 在 Acorn.BookStore.EntityFrameworkCore.DbMigrations 项目中打开文件 BookStoreMigrationsDbContextFactory, 找到 BookStoreMigrationsDbContext 中的以下代码： 123456789public BookStoreMigrationsDbContext CreateDbContext(string[] args)&#123; var configuration = BuildConfiguration(); var builder = new DbContextOptionsBuilder&lt;BookStoreMigrationsDbContext&gt;() .UseSqlServer(configuration.GetConnectionString(&quot;Default&quot;)); return new BookStoreMigrationsDbContext(builder.Options);&#125; 修改为： 12345678910public BookStoreMigrationsDbContext CreateDbContext(string[] args)&#123; var configuration = BuildConfiguration(); var builder = new DbContextOptionsBuilder&lt;BookStoreMigrationsDbContext&gt;() .UseMySql(configuration.GetConnectionString(&quot;Default&quot;)); //.UseSqlServer(configuration.GetConnectionString(&quot;Default&quot;)); return new BookStoreMigrationsDbContext(builder.Options);&#125; 更改迁移 DbContext在 Acorn.BookStore.EntityFrameworkCore.DbMigrations 项目中打开文件 BookStoreMigrationsDbContext, 找到其中的 protected override void OnModelCreating(ModelBuilder builder) 方法，将该方法中的以下语句： 1builder.ConfigureIdentityServer(); 替换为： 12345// builder.ConfigureIdentityServer();builder.ConfigureIdentityServer(options =&gt;&#123; options.DatabaseProvider = EfCoreDatabaseProvider.MySql;&#125;); MySQL DBMS 与 SQL Server有一些细微的差异. 某些模块数据库映射配置(尤其是字段长度)会导致MySQL 出现问题. 例如某些 IdentityServer 模块表就存在这样的问题,它提供了一个选项可以根据您的 DBMS 配置字段. 启动模板包含 BookStoreMigrationsDbContext,它负责维护和迁移数据库架构. 此DbContext基本上调用依赖模块的扩展方法来配置其数据库表. 然后 ConfigureIdentityServer() 方法会将字段长度设置为不超过 MySQL 的限制. 少了这一步，全出现类似 BLOB/TEXT column &#39;Value&#39; used in key specification without a key length 的错误提示。 更改连接字符串MySQL连接字符串 与 SQL Server连接字符串 不同. 所以检查你的解决方案中所有的 appsettings.json 文件,更改其中的连接字符串.MySQL 连接字符串示例： 123&quot;ConnectionStrings&quot;: &#123; &quot;Default&quot;: &quot;Server=localhost;Database=BookStore20200225;Uid=root;Pwd=123456&quot;&#125;, 通常需要更改 .DbMigrator 和 .Web 项目里面的 appsettings.json ,但它取决于你的解决方案结构. 我不知道在 Rider 里面怎么设置某个项目为启动项目，或者是没有这个功能, 但是在可以启动的项目上 右键 时， 会出现 Run&#39;src/Acron.BookStore...&#39; 的菜单项. 所以这里的做法是在 appsettings.json 中修改了连接字符串后，把相应的 appsettings.json 文件也复制一份到 .EntityFrameworkCore.DbMigrations 项目中, 以便能够进行数据库的迁移和更新。 重新生成迁移 删除 .EntityFrameworkCore.DbMigrations 项目下的 Migrations文件夹, 并重新生成解决方案. 在 Rider 2019 的 Terminal 中将当前文件夹定位到 .EntityFrameworkCore.DbMigrations 项目下。 执行数据迁移命令： 123456$ dotnet ef add migrations &quot;inti&quot;Could not execute because the specified command or file was not found.Possible reasons for this include: * You misspelled a built-in dotnet command. * You intended to execute a .NET Core program, but dotnet-ef does not exist. * You intended to run a global tool, but a dotnet-prefixed executable with this name could not be found on the PATH. 如果出现以上提示，是因为没有添加 dotnet-ef 的工具包，解决办法： 1234$ dotnet tool update --global dotnet-efYou can invoke the tool using the following command: dotnet-efTool &#x27;dotnet-ef&#x27; (version &#x27;3.1.2&#x27;) was successfully installed 再次执行数据迁移命令： 1234$ dotnet ef migrations add &quot;init_mysql&quot;Build started...Build succeeded.Done. To undo this action, use &#x27;ef migrations remove&#x27; 更新到数据库： 12345$ dotnet ef database updateBuild started...Build succeeded.Applying migration &#x27;20200225085639_init_mysql&#x27;.Done. 初始化种子数据运行 .DbMigrator 项目创建数据库和初始种子数据。但是直接运行时会出现以下信息： 1234567891011[17:02:17 INF] Started database migrations...[17:02:17 INF] Migrating host database schema...[17:02:18 INF] Executing host database seed...[17:02:20 INF] Successfully completed host database migrations.[17:02:20 INF] Successfully completed database migrations.info: Microsoft.Hosting.Lifetime[0] Application started. Press Ctrl+C to shut down.info: Microsoft.Hosting.Lifetime[0] Hosting environment: Productioninfo: Microsoft.Hosting.Lifetime[0] Content root path: /home/yoda/source/Acorn.BookStore/src/Acorn.BookStore.DbMigrator/bin/Debug/netcoreapp3.1 在 Run 窗口显示以上内容时，就卡住不动了，所以这里的解决办法是，先执行数据迁移和更新数据库命令， 再运行 .DbMigrator 项目(正常情况应该是执行迁移命令之后 ，就可以直接运行这个项目完成数据库创建和初始种子数据两个工作). 运行应用程序最后运行 .Web 项目，就可以了。 &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"ABP vNext","slug":"ABP-vNext","permalink":"https://hujiyi.github.io/categories/ABP-vNext/"}],"tags":[{"name":"MariaDB","slug":"MariaDB","permalink":"https://hujiyi.github.io/tags/MariaDB/"},{"name":"Rider","slug":"Rider","permalink":"https://hujiyi.github.io/tags/Rider/"},{"name":"MVC","slug":"MVC","permalink":"https://hujiyi.github.io/tags/MVC/"}]},{"title":"在 CentOS 7 上为 Nginx 添加自签名SSL证书","slug":"create-self-signed-sll-certificate-nginx-centos7","date":"2020-02-21T03:01:01.000Z","updated":"2022-10-11T01:40:12.919Z","comments":true,"path":"2020/02/21/create-self-signed-sll-certificate-nginx-centos7/","permalink":"https://hujiyi.github.io/2020/02/21/create-self-signed-sll-certificate-nginx-centos7/","excerpt":"","text":"解决OpenSSL创建的自签名证书在chrome端无法信任的问题OpenSSL 创建自签名证书的方法在 chrome 上会遇到了证书无效的错误: 原因概述Chrome浏览器要求证书中必须包含 “Subject Alternative Names” 这一参数。 解决方案修改待用的openssl配置文件 1 拷贝openssl配置文件以备修改1sudo cp /etc/pki/tls/openssl.cnf /etc/pki/tls/openssl_bak.cnf 2 修改 openssl.cnf 文件1sudo vim /etc/pki/tls/openssl.cnf (1) 找到[ req ] 段落，添加如下配置： 1req_extentions = v3_req (2) 添加 v3_req 配置信息 12345[ v3_req ]# Extensions to add to a certificate request# basicConstraints = CA:FALSE# keyUsage = nonRepudiation, digitalSignature, keyEnciphermentsubjectAltName = @alt_names (3) 添加 alt_names 配置信息 12[ alt_names ]DNS.1 = linux111.esrichina.com 注：这里填入的即为 Subject Alternative Names 的域名名称 创建自签名SSL证书创建自签名证书创建存放证书的文件夹打算把创建好的SSL证书放在 /etc/ssl/private 文件夹中，CentOS 7中没有这个文件夹，所以先创建好： 1sudo mkdir /etc/ssl/private 在命令中使用 OpenSSL 创建自签名密钥和证书(此处有效期3650天)： 1sudo openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout /etc/ssl/private/nginx-selfsigned.key -out /etc/ssl/certs/nginx-selfsigned.crt -extensions v3_req 在我们继续操作之前，让我们看看命令中发生了什么： openssl：这是用于创建和管理 OpenSSL 证书、密钥和其他文件的基本命令工具。 req：此子命令指定我们要使用X.509证书签名请求管理。“X.509”是SSL和TLS为其密钥和证书管理所遵循的公钥基础结构标准。我们想要创建一个新的 X.509 证书，所以我们使用这个子命令。 -x509：这通过告诉实用程序我们要创建自签名证书而不是生成证书签名请求来进一步修改上一个子命令。 -nodes：这告诉 OpenSSL 跳过用密码保护我们的证书的选项。当服务器启动时，我们需要 Nginx 能够在没有用户干预的情况下读取文件。密码短语会阻止这种情况发生，因为我们必须在每次重启后输入密码。 -days 3650：此选项设置证书的有效时间长度。我们在这里设置了十年。 -newkey rsa：2048：这指定我们要同时生成新证书和新密钥。我们没有创建在上一步中签署证书所需的密钥，因此我们需要将其与证书一起创建。该rsa:2048部分告诉它制作一个2048位长的RSA密钥。 -keyout：这一行告诉 OpenSSL 在哪里放置我们正在创建的生成的私钥文件。 -out：这告诉 OpenSSL 在哪里放置我们正在创建的证书。 如上所述，这些选项将创建密钥文件和证书。我们将询问有关我们服务器的一些问题，以便将信息正确地填入到证书中。 最重要的一行是请求Common Name (e.g. server FQDN or YOUR name)。您需要输入与服务器关联的域名，或者是您服务器的公共IP地址。 整个提示将如下所示： 1234567Country Name (2 letter code) [AU]:USState or Province Name (full name) [Some-State]:New YorkLocality Name (eg, city) []:New York CityOrganization Name (eg, company) [Internet Widgits Pty Ltd]:Bouncy Castles, Inc.Organizational Unit Name (eg, section) []:Ministry of Water SlidesCommon Name (e.g. server FQDN or YOUR name) []:server_IP_addressEmail Address []:admin@your_domain.com 创建的两个文件都将放在 /etc/ssl 目录的相应子目录中。 在我们使用OpenSSL的同时，我们还应该创建一个完整的 Diffie-Hellman 组，用于与客户协商完整的保密。 通过输入以下内容来执行 1sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048 这可能需要几分钟，一旦完成，您将拥有一个强大的DH组。&#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;dhparam.pem 可以在我们的配置中使用。 配置 Nginx 以使用 SSL我们在&#x2F;etc&#x2F;ssl目录下创建了密钥和证书文件。现在我们只需要修改我们的Nginx配置就可以使用它们。 我们将对配置进行一些调整。 我们将创建一个包含 SSL 密钥和证书文件位置的配置代码。 我们将创建一个包含强 SSL 设置的配置代码，可以在将来与任何证书一起使用。 我们将调整我们的 Nginx 配置文件来处理 SSL 请求并使用上面的两个代码段。 这种配置 Nginx 的方法将允许将常见配置段放入可重用模块中。 创建指向SSL密钥和证书的配置代码首先，让我们在 /etc/nginx/snippets目录中创建一个新的 Nginx 配置代码。 为了正确区分此文件，我们称之为 self-signed.conf： 1sudo vim /etc/nginx/snippets/self-signed.conf 在这个文件中，我们只需要将 ssl_certificate 设置为我们的证书文件和 ssl_certificate_key 相关的密钥。在我们的例子中，是这样的： 12ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key; 添加这些行后，保存并关闭该文件。 使用强加密设置创建配置代码接下来，我们将创建另一个代码，用于定义一些SSL设置。这将使Nginx更加安全，并启用一些有助于保证我们的服务器安全的高级功能。 我们为了使设置的参数可以在将来的Nginx配置中重用，因此我们将为该文件指定一个通用名称： 1sudo vim /etc/nginx/snippets/ssl-params.conf 对其进行修改如下： 123456789101112131415161718192021# from https://cipherli.st/# and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.htmlssl_protocols TLSv1 TLSv1.1 TLSv1.2;ssl_prefer_server_ciphers on;ssl_ciphers &quot;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&quot;;ssl_ecdh_curve secp384r1;ssl_session_cache shared:SSL:10m;ssl_session_tickets off;ssl_stapling on;ssl_stapling_verify on;resolver 8.8.8.8 8.8.4.4 valid=300s;resolver_timeout 5s;# Disable preloading HSTS for now. You can use the commented out header line that includes# the &quot;preload&quot; directive if you understand the implications.#add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains; preload&quot;;add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains&quot;;add_header X-Frame-Options DENY;add_header X-Content-Type-Options nosniff;ssl_dhparam /etc/ssl/certs/dhparam.pem; 调整Nginx配置以使用SSL打开 nginx 配置文件进行调整 1sudo vim /etc/nginx/nginx.cnf 在里面，原来的nginx配置文件开始可能像这样： 12345678910server &#123; listen 80 default_server; listen [::]:80 default_server; # SSL configuration # listen 443 ssl default_server; # listen [::]:443 ssl default_server; . . . 修改此配置，以便将未加密的HTTP请求自动重定向到加密的HTTPS。这为我们的网站提供了最佳安全性。如果要同时允许HTTP和HTTPS流量，请使用后面的配置。将把配置分成两个独立的块。在两个第一个listen指令之后，我们将添加一个server_name指令，设置为服务器的域名，或者是IP地址。然后，我们将设置重定向到我们将要创建的第二个Nginx配置文件。之后，我们将关闭这个短块： 注意：我们将使用302重定向，直到我们确认网站正常。我们可以将其更改为永久301重定向。 123456789101112131415161718192021222324252627282930server &#123; listen 80 default_server; listen [::]:80 default_server; server_name _; return 302 https://192.168.0.100;&#125;server &#123; ssl on; listen 443 ssl http2 default_server; listen [::]:443 ssl http2 default_server; server_name _; root /usr/share/nginx/html; charset utf-8,gbk; include /etc/nginx/snippets/self-singed.conf; include /etc/nginx/snippets/ssl-params.conf; # Load configuration files for the default server block include /etc/nginx/default.d/*.conf; location / &#123; &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125;&#125; 完成后保存并关闭文件。 启用Nginx中的更改首先，我们应该检查以确保我们的文件中没有语法错误。我们可以通过输入以下内容来执 1sudo nginx -t 如果一切顺利，您将得到如下结果： 123nginx: [warn] &quot;ssl_stapling&quot; ignored, issuer certificate not foundnginx: the configuration file /etc/nginx/nginx.conf syntax is oknginx: configuration file /etc/nginx/nginx.conf test is successful 如果输出与上述内容匹配，则配置文件没有语法错误。我们可以安全地重启Nginx以实现我们的更改： 1sudo systemctl restart nginx 我们的服务器现在可以通过HTTPS访问。 更改为永久重定向如果您的重定向工作正常并且您确定只想允许加密流量，则应修改 Nginx 配置以使永久重定向。 再次打开 Nginx配置文件配置文件： 1sudo vim /etc/nginx/nginx.conf 找到return 302并将其更改为return 301： 12345678server &#123; listen 80 default_server; listen [::]:80 default_server; server_name server_domain_or_IP; return 301 https://$server_name$request_uri;&#125;. . . 保存并关闭文件。 检查配置是否存在语法错误： 1sudo nginx -t 准备好后，重新启动Nginx以使重定向永久化： 1sudo systemctl restart nginx 您的站点现在应该在通过HTTP访问时永久重定向到HTTPS。 参考资料： OpenSSL创建的自签名证书在chrome端无法信任 如何为Nginx创建自签名SSL证书 给Nginx配置一个自签名的SSL证书 &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"Nginx","slug":"Nginx","permalink":"https://hujiyi.github.io/categories/Nginx/"}],"tags":[{"name":"CentOS 7","slug":"CentOS-7","permalink":"https://hujiyi.github.io/tags/CentOS-7/"},{"name":"Nginx","slug":"Nginx","permalink":"https://hujiyi.github.io/tags/Nginx/"},{"name":"SSL","slug":"SSL","permalink":"https://hujiyi.github.io/tags/SSL/"}]},{"title":"多电脑同步使用 hexo","slug":"hexo-multi-computer-sync","date":"2020-02-03T06:25:01.000Z","updated":"2022-10-11T01:40:13.254Z","comments":true,"path":"2020/02/03/hexo-multi-computer-sync/","permalink":"https://hujiyi.github.io/2020/02/03/hexo-multi-computer-sync/","excerpt":"","text":"创建私有仓库在 github 上创建名为： hexoblog 的私有仓库，步骤略。 删除新增加主题的 .git 文件夹在 Hexo 中添加的第三方主题 pure 包含有 .git 文件夹，如果这个文件夹没有删除的话，该主题内的所有内容都不能上传仓库中，所以需要先把该文件夹删除掉。 显示 pure 文件夹的内容，包含隐藏文件夹： 12345678910111213141516171819$ ls ./themes/pure -latotal 84drwxr-xr-x 9 yoda yoda 4096 2月 2 22:59 .drwxr-xr-x 4 yoda yoda 4096 2月 2 22:49 ..-rw-r--r-- 1 yoda yoda 6491 2月 3 11:49 _config.yml-rw-r--r-- 1 yoda yoda 6350 2月 2 22:59 _config.yml.exampledrwxr-xr-x 8 yoda yoda 4096 2月 2 22:59 .git-rw-r--r-- 1 yoda yoda 28 2月 3 14:11 .gitignoredrwxr-xr-x 2 yoda yoda 4096 2月 2 22:59 languagesdrwxr-xr-x 7 yoda yoda 4096 2月 2 22:59 layout-rw-r--r-- 1 yoda yoda 1053 2月 2 22:59 LICENSE-rw-r--r-- 1 yoda yoda 102 2月 2 22:59 package.json-rw-r--r-- 1 yoda yoda 9523 2月 2 22:59 README.cn.md-rw-r--r-- 1 yoda yoda 4164 2月 2 22:59 README.mddrwxr-xr-x 2 yoda yoda 4096 2月 2 22:59 screenshotdrwxr-xr-x 2 yoda yoda 4096 2月 2 22:59 scriptsdrwxr-xr-x 6 yoda yoda 4096 2月 2 22:59 sourcedrwxr-xr-x 10 yoda yoda 4096 2月 2 22:59 _source 删除 .git 文件夹 1$ rm ./themes/pure/.git -rf 上传项目到 github初始化本地仓库 1$ git init 添加远程仓库地址 1$ git remote add origin git@github.com:hujiyi/hexoblog.git 添加要提交的文件 123456789101112131415$ git add .warning: adding embedded git repository: themes/purehint: You&#x27;ve added another git repository inside your current repository.hint: Clones of the outer repository will not contain the contents ofhint: the embedded repository and will not know how to obtain it.hint: If you meant to add a submodule, use:hint: hint: git submodule add &lt;url&gt; themes/purehint: hint: If you added this path by mistake, you can remove it from thehint: index with:hint: hint: git rm --cached themes/purehint: hint: See &quot;git help submodule&quot; for more information. 添加提交注释信息 1234567$ git commit -m &quot;init&quot;[master (root-commit) 3b6c260] init 105 files changed, 8951 insertions(+) create mode 100644 .gitignore create mode 100644 yarn.lock 提交到 master 分支 1$ git push origin master 撰写完后如何再次同步 123git add .git commit -m &quot;这里填写你本次提交的备注，内容随意&quot;git push origin 分支名 取回远程主机某个分支的更新 1git pull 总结总的来说，这样可以来回控制你的版本，只要善用 git，你可以在任意电脑撰写你的博客。控制你的项目。 所以，部署完项目后A电脑和B电脑部署区别如下 A: 123git add .git commit -m &quot;这里填写你本次提交的备注，内容随意&quot;git push origin 分支名 B: 123456git pullhexo new 文章名hexo g -dgit add .git commit -m &quot;这里填写你本次提交的备注，内容随意&quot;git push origin 分支名 A: 123456git pullhexo new 文章名hexo g -dgit add .git commit -m &quot;这里填写你本次提交的备注，内容随意&quot;git push origin 分支名 &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hujiyi.github.io/categories/Hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://hujiyi.github.io/tags/hexo/"}]},{"title":"使用国内镜像安装Rust开发环境","slug":"download-Rustup-and-install-Rust-with-USTC-mirrors","date":"2020-02-03T04:24:52.000Z","updated":"2022-10-11T01:40:13.188Z","comments":true,"path":"2020/02/03/download-Rustup-and-install-Rust-with-USTC-mirrors/","permalink":"https://hujiyi.github.io/2020/02/03/download-Rustup-and-install-Rust-with-USTC-mirrors/","excerpt":"","text":"安装RustRustup 是 Rust 官方的跨平台 Rust 安装工具。 在国内安装时，可能会出现网络问题无法安装或是安装速度非常慢，可以通过修改环境变量 RUSTUP_DIST_SERVER 和 RUSTUP_UPDATE_ROOT 来改为使用国内的镜像进行安装。 设置使用国内镜像参考：Rust Toolchain 反向代理使用帮助 使用 rustup 前，先设置环境变量 RUSTUP_DIST_SERVER （用于更新 toolchain）： 1export RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static 以及 RUSTUP_UPDATE_ROOT （用于更新 rustup）： 1export RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup 第一次安装 rustup 的时候，如果按照官网教程 https://sh.rustup.rs 链接无法下载，可以通过 jsdelivr 下载 rustup-init.sh， 然后把脚本中的 RUSTUP_UPDATE_ROOT 变量改为 https://mirrors.ustc.edu.cn/rust-static/rustup。 下载 Rustup 并安装 Rust要下载 Rustup 并安装 Rust，请在终端中运行以下命令，然后遵循屏幕上的指示。 1curl --proto &#x27;=https&#x27; --tlsv1.2 -sSf https://sh.rustup.rs | sh 在Rust中，cargo使用国内镜像源为应用添加依赖时，默认的依赖安装源在 crates.io，即 Rust 包的仓库中找到所有类别的库。 程序中引用 crates，编译时需要从官方仓库中下载 crates 文件，但是使用官方的源有的时候很慢并且不稳定，所以使用时需要替换为国内镜像地址，目前常用的是中科大的源。 在 cargo.toml 文件中添加了依赖之后，运行 cargo build 命令时，如果网络出现问题，则会卡在 blocking waiting for file lock on package cache lock 这里。 更换cargo的源参考：Rust Crates 源使用帮助 使用说明在 $HOME/.cargo/config 中添加如下内容： 12345[source.crates-io]replace-with = &#x27;ustc&#x27;[source.ustc]registry = &quot;git://mirrors.ustc.edu.cn/crates.io-index&quot; 如果所处的环境中不允许使用 git 协议，可以把上述地址改为： 1registry = &quot;https://mirrors.ustc.edu.cn/crates.io-index&quot; 说明：如果更换 cargo 源后使用 cargo build 命令还是出现 blocking waiting for file lock on package cache lock ， 则删除文件 $HOME/.cargo/.package-cache 即可. 警告: cargo search 无法使用镜像。 &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"Rust","slug":"Rust","permalink":"https://hujiyi.github.io/categories/Rust/"}],"tags":[{"name":"Rustup","slug":"Rustup","permalink":"https://hujiyi.github.io/tags/Rustup/"},{"name":"Rust","slug":"Rust","permalink":"https://hujiyi.github.io/tags/Rust/"},{"name":"USTC","slug":"USTC","permalink":"https://hujiyi.github.io/tags/USTC/"}]},{"title":"创建基于 hexo 和 github 的博客","slug":"building-blog-based-hexo-and-github","date":"2020-02-03T03:51:18.000Z","updated":"2022-10-11T01:40:12.495Z","comments":true,"path":"2020/02/03/building-blog-based-hexo-and-github/","permalink":"https://hujiyi.github.io/2020/02/03/building-blog-based-hexo-and-github/","excerpt":"","text":"创建一个基于hexo和github的静态博客。 安装git检查电脑是否已经安装git,如果没有的话，执行以下命令安装： 1234567891011121314151617181920212223242526272829303132$ sudo apt install gitReading package lists... DoneBuilding dependency tree Reading state information... DoneThe following additional packages will be installed: git-man liberror-perlSuggested packages: git-daemon-run | git-daemon-sysvinit git-doc git-el git-email git-gui gitk gitweb git-cvs git-mediawiki git-svnThe following NEW packages will be installed: git git-man liberror-perl0 upgraded, 3 newly installed, 0 to remove and 27 not upgraded.Need to get 4,738 kB of archives.After this operation, 33.9 MB of additional disk space will be used.Do you want to continue? [Y/n] Get:1 http://mirrors.aliyun.com/ubuntu bionic/main amd64 liberror-perl all 0.17025-1 [22.8 kB]Get:2 http://mirrors.aliyun.com/ubuntu bionic-updates/main amd64 git-man all 1:2.17.1-1ubuntu0.5 [803 kB]Get:3 http://mirrors.aliyun.com/ubuntu bionic-updates/main amd64 git amd64 1:2.17.1-1ubuntu0.5 [3,912 kB]Fetched 4,738 kB in 7s (633 kB/s) Selecting previously unselected package liberror-perl.(Reading database ... 292089 files and directories currently installed.)Preparing to unpack .../liberror-perl_0.17025-1_all.deb ...Unpacking liberror-perl (0.17025-1) ...Selecting previously unselected package git-man.Preparing to unpack .../git-man_1%3a2.17.1-1ubuntu0.5_all.deb ...Unpacking git-man (1:2.17.1-1ubuntu0.5) ...Selecting previously unselected package git.Preparing to unpack .../git_1%3a2.17.1-1ubuntu0.5_amd64.deb ...Unpacking git (1:2.17.1-1ubuntu0.5) ...Setting up git-man (1:2.17.1-1ubuntu0.5) ...Setting up liberror-perl (0.17025-1) ...Setting up git (1:2.17.1-1ubuntu0.5) ...Processing triggers for man-db (2.8.3-2ubuntu0.1) ... 安装成功后，将你的Git与GitHub帐号绑定，设置user.name和user.email配置信息： 12345678910$ git config --global user.name &quot;你的GitHub用户名&quot;$ git config --global user.email &quot;你的GitHub注册邮箱&quot;$ ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;Generating public/private rsa key pair.Enter file in which to save the key (/home/yoda/.ssh/id_rsa): Created directory &#x27;/home/yoda/.ssh&#x27;.Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/yoda/.ssh/id_rsa.Your public key has been saved in /home/yoda/.ssh/id_rsa.pub. 显示生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制 1$ cat ~/.ssh/id_rsa.pub 打开GitHub_Settings_keys 页面，新建new SSH Key，Title为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。 在Git Bash中检测GitHub公钥设置是否成功，输入 ssh &#x67;&#x69;&#x74;&#64;&#x67;&#105;&#x74;&#x68;&#x75;&#98;&#x2e;&#99;&#111;&#109; ： 12345$ ssh git@github.comWarning: Permanently added the RSA host key for IP address &#x27;13.250.177.223&#x27; to the list of known hosts.PTY allocation request failed on channel 0Hi hujiyi! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.Connection to github.com closed. 安装 hexo使用 yarn 命令安装Hexo，输入： 1234567891011$ sudo yarn global add hexo-cliyarn global v1.21.1[1/4] Resolving packages...[2/4] Fetching packages...info fsevents@2.1.2: The platform &quot;linux&quot; is incompatible with this module.info &quot;fsevents@2.1.2&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...[4/4] Building fresh packages...success Installed &quot;hexo-cli@3.1.0&quot; with binaries: - hexoDone in 86.85s. 创建博客项目创建博客文件夹，输入命令： 1$ mkdir hujiyi.github.io 进入文件夹，并执行博客的初始化： 12345678910111213141516171819202122232425262728293031$ cd hujiyi.github.io/~/hujiyi.github.io$ hexo initINFO Cloning hexo-starter https://github.com/hexojs/hexo-starter.gitCloning into &#x27;/home/yoda/hujiyi.github.io&#x27;...remote: Enumerating objects: 30, done.remote: Counting objects: 100% (30/30), done.remote: Compressing objects: 100% (24/24), done.remote: Total 161 (delta 12), reused 12 (delta 4), pack-reused 131Receiving objects: 100% (161/161), 31.79 KiB | 174.00 KiB/s, done.Resolving deltas: 100% (74/74), done.Submodule &#x27;themes/landscape&#x27; (https://github.com/hexojs/hexo-theme-landscape.git) registered for path &#x27;themes/landscape&#x27;Cloning into &#x27;/home/yoda/hujiyi.github.io/themes/landscape&#x27;...remote: Enumerating objects: 1054, done. remote: Total 1054 (delta 0), reused 0 (delta 0), pack-reused 1054 Receiving objects: 100% (1054/1054), 3.21 MiB | 107.00 KiB/s, done.Resolving deltas: 100% (581/581), done.Submodule path &#x27;themes/landscape&#x27;: checked out &#x27;73a23c51f8487cfcd7c6deec96ccc7543960d350&#x27;INFO Install dependenciesyarn install v1.21.1info No lockfile found.[1/4] Resolving packages...[2/4] Fetching packages...info fsevents@2.1.2: The platform &quot;linux&quot; is incompatible with this module.info &quot;fsevents@2.1.2&quot; is an optional dependency and failed compatibility check. Excluding it from installation.info fsevents@1.2.11: The platform &quot;linux&quot; is incompatible with this module.info &quot;fsevents@1.2.11&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...[4/4] Building fresh packages...success Saved lockfile.Done in 129.04s.INFO Start blogging with Hexo! 添加 pure 主题123456~/hujiyi.github.io$ git clone https://github.com/cofess/hexo-theme-pure.git themes/pureCloning into &#x27;themes/pure&#x27;...remote: Enumerating objects: 3385, done.remote: Total 3385 (delta 0), reused 0 (delta 0), pack-reused 3385Receiving objects: 100% (3385/3385), 4.59 MiB | 51.00 KiB/s, done.Resolving deltas: 100% (1892/1892), done. 将 themes&#x2F;pure&#x2F;_source 文件夹下的所有文件夹复制到 站点的 source&#x2F; 文件夹下。 安装字数统计插件1234567891011121314151617~/hujiyi.github.io$ yarn add hexo-wordcountyarn add v1.21.1[1/4] Resolving packages...[2/4] Fetching packages...info fsevents@2.1.2: The platform &quot;linux&quot; is incompatible with this module.info &quot;fsevents@2.1.2&quot; is an optional dependency and failed compatibility check. Excluding it from installation.info fsevents@1.2.11: The platform &quot;linux&quot; is incompatible with this module.info &quot;fsevents@1.2.11&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...[4/4] Building fresh packages...success Saved lockfile.success Saved 1 new dependency.info Direct dependencies└─ hexo-wordcount@6.0.1info All dependencies└─ hexo-wordcount@6.0.1Done in 9.20s. 修改主题的配置文件 themes&#x2F;pure&#x2F;_config.yml，启用字数统计功能，如以下代码所示： 12345# wordcountpostCount: enable: true wordcount: true # 文章字数统计 min2read: true # 阅读时长预计 hexo-generator-json-content简介：用于生成静态站点数据，提供搜索功能的数据源。 安装： 12345678910111213141516171819202122~/hujiyi.github.io$ yarn add hexo-generator-json-contentyarn add v1.21.1[1/4] Resolving packages...[2/4] Fetching packages...warning Pattern [&quot;hexo-util@latest&quot;] is trying to unpack in the same destination &quot;/home/yoda/.cache/yarn/v6/npm-hexo-util-1.8.1-d8287561709e246a6a73f07fccaed2a82865a736-integrity/node_modules/hexo-util&quot; as pattern [&quot;hexo-util@^1.8.0&quot;,&quot;hexo-util@^1.4.0&quot;,&quot;hexo-util@^1.0.0&quot;]. This could result in non-deterministic behavior, skipping.warning Pattern [&quot;moment@latest&quot;] is trying to unpack in the same destination &quot;/home/yoda/.cache/yarn/v6/npm-moment-2.24.0-0d055d53f5052aa653c9f6eb68bb5d12bf5c2b5b-integrity/node_modules/moment&quot; as pattern [&quot;moment@^2.22.2&quot;,&quot;moment@&gt;= 2.9.0&quot;,&quot;moment@^2.10.6&quot;,&quot;moment@^2.18.0&quot;]. This could result in non-deterministic behavior, skipping.info fsevents@2.1.2: The platform &quot;linux&quot; is incompatible with this module.info &quot;fsevents@2.1.2&quot; is an optional dependency and failed compatibility check. Excluding it from installation.info fsevents@1.2.11: The platform &quot;linux&quot; is incompatible with this module.info &quot;fsevents@1.2.11&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...[4/4] Building fresh packages...success Saved lockfile.success Saved 4 new dependencies.info Direct dependencies└─ hexo-generator-json-content@4.1.6info All dependencies├─ hexo-generator-json-content@4.1.6├─ keyword-extractor@0.0.18├─ underscore.string@3.3.5└─ underscore@1.9.1Done in 2.13s. 配置： 在博客配置文件_config.yml中添加 1234567jsonContent: ignore: - path/to/a/page - url/to/one/post - an-entire-category - specific.file - .ext # a file extension 自动压缩代码插件 hexo-neat简介：自动压缩html、css、js代码 安装： 1234567891011121314151617181920212223242526272829303132333435363738394041424344~/hujiyi.github.io$ yarn add hexo-neatyarn add v1.21.1[1/4] Resolving packages...[2/4] Fetching packages...warning Pattern [&quot;hexo-util@latest&quot;] is trying to unpack in the same destination &quot;/home/yoda/.cache/yarn/v6/npm-hexo-util-1.8.1-d8287561709e246a6a73f07fccaed2a82865a736-integrity/node_modules/hexo-util&quot; as pattern [&quot;hexo-util@^1.8.0&quot;,&quot;hexo-util@^1.4.0&quot;,&quot;hexo-util@^1.0.0&quot;]. This could result in non-deterministic behavior, skipping.warning Pattern [&quot;moment@latest&quot;] is trying to unpack in the same destination &quot;/home/yoda/.cache/yarn/v6/npm-moment-2.24.0-0d055d53f5052aa653c9f6eb68bb5d12bf5c2b5b-integrity/node_modules/moment&quot; as pattern [&quot;moment@^2.22.2&quot;,&quot;moment@&gt;= 2.9.0&quot;,&quot;moment@^2.10.6&quot;,&quot;moment@^2.18.0&quot;]. This could result in non-deterministic behavior, skipping.info fsevents@2.1.2: The platform &quot;linux&quot; is incompatible with this module.info &quot;fsevents@2.1.2&quot; is an optional dependency and failed compatibility check. Excluding it from installation.info fsevents@1.2.11: The platform &quot;linux&quot; is incompatible with this module.info &quot;fsevents@1.2.11&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...[4/4] Building fresh packages...success Saved lockfile.success Saved 25 new dependencies.info Direct dependencies└─ hexo-neat@1.0.4info All dependencies├─ any-promise@1.3.0├─ change-case@3.0.2├─ clean-css@4.2.3├─ commander@2.9.0├─ constant-case@2.0.0├─ dot-case@2.1.1├─ he@1.1.1├─ header-case@1.0.1├─ hexo-neat@1.0.4├─ html-minifier@2.1.7├─ is-lower-case@1.1.3├─ is-upper-case@1.1.2├─ lower-case-first@1.0.2├─ ncname@1.0.0├─ object-assign@4.1.1├─ param-case@2.1.1├─ path-case@2.1.1├─ relateurl@0.2.7├─ sentence-case@2.1.1├─ stream-to-array@2.3.0├─ swap-case@1.1.2├─ title-case@2.1.1├─ uglify-js@2.6.4├─ upper-case-first@1.1.2└─ xml-char-classes@1.0.0Done in 4.09s. 配置： 在博客配置文件_config.yml中添加 12345678910111213141516171819202122neat_enable: true# 压缩html代码neat_html: enable: true exclude:# 压缩CSSneat_css: enable: true exclude: - &#x27;*.min.css&#x27;#压缩JSneat_js: enable: true mangle: true output: compress: exclude: - &#x27;*.min.js&#x27; 安装Git部署插件 hexo-deployer-git1234567891011121314151617~/hujiyi.github.io$ yarn add hexo-deployer-gityarn add v1.21.1[1/4] Resolving packages...[2/4] Fetching packages...info fsevents@2.1.2: The platform &quot;linux&quot; is incompatible with this module.info &quot;fsevents@2.1.2&quot; is an optional dependency and failed compatibility check. Excluding it from installation.info fsevents@1.2.11: The platform &quot;linux&quot; is incompatible with this module.info &quot;fsevents@1.2.11&quot; is an optional dependency and failed compatibility check. Excluding it from installation.[3/4] Linking dependencies...[4/4] Building fresh packages...success Saved lockfile.success Saved 1 new dependency.info Direct dependencies└─ hexo-deployer-git@2.1.0info All dependencies└─ hexo-deployer-git@2.1.0Done in 7.44s. 打开站点的配置文件_config.yml，翻到最后修改为： 1234deploy: type: git repository: git@github.com:用户名/用户名.github.io.git branch: master 完成后运行 hexo d 将网站上传部署到 GitHub Pages。 完成！这时访问我们的 GitHub 域名 https:&#x2F;&#x2F;用户名.github.io 就可以看到 Hexo 网站了 添加博客文章创建新文章 1hexo new &quot;your bolg title&quot; 编辑 source&#x2F;_posts&#x2F; 文件夹下的 同名 md 文件。 生成静态博客 1hexo g 上传到github 1hexo d 添加 gitalk 评论创建OAuth Application Gitalk 需要一个 Github Application，打开 https://github.com/settings/applications/new 当然，也可以在用户头像下的setting下的Developer settings中new一个Application，然后填写相应的参数。 Register a new OAuth application Application name （名字随便填，例如：Hujy blog comments） Something users will recognize and trust. Homepage URL （博客地址：https://hujiyi.github.io/） The full URL to your application homepage. Application description （描述，随便填） This is displayed to all users of your application. Authorization callback URL （博客地址，回调地址：https://hujiyi.github.io/） Your application’s callback URL. Read our OAuth documentation for more information. 完成后会生成相应的clientID 和 clientSecret。 12345678910111213Hujy blog comments@hujiyihujiyi owns this application.You can list your application in the GitHub Marketplace so that other users can discover it.0 usersClient ID 66f51d5c8d75dac*****Client Secret abac11570202d779515d511e338cf3********** 新建一个名字为 blogcomments 的仓库用于存储评论内容 修改主题的配置文件 themes&#x2F;pure&#x2F;_config.yml，如以下代码所示： 1234567891011121314# Comment# Gitment# Introduction: https://imsun.net/posts/gitment-introduction/comment: type: gitalk # 启用哪种评论系统 gitalk: # gitalk. https://gitalk.github.io/ owner: hujiyi #必须. GitHub repository 所有者，可以是个人或者组织。 admin: hujiyi #必须. GitHub repository 的所有者和合作者 (对这个 repository 有写权限的用户)。 repo: blogcomments #必须. GitHub repository. ClientID: 66f51d5c8d75dac***** #必须. GitHub Application Client ID. ClientSecret: abac11570202d779515d511e338cf3********** #必须. GitHub Application Client Secret. Hexo博客常用插件Hexo博客常用插件及用法 &#x3D;&#x3D;&#x3D;END&#x3D;&#x3D;&#x3D;","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hujiyi.github.io/categories/Hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://hujiyi.github.io/tags/hexo/"},{"name":"github","slug":"github","permalink":"https://hujiyi.github.io/tags/github/"}]}],"categories":[{"name":"learn vue3","slug":"learn-vue3","permalink":"https://hujiyi.github.io/categories/learn-vue3/"},{"name":"flutter","slug":"flutter","permalink":"https://hujiyi.github.io/categories/flutter/"},{"name":"Linux","slug":"Linux","permalink":"https://hujiyi.github.io/categories/Linux/"},{"name":"MySQL","slug":"MySQL","permalink":"https://hujiyi.github.io/categories/MySQL/"},{"name":"electron","slug":"electron","permalink":"https://hujiyi.github.io/categories/electron/"},{"name":"Tampermonkey脚本","slug":"Tampermonkey脚本","permalink":"https://hujiyi.github.io/categories/Tampermonkey%E8%84%9A%E6%9C%AC/"},{"name":"Java","slug":"Java","permalink":"https://hujiyi.github.io/categories/Java/"},{"name":"Visual Studio Code","slug":"Visual-Studio-Code","permalink":"https://hujiyi.github.io/categories/Visual-Studio-Code/"},{"name":"Hexo","slug":"Hexo","permalink":"https://hujiyi.github.io/categories/Hexo/"},{"name":"django","slug":"django","permalink":"https://hujiyi.github.io/categories/django/"},{"name":"photoshop","slug":"photoshop","permalink":"https://hujiyi.github.io/categories/photoshop/"},{"name":"cocos creator","slug":"cocos-creator","permalink":"https://hujiyi.github.io/categories/cocos-creator/"},{"name":"python","slug":"python","permalink":"https://hujiyi.github.io/categories/python/"},{"name":"flask","slug":"flask","permalink":"https://hujiyi.github.io/categories/flask/"},{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/categories/vue-js/"},{"name":".NET Core","slug":"NET-Core","permalink":"https://hujiyi.github.io/categories/NET-Core/"},{"name":"Nginx","slug":"Nginx","permalink":"https://hujiyi.github.io/categories/Nginx/"},{"name":"ABP vNext","slug":"ABP-vNext","permalink":"https://hujiyi.github.io/categories/ABP-vNext/"},{"name":"Rust","slug":"Rust","permalink":"https://hujiyi.github.io/categories/Rust/"}],"tags":[{"name":"vue3","slug":"vue3","permalink":"https://hujiyi.github.io/tags/vue3/"},{"name":"flutter","slug":"flutter","permalink":"https://hujiyi.github.io/tags/flutter/"},{"name":"LFS","slug":"LFS","permalink":"https://hujiyi.github.io/tags/LFS/"},{"name":"Linux","slug":"Linux","permalink":"https://hujiyi.github.io/tags/Linux/"},{"name":"MySQL","slug":"MySQL","permalink":"https://hujiyi.github.io/tags/MySQL/"},{"name":"electron","slug":"electron","permalink":"https://hujiyi.github.io/tags/electron/"},{"name":"vite","slug":"vite","permalink":"https://hujiyi.github.io/tags/vite/"},{"name":"vuetify","slug":"vuetify","permalink":"https://hujiyi.github.io/tags/vuetify/"},{"name":"tampermonkey","slug":"tampermonkey","permalink":"https://hujiyi.github.io/tags/tampermonkey/"},{"name":"javaScript","slug":"javaScript","permalink":"https://hujiyi.github.io/tags/javaScript/"},{"name":"command-line tools","slug":"command-line-tools","permalink":"https://hujiyi.github.io/tags/command-line-tools/"},{"name":"java","slug":"java","permalink":"https://hujiyi.github.io/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://hujiyi.github.io/tags/jdk/"},{"name":"注释","slug":"注释","permalink":"https://hujiyi.github.io/tags/%E6%B3%A8%E9%87%8A/"},{"name":"空格","slug":"空格","permalink":"https://hujiyi.github.io/tags/%E7%A9%BA%E6%A0%BC/"},{"name":"hexo","slug":"hexo","permalink":"https://hujiyi.github.io/tags/hexo/"},{"name":"butterfly","slug":"butterfly","permalink":"https://hujiyi.github.io/tags/butterfly/"},{"name":"github pages","slug":"github-pages","permalink":"https://hujiyi.github.io/tags/github-pages/"},{"name":"django","slug":"django","permalink":"https://hujiyi.github.io/tags/django/"},{"name":"python","slug":"python","permalink":"https://hujiyi.github.io/tags/python/"},{"name":"freezed","slug":"freezed","permalink":"https://hujiyi.github.io/tags/freezed/"},{"name":"go_router","slug":"go-router","permalink":"https://hujiyi.github.io/tags/go-router/"},{"name":"路由","slug":"路由","permalink":"https://hujiyi.github.io/tags/%E8%B7%AF%E7%94%B1/"},{"name":"photoshop","slug":"photoshop","permalink":"https://hujiyi.github.io/tags/photoshop/"},{"name":"cocos creator","slug":"cocos-creator","permalink":"https://hujiyi.github.io/tags/cocos-creator/"},{"name":"game","slug":"game","permalink":"https://hujiyi.github.io/tags/game/"},{"name":"pip","slug":"pip","permalink":"https://hujiyi.github.io/tags/pip/"},{"name":"flask","slug":"flask","permalink":"https://hujiyi.github.io/tags/flask/"},{"name":"webapi","slug":"webapi","permalink":"https://hujiyi.github.io/tags/webapi/"},{"name":"android studio","slug":"android-studio","permalink":"https://hujiyi.github.io/tags/android-studio/"},{"name":"leancloud","slug":"leancloud","permalink":"https://hujiyi.github.io/tags/leancloud/"},{"name":"element ui","slug":"element-ui","permalink":"https://hujiyi.github.io/tags/element-ui/"},{"name":"vue.js","slug":"vue-js","permalink":"https://hujiyi.github.io/tags/vue-js/"},{"name":"fish","slug":"fish","permalink":"https://hujiyi.github.io/tags/fish/"},{"name":"provider","slug":"provider","permalink":"https://hujiyi.github.io/tags/provider/"},{"name":"shared_preferences","slug":"shared-preferences","permalink":"https://hujiyi.github.io/tags/shared-preferences/"},{"name":"多语言","slug":"多语言","permalink":"https://hujiyi.github.io/tags/%E5%A4%9A%E8%AF%AD%E8%A8%80/"},{"name":"国际化","slug":"国际化","permalink":"https://hujiyi.github.io/tags/%E5%9B%BD%E9%99%85%E5%8C%96/"},{"name":"HttpClient","slug":"HttpClient","permalink":"https://hujiyi.github.io/tags/HttpClient/"},{"name":"GB2312","slug":"GB2312","permalink":"https://hujiyi.github.io/tags/GB2312/"},{"name":"GBK","slug":"GBK","permalink":"https://hujiyi.github.io/tags/GBK/"},{"name":"Console","slug":"Console","permalink":"https://hujiyi.github.io/tags/Console/"},{"name":"Dependency Injection","slug":"Dependency-Injection","permalink":"https://hujiyi.github.io/tags/Dependency-Injection/"},{"name":"HostBuilder","slug":"HostBuilder","permalink":"https://hujiyi.github.io/tags/HostBuilder/"},{"name":"tag","slug":"tag","permalink":"https://hujiyi.github.io/tags/tag/"},{"name":"cloud","slug":"cloud","permalink":"https://hujiyi.github.io/tags/cloud/"},{"name":"Nginx","slug":"Nginx","permalink":"https://hujiyi.github.io/tags/Nginx/"},{"name":"MariaDB","slug":"MariaDB","permalink":"https://hujiyi.github.io/tags/MariaDB/"},{"name":"Rider","slug":"Rider","permalink":"https://hujiyi.github.io/tags/Rider/"},{"name":"MVC","slug":"MVC","permalink":"https://hujiyi.github.io/tags/MVC/"},{"name":"CentOS 7","slug":"CentOS-7","permalink":"https://hujiyi.github.io/tags/CentOS-7/"},{"name":"SSL","slug":"SSL","permalink":"https://hujiyi.github.io/tags/SSL/"},{"name":"Rustup","slug":"Rustup","permalink":"https://hujiyi.github.io/tags/Rustup/"},{"name":"Rust","slug":"Rust","permalink":"https://hujiyi.github.io/tags/Rust/"},{"name":"USTC","slug":"USTC","permalink":"https://hujiyi.github.io/tags/USTC/"},{"name":"github","slug":"github","permalink":"https://hujiyi.github.io/tags/github/"}]}